"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@interactify";
exports.ids = ["vendor-chunks/@interactify"];
exports.modules = {

/***/ "(ssr)/./node_modules/@interactify/selection/dist/selecto.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@interactify/selection/dist/selecto.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLASS_NAME: () => (/* binding */ CLASS_NAME),\n/* harmony export */   EVENTS: () => (/* binding */ EVENTS),\n/* harmony export */   METHODS: () => (/* binding */ METHODS),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   OPTION_TYPES: () => (/* binding */ OPTION_TYPES),\n/* harmony export */   PROPERTIES: () => (/* binding */ PROPERTIES),\n/* harmony export */   \"default\": () => (/* binding */ Selecto)\n/* harmony export */ });\n/* harmony import */ var _scena_event_emitter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @scena/event-emitter */ \"(ssr)/./node_modules/@scena/event-emitter/dist/event-emitter.esm.js\");\n/* harmony import */ var gesto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! gesto */ \"(ssr)/./node_modules/gesto/dist/gesto.esm.js\");\n/* harmony import */ var framework_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! framework-utils */ \"(ssr)/./node_modules/framework-utils/dist/utils.esm.js\");\n/* harmony import */ var _daybrush_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @daybrush/utils */ \"(ssr)/./node_modules/@daybrush/utils/dist/utils.esm.js\");\n/* harmony import */ var _egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @egjs/children-differ */ \"(ssr)/./node_modules/@egjs/children-differ/dist/children-differ.esm.js\");\n/* harmony import */ var _scena_dragscroll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @scena/dragscroll */ \"(ssr)/./node_modules/@scena/dragscroll/dist/dragscroll.esm.js\");\n/* harmony import */ var keycon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! keycon */ \"(ssr)/./node_modules/keycon/dist/keycon.esm.js\");\n/* harmony import */ var overlap_area__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! overlap-area */ \"(ssr)/./node_modules/overlap-area/dist/overlap-area.esm.js\");\n/* harmony import */ var css_to_mat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! css-to-mat */ \"(ssr)/./node_modules/css-to-mat/dist/css-to-mat.esm.js\");\n/* harmony import */ var css_styled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! css-styled */ \"(ssr)/./node_modules/css-styled/dist/styled.esm.js\");\n/*\nCopyright (c) 2020 Daybrush\nname: @interactify/selection\nlicense: MIT\nauthor: \nrepository: git+https://github.com/designcombo/interactiy.git\nversion: 0.0.2\n*/\n\n\n\n\n\n\n\n\n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nfunction getClient(e) {\n    if (\"touches\" in e) {\n        var touch = e.touches[0] || e.changedTouches[0];\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    }\n    else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\nfunction filterDuplicated(arr) {\n    if (typeof Map === \"undefined\") {\n        return arr.filter(function (value, index) {\n            return arr.indexOf(value) === index;\n        });\n    }\n    var map = new Map();\n    return arr.filter(function (value) {\n        if (map.has(value)) {\n            return false;\n        }\n        map.set(value, true);\n        return true;\n    });\n}\nfunction elementFromPoint(baseNode, clientX, clientY) {\n    var doc = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(baseNode);\n    return (doc.elementFromPoint && doc.elementFromPoint(clientX, clientY)) || null;\n}\nfunction createElement(jsx, prevTarget, container) {\n    var tag = jsx.tag, children = jsx.children, attributes = jsx.attributes, className = jsx.className, style = jsx.style;\n    var el = prevTarget || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(container).createElement(tag);\n    for (var name_1 in attributes) {\n        el.setAttribute(name_1, attributes[name_1]);\n    }\n    var elChildren = el.children;\n    children.forEach(function (child, i) {\n        createElement(child, elChildren[i], el);\n    });\n    if (className) {\n        className.split(/\\s+/g).forEach(function (name) {\n            if (name && !(0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.hasClass)(el, name)) {\n                (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.addClass)(el, name);\n            }\n        });\n    }\n    if (style) {\n        var elStyle = el.style;\n        for (var name_2 in style) {\n            elStyle[name_2] = style[name_2];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nfunction h(tag, attrs) {\n    var children = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        children[_i - 2] = arguments[_i];\n    }\n    var _a = attrs || {}, _b = _a.className, className = _b === void 0 ? \"\" : _b, _c = _a.style, style = _c === void 0 ? {} : _c, attributes = __rest(_a, [\"className\", \"style\"]);\n    return {\n        tag: tag,\n        className: className,\n        style: style,\n        attributes: attributes,\n        children: children,\n    };\n}\nfunction diffValue(prev, cur, func) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\nfunction getRect(e, ratio, boundArea) {\n    var _a;\n    if (boundArea === void 0) { boundArea = e.data.boundArea; }\n    var _b = e.distX, distX = _b === void 0 ? 0 : _b, _c = e.distY, distY = _c === void 0 ? 0 : _c;\n    var _d = e.data, startX = _d.startX, startY = _d.startY;\n    if (ratio > 0) {\n        var nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        var nextWidth = ratio * nextHeight;\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    var width = Math.abs(distX);\n    var height = Math.abs(distY);\n    var maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    var maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n    _a = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.calculateBoundSize)([width, height], [0, 0], [maxWidth, maxHeight], !!ratio), width = _a[0], height = _a[1];\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n    var tx = Math.min(0, distX);\n    var ty = Math.min(0, distY);\n    var left = startX + tx;\n    var top = startY + ty;\n    return {\n        left: left,\n        top: top,\n        right: left + width,\n        bottom: top + height,\n        width: width,\n        height: height,\n    };\n}\nfunction getDefaultElementRect(el) {\n    var rect = el.getBoundingClientRect();\n    var left = rect.left, top = rect.top, width = rect.width, height = rect.height;\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\nfunction passTargets(beforeTargets, afterTargets, continueSelectWithoutDeselect) {\n    var _a = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__.diff)(beforeTargets, afterTargets), list = _a.list, prevList = _a.prevList, added = _a.added, removed = _a.removed, maintained = _a.maintained;\n    return __spreadArray(__spreadArray(__spreadArray([], added.map(function (index) { return list[index]; }), true), removed.map(function (index) { return prevList[index]; }), true), continueSelectWithoutDeselect ? maintained.map(function (_a) {\n        var nextIndex = _a[1];\n        return list[nextIndex];\n    }) : [], true);\n}\nfunction getLineSize(points) {\n    var size = 0;\n    var length = points.length;\n    for (var i = 1; i < length; ++i) {\n        size = Math.max((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDist)(points[i], points[i - 1]), size);\n    }\n    return size;\n}\n\nvar injector = (0,css_styled__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\"\\n:host {\\n    position: fixed;\\n    display: none;\\n    border: 1px solid #4af;\\n    background: rgba(68, 170, 255, 0.5);\\n    pointer-events: none;\\n    will-change: transform;\\n    z-index: 100;\\n}\\n\");\n/**\n * @memberof Selecto\n */\nvar CLASS_NAME = \"selecto-selection \".concat(injector.className);\nvar PROPERTIES = [\n    \"className\",\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"continueSelectWithoutDeselect\",\n    \"toggleContinueSelect\",\n    \"toggleContinueSelectWithoutDeselect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n    \"preventDragFromInside\",\n    \"rootContainer\",\n    \"dragCondition\",\n    \"clickBySelectEnd\",\n    \"checkOverflow\",\n    \"innerScrollOptions\",\n];\n/**\n * @memberof Selecto\n */\nvar OPTIONS = __spreadArray([\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    \"preventClickEventOnDrag\",\n    \"preventClickEventOnDragStart\",\n    \"preventRightClick\"\n], PROPERTIES, true);\nvar OPTION_TYPES = {\n    className: String,\n    boundContainer: null,\n    portalContainer: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    toggleContinueSelectWithoutDeselect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n    preventDragFromInside: Boolean,\n    rootContainer: Object,\n    dragCondition: Function,\n    clickBySelectEnd: Boolean,\n    continueSelectWithoutDeselect: Boolean,\n    preventClickEventOnDragStart: Boolean,\n    preventClickEventOnDrag: Boolean,\n    checkOverflow: Boolean,\n    innerScrollOptions: Object,\n};\n/**\n * @memberof Selecto\n */\nvar EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n    \"innerScroll\",\n];\n/**\n * @memberof Selecto\n */\nvar METHODS = [\n    \"clickTarget\",\n    \"getSelectableElements\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n    \"checkScroll\",\n    \"selectTargetsByPoints\",\n    \"setSelectedTargetsByPoints\",\n];\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\nvar Selecto$1 = /*#__PURE__*/ (function (_super) {\n    __extends(Selecto, _super);\n    /**\n     *\n     */\n    function Selecto(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        _this.selectedTargets = [];\n        _this.dragScroll = new _scena_dragscroll__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        _this._onDragStart = function (e, clickedTarget) {\n            var data = e.data, clientX = e.clientX, clientY = e.clientY, inputEvent = e.inputEvent;\n            var _a = _this.options, selectFromInside = _a.selectFromInside, selectByClick = _a.selectByClick, rootContainer = _a.rootContainer, boundContainer = _a.boundContainer, _b = _a.preventDragFromInside, preventDragFromInside = _b === void 0 ? true : _b, clickBySelectEnd = _a.clickBySelectEnd, dragCondition = _a.dragCondition;\n            if (dragCondition && !dragCondition(e)) {\n                e.stop();\n                return;\n            }\n            data.data = {};\n            var win = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getWindow)(_this.container);\n            data.innerWidth = win.innerWidth;\n            data.innerHeight = win.innerHeight;\n            _this.findSelectableTargets(data);\n            data.startSelectedTargets = _this.selectedTargets;\n            data.scaleMatrix = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.createMatrix)();\n            data.containerX = 0;\n            data.containerY = 0;\n            var container = _this.container;\n            var boundArea = {\n                left: -Infinity,\n                top: -Infinity,\n                right: Infinity,\n                bottom: Infinity,\n            };\n            if (rootContainer) {\n                var containerRect = _this.container.getBoundingClientRect();\n                data.containerX = containerRect.left;\n                data.containerY = containerRect.top;\n                data.scaleMatrix = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.getDistElementMatrix)(_this.container, rootContainer);\n            }\n            if (boundContainer) {\n                var boundInfo = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(boundContainer) && \"element\" in boundContainer\n                    ? __assign({ left: true, top: true, bottom: true, right: true }, boundContainer) : {\n                    element: boundContainer,\n                    left: true,\n                    top: true,\n                    bottom: true,\n                    right: true,\n                };\n                var boundElement = boundInfo.element;\n                var rectElement = void 0;\n                if (boundElement) {\n                    if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isString)(boundElement)) {\n                        rectElement = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(container).querySelector(boundElement);\n                    }\n                    else if (boundElement === true) {\n                        rectElement = _this.container;\n                    }\n                    else {\n                        rectElement = boundElement;\n                    }\n                    var rect = rectElement.getBoundingClientRect();\n                    if (boundInfo.left) {\n                        boundArea.left = rect.left;\n                    }\n                    if (boundInfo.top) {\n                        boundArea.top = rect.top;\n                    }\n                    if (boundInfo.right) {\n                        boundArea.right = rect.right;\n                    }\n                    if (boundInfo.bottom) {\n                        boundArea.bottom = rect.bottom;\n                    }\n                }\n            }\n            data.boundArea = boundArea;\n            var hitRect = {\n                left: clientX,\n                top: clientY,\n                right: clientX,\n                bottom: clientY,\n                width: 0,\n                height: 0,\n            };\n            var firstPassedTargets = [];\n            // allow click on select\n            var allowClickBySelectEnd = selectByClick && !clickBySelectEnd;\n            var hasInsideTargets = false;\n            if (!selectFromInside || allowClickBySelectEnd) {\n                var pointTarget = _this._findElement(clickedTarget || inputEvent.target, // elementFromPoint(clientX, clientY),\n                data.selectableTargets);\n                hasInsideTargets = !!pointTarget;\n                if (allowClickBySelectEnd) {\n                    firstPassedTargets = pointTarget ? [pointTarget] : [];\n                }\n            }\n            var isPreventSelect = !selectFromInside && hasInsideTargets;\n            // prevent drag from inside when selectByClick is false\n            if (isPreventSelect && !selectByClick) {\n                e.stop();\n                return false;\n            }\n            var type = inputEvent.type;\n            var isTrusted = type === \"mousedown\" || type === \"touchstart\";\n            /**\n             * When the drag starts (triggers on mousedown or touchstart), the dragStart event is called.\n             * Call the stop () function if you have a specific element or don't want to raise a select\n             * @memberof Selecto\n             * @event dragStart\n             * @param {OnDragStart} - Parameters for the dragStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"dragStart\", e => {\n             *   if (e.inputEvent.target.tagName === \"SPAN\") {\n             *     e.stop();\n             *   }\n             * }).on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            var result = !(e).isClick && isTrusted\n                ? _this.emit(\"dragStart\", __assign(__assign({}, e), { data: data.data }))\n                : true;\n            if (!result) {\n                e.stop();\n                return false;\n            }\n            if (_this.continueSelect) {\n                firstPassedTargets = passTargets(_this.selectedTargets, firstPassedTargets, _this.continueSelectWithoutDeselect);\n                data.startPassedTargets = _this.selectedTargets;\n            }\n            else {\n                data.startPassedTargets = [];\n            }\n            _this._select(firstPassedTargets, hitRect, e, true, isPreventSelect && selectByClick && !clickBySelectEnd && preventDragFromInside);\n            data.startX = clientX;\n            data.startY = clientY;\n            data.selectFlag = false;\n            data.preventDragFromInside = false;\n            if (inputEvent.target) {\n                var offsetPos = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.calculateMatrixDist)(data.scaleMatrix, [\n                    clientX - data.containerX,\n                    clientY - data.containerY,\n                ]);\n                _this.target.style.cssText += \"position: \".concat(rootContainer ? \"absolute\" : \"fixed\", \";\")\n                    + \"left:0px;top:0px;\"\n                    + \"transform: translate(\".concat(offsetPos[0], \"px, \").concat(offsetPos[1], \"px)\");\n            }\n            if (isPreventSelect && selectByClick && !clickBySelectEnd) {\n                inputEvent.preventDefault();\n                // prevent drag from inside when selectByClick is true and force call `selectEnd`\n                if (preventDragFromInside) {\n                    _this._selectEnd(data.startSelectedTargets, data.startPassedTargets, hitRect, e, true);\n                    data.preventDragFromInside = true;\n                }\n            }\n            else {\n                data.selectFlag = true;\n                // why?\n                // if (type === \"touchstart\") {\n                //     inputEvent.preventDefault();\n                // }\n                var _c = _this.options, scrollOptions = _c.scrollOptions, innerScrollOptions = _c.innerScrollOptions;\n                var isInnerScroll = false;\n                if (innerScrollOptions) {\n                    var inputEvent_1 = e.inputEvent;\n                    var target = inputEvent_1.target;\n                    var innerScrollElement = null;\n                    var parentElement = target;\n                    while (parentElement && parentElement !== (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(container).body) {\n                        var overflow = getComputedStyle(parentElement).overflow !== \"visible\";\n                        if (overflow) {\n                            innerScrollElement = parentElement;\n                            break;\n                        }\n                        parentElement = parentElement.parentElement;\n                    }\n                    if (innerScrollElement) {\n                        data.innerScrollOptions = __assign({ container: innerScrollElement, checkScrollEvent: true }, (innerScrollOptions === true ? {} : innerScrollOptions));\n                        _this.dragScroll.dragStart(e, data.innerScrollOptions);\n                        isInnerScroll = true;\n                    }\n                }\n                if (!isInnerScroll && scrollOptions && scrollOptions.container) {\n                    _this.dragScroll.dragStart(e, scrollOptions);\n                }\n                if (isPreventSelect && selectByClick && clickBySelectEnd) {\n                    data.selectFlag = false;\n                    e.preventDrag();\n                }\n            }\n            return true;\n        };\n        _this._onDrag = function (e) {\n            if (e.data.selectFlag) {\n                var scrollOptions = _this.scrollOptions;\n                var innerScrollOptions = e.data.innerScrollOptions;\n                var hasScrollOptions = innerScrollOptions || (scrollOptions === null || scrollOptions === void 0 ? void 0 : scrollOptions.container);\n                // If it is a scrolling position, pass drag\n                if (hasScrollOptions && !e.isScroll && _this.dragScroll.drag(e, innerScrollOptions || scrollOptions)) {\n                    return;\n                }\n            }\n            _this._checkSelected(e);\n        };\n        _this._onDragEnd = function (e) {\n            var data = e.data, inputEvent = e.inputEvent;\n            var rect = getRect(e, _this.options.ratio);\n            var selectFlag = data.selectFlag;\n            var container = _this.container;\n            /**\n             * When the drag ends (triggers on mouseup or touchend after drag), the dragEnd event is called.\n             * @memberof Selecto\n             * @event dragEnd\n             * @param {OnDragEnd} - Parameters for the dragEnd event\n             */\n            if (inputEvent) {\n                _this.emit(\"dragEnd\", __assign(__assign({ isDouble: !!e.isDouble, isClick: !!e.isClick, isDrag: false, isSelect: selectFlag }, e), { data: data.data, rect: rect }));\n            }\n            _this.target.style.cssText += \"display: none;\";\n            if (selectFlag) {\n                data.selectFlag = false;\n                _this.dragScroll.dragEnd();\n            }\n            else if (_this.selectByClick && _this.clickBySelectEnd) {\n                // only clickBySelectEnd\n                var pointTarget = _this._findElement((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.target) || elementFromPoint(container, e.clientX, e.clientY), data.selectableTargets);\n                _this._select(pointTarget ? [pointTarget] : [], rect, e);\n            }\n            if (!data.preventDragFromInside) {\n                _this._selectEnd(data.startSelectedTargets, data.startPassedTargets, rect, e);\n            }\n        };\n        _this._onKeyDown = function (e) {\n            var options = _this.options;\n            var isKeyDown = false;\n            if (!_this._keydownContinueSelect) {\n                var result = _this._sameCombiKey(e, options.toggleContinueSelect);\n                _this._keydownContinueSelect = result;\n                isKeyDown || (isKeyDown = result);\n            }\n            if (!_this._keydownContinueSelectWithoutDeselection) {\n                var result = _this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect);\n                _this._keydownContinueSelectWithoutDeselection = result;\n                isKeyDown || (isKeyDown = result);\n            }\n            if (!isKeyDown) {\n                return;\n            }\n            /**\n             * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n             * @memberof Selecto\n             * @event keydown\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   toggleContinueSelect: \"shift\";\n             *   keyContainer: window,\n             * });\n             *\n             * selecto.on(\"keydown\", () => {\n             *   document.querySelector(\".button\").classList.add(\"selected\");\n             * }).on(\"keyup\", () => {\n             *   document.querySelector(\".button\").classList.remove(\"selected\");\n             * }).on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            _this.emit(\"keydown\", {\n                keydownContinueSelect: _this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: _this._keydownContinueSelectWithoutDeselection,\n            });\n        };\n        _this._onKeyUp = function (e) {\n            var options = _this.options;\n            var isKeyUp = false;\n            if (_this._keydownContinueSelect) {\n                var result = _this._sameCombiKey(e, options.toggleContinueSelect, true);\n                _this._keydownContinueSelect = !result;\n                isKeyUp || (isKeyUp = result);\n            }\n            if (_this._keydownContinueSelectWithoutDeselection) {\n                var result = _this._sameCombiKey(e, options.toggleContinueSelectWithoutDeselect, true);\n                _this._keydownContinueSelectWithoutDeselection = !result;\n                isKeyUp || (isKeyUp = result);\n            }\n            if (!isKeyUp) {\n                return;\n            }\n            /**\n             * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n             * @memberof Selecto\n             * @event keyup\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   toggleContinueSelect: \"shift\";\n             *   keyContainer: window,\n             * });\n             *\n             * selecto.on(\"keydown\", () => {\n             *   document.querySelector(\".button\").classList.add(\"selected\");\n             * }).on(\"keyup\", () => {\n             *   document.querySelector(\".button\").classList.remove(\"selected\");\n             * }).on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            _this.emit(\"keyup\", {\n                keydownContinueSelect: _this._keydownContinueSelect,\n                keydownContinueSelectWithoutDeselection: _this._keydownContinueSelectWithoutDeselection,\n            });\n        };\n        _this._onBlur = function () {\n            if (_this._keydownContinueSelect || _this._keydownContinueSelectWithoutDeselection) {\n                _this._keydownContinueSelect = false;\n                _this._keydownContinueSelectWithoutDeselection = false;\n                _this.emit(\"keyup\", {\n                    keydownContinueSelect: _this._keydownContinueSelect,\n                    keydownContinueSelectWithoutDeselection: _this._keydownContinueSelectWithoutDeselection,\n                });\n            }\n        };\n        _this._onDocumentSelectStart = function (e) {\n            var doc = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(_this.container);\n            if (!_this.gesto.isFlag()) {\n                return;\n            }\n            var dragContainer = _this.dragContainer;\n            if (dragContainer === (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getWindow)(_this.container)) {\n                dragContainer = doc.documentElement;\n            }\n            var containers = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isNode)(dragContainer)\n                ? [dragContainer]\n                : [].slice.call(dragContainer);\n            var target = e.target;\n            containers.some(function (container) {\n                if (container === target || container.contains(target)) {\n                    e.preventDefault();\n                    return true;\n                }\n            });\n        };\n        _this.target = options.portalContainer;\n        var container = options.container;\n        _this.options = __assign({ className: \"\", portalContainer: null, container: null, dragContainer: null, selectableTargets: [], selectByClick: true, selectFromInside: true, clickBySelectEnd: false, hitRate: 100, continueSelect: false, continueSelectWithoutDeselect: false, toggleContinueSelect: null, toggleContinueSelectWithoutDeselect: null, keyContainer: null, scrollOptions: null, checkInput: false, preventDefault: false, boundContainer: false, preventDragFromInside: true, dragCondition: null, rootContainer: null, checkOverflow: false, innerScrollOptions: false, getElementRect: getDefaultElementRect, cspNonce: \"\", ratio: 0 }, options);\n        var portalContainer = _this.options.portalContainer;\n        if (portalContainer) {\n            container = portalContainer.parentElement;\n        }\n        _this.container = container || document.body;\n        _this.initElement();\n        _this.initDragScroll();\n        _this.setKeyController();\n        return _this;\n    }\n    /**\n     * You can set the currently selected targets.\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    Selecto.prototype.setSelectedTargets = function (selectedTargets) {\n        var beforeSelected = this.selectedTargets;\n        var _a = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__.diff)(beforeSelected, selectedTargets), added = _a.added, removed = _a.removed, prevList = _a.prevList, list = _a.list;\n        this.selectedTargets = selectedTargets;\n        return {\n            added: added.map(function (index) { return list[index]; }),\n            removed: removed.map(function (index) { return prevList[index]; }),\n            beforeSelected: beforeSelected,\n            selected: selectedTargets,\n        };\n    };\n    /**\n     * You can set the currently selected targets by points\n     * selectByClick, continueSelect, and continueSelectWithoutDeselect are not applied.\n     */\n    Selecto.prototype.setSelectedTargetsByPoints = function (point1, point2) {\n        var left = Math.min(point1[0], point2[0]);\n        var top = Math.min(point1[1], point2[1]);\n        var right = Math.max(point1[0], point2[0]);\n        var bottom = Math.max(point1[1], point2[1]);\n        var rect = {\n            left: left,\n            top: top,\n            right: right,\n            bottom: bottom,\n            width: right - left,\n            height: bottom - top,\n        };\n        var data = { ignoreClick: true };\n        this.findSelectableTargets(data);\n        var selectedElements = this.hitTest(rect, data, true, null);\n        var result = this.setSelectedTargets(selectedElements);\n        return __assign(__assign({}, result), { rect: rect });\n    };\n    /**\n     * Select target by virtual drag from startPoint to endPoint.\n     * The target of inputEvent is null.\n     */\n    Selecto.prototype.selectTargetsByPoints = function (startPoint, endPoint) {\n        var mousedown = new MouseEvent(\"mousedown\", {\n            clientX: startPoint[0],\n            clientY: startPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        var mousemove = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        var mouseup = new MouseEvent(\"mousemove\", {\n            clientX: endPoint[0],\n            clientY: endPoint[1],\n            cancelable: true,\n            bubbles: true,\n        });\n        var gesto = this.gesto;\n        var result = gesto.onDragStart(mousedown);\n        if (result !== false) {\n            gesto.onDrag(mousemove);\n            gesto.onDragEnd(mouseup);\n        }\n    };\n    /**\n     * You can get the currently selected targets.\n     */\n    Selecto.prototype.getSelectedTargets = function () {\n        return this.selectedTargets;\n    };\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    Selecto.prototype.triggerDragStart = function (e) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    };\n    /**\n     * Destroy elements, properties, and events.\n     */\n    Selecto.prototype.destroy = function () {\n        var _a;\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        this.dragScroll.dragEnd();\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.removeEvent)(document, \"selectstart\", this._onDocumentSelectStart);\n        if (!this.options.portalContainer) {\n            (_a = this.target.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.target);\n        }\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    };\n    Selecto.prototype.getElementPoints = function (target) {\n        var getElementRect = this.getElementRect || getDefaultElementRect;\n        var info = getElementRect(target);\n        var points = [info.pos1, info.pos2, info.pos4, info.pos3];\n        if (getElementRect !== getDefaultElementRect) {\n            var rect = target.getBoundingClientRect();\n            return (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.fitPoints)(points, rect);\n        }\n        return points;\n    };\n    /**\n     * Get all elements set in `selectableTargets`.\n     */\n    Selecto.prototype.getSelectableElements = function () {\n        var container = this.container;\n        var selectableElements = [];\n        this.options.selectableTargets.forEach(function (target) {\n            if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isFunction)(target)) {\n                var result = target();\n                if (result) {\n                    selectableElements.push.apply(selectableElements, [].slice.call(result));\n                }\n            }\n            else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isNode)(target)) {\n                selectableElements.push(target);\n            }\n            else if ((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isObject)(target)) {\n                selectableElements.push(target.value || target.current);\n            }\n            else {\n                var elements = [].slice.call(((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(container)).querySelectorAll(target));\n                selectableElements.push.apply(selectableElements, elements);\n            }\n        });\n        return selectableElements;\n    };\n    /**\n     * If scroll occurs during dragging, you can manually call this method to check the position again.\n     */\n    Selecto.prototype.checkScroll = function () {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        var scrollOptions = this.scrollOptions;\n        var innerScrollOptions = this.gesto.getEventData().innerScrollOptions;\n        var hasScrollOptions = innerScrollOptions || (scrollOptions === null || scrollOptions === void 0 ? void 0 : scrollOptions.container);\n        // If it is a scrolling position, pass drag\n        if (hasScrollOptions) {\n            this.dragScroll.checkScroll(__assign({ inputEvent: this.gesto.getCurrentEvent() }, (innerScrollOptions || scrollOptions)));\n        }\n    };\n    /**\n     * Find for selectableTargets again during drag event\n     * You can update selectable targets during an event.\n     */\n    Selecto.prototype.findSelectableTargets = function (data) {\n        var _this = this;\n        if (data === void 0) { data = this.gesto.getEventData(); }\n        var selectableTargets = this.getSelectableElements();\n        var selectablePoints = selectableTargets.map(function (target) { return _this.getElementPoints(target); });\n        data.selectableTargets = selectableTargets;\n        data.selectablePoints = selectablePoints;\n        data.selectableParentMap = null;\n        var options = this.options;\n        var hasIndexesMap = options.checkOverflow || options.innerScrollOptions;\n        var doc = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(this.container);\n        if (hasIndexesMap) {\n            var parentMap_1 = new Map();\n            data.selectableInnerScrollParentMap = parentMap_1;\n            data.selectableInnerScrollPathsList = selectableTargets.map(function (target, index) {\n                var parentElement = target.parentElement;\n                var parents = [];\n                var paths = [];\n                var _loop_1 = function () {\n                    var info = parentMap_1.get(parentElement);\n                    if (!info) {\n                        var overflow = getComputedStyle(parentElement).overflow !== \"visible\";\n                        if (overflow) {\n                            var rect = getDefaultElementRect(parentElement);\n                            info = {\n                                parentElement: parentElement,\n                                indexes: [],\n                                points: [rect.pos1, rect.pos2, rect.pos4, rect.pos3],\n                                paths: __spreadArray([], paths, true),\n                            };\n                            parents.push(parentElement);\n                            parents.forEach(function (prevParentElement) {\n                                parentMap_1.set(prevParentElement, info);\n                            });\n                            parents = [];\n                        }\n                    }\n                    if (info) {\n                        parentElement = info.parentElement;\n                        parentMap_1.get(parentElement).indexes.push(index);\n                        paths.push(parentElement);\n                    }\n                    else {\n                        parents.push(parentElement);\n                    }\n                    parentElement = parentElement.parentElement;\n                };\n                while (parentElement && parentElement !== doc.body) {\n                    _loop_1();\n                }\n                return paths;\n            });\n        }\n        if (!options.checkOverflow) {\n            data.selectableInners = selectableTargets.map(function () { return true; });\n        }\n        this._refreshGroups(data);\n        return selectableTargets;\n    };\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    Selecto.prototype.clickTarget = function (e, clickedTarget) {\n        var _a = getClient(e), clientX = _a.clientX, clientY = _a.clientY;\n        var dragEvent = {\n            data: {\n                selectFlag: false,\n            },\n            clientX: clientX,\n            clientY: clientY,\n            inputEvent: e,\n            isClick: true,\n            isTrusted: false,\n            stop: function () {\n                return false;\n            },\n        };\n        if (this._onDragStart(dragEvent, clickedTarget)) {\n            this._onDragEnd(dragEvent);\n        }\n        return this;\n    };\n    Selecto.prototype.setKeyController = function () {\n        var _a = this.options, keyContainer = _a.keyContainer, toggleContinueSelect = _a.toggleContinueSelect, toggleContinueSelectWithoutDeselect = _a.toggleContinueSelectWithoutDeselect;\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect || toggleContinueSelectWithoutDeselect) {\n            this.keycon = new keycon__WEBPACK_IMPORTED_MODULE_6__[\"default\"](keyContainer || (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getWindow)(this.container));\n            this.keycon\n                .keydown(this._onKeyDown)\n                .keyup(this._onKeyUp)\n                .on(\"blur\", this._onBlur);\n        }\n    };\n    Selecto.prototype.setClassName = function (nextClassName) {\n        this.options.className = nextClassName;\n        this.target.setAttribute(\"class\", \"\".concat(CLASS_NAME, \" \").concat(nextClassName || \"\"));\n    };\n    Selecto.prototype.setKeyEvent = function () {\n        var _a = this.options, toggleContinueSelect = _a.toggleContinueSelect, toggleContinueSelectWithoutDeselect = _a.toggleContinueSelectWithoutDeselect;\n        if ((!toggleContinueSelect && !toggleContinueSelectWithoutDeselect) || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    };\n    // with getter, setter property\n    Selecto.prototype.setKeyContainer = function (keyContainer) {\n        var _this = this;\n        var options = this.options;\n        diffValue(options.keyContainer, keyContainer, function () {\n            options.keyContainer = keyContainer;\n            _this.setKeyController();\n        });\n    };\n    Selecto.prototype.getContinueSelect = function () {\n        var _a = this.options, continueSelect = _a.continueSelect, toggleContinueSelect = _a.toggleContinueSelect;\n        if (!toggleContinueSelect || !this._keydownContinueSelect) {\n            return continueSelect;\n        }\n        return !continueSelect;\n    };\n    Selecto.prototype.getContinueSelectWithoutDeselect = function () {\n        var _a = this.options, continueSelectWithoutDeselect = _a.continueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect = _a.toggleContinueSelectWithoutDeselect;\n        if (!toggleContinueSelectWithoutDeselect || !this._keydownContinueSelectWithoutDeselection) {\n            return continueSelectWithoutDeselect;\n        }\n        return !continueSelectWithoutDeselect;\n    };\n    Selecto.prototype.setToggleContinueSelect = function (toggleContinueSelect) {\n        var _this = this;\n        var options = this.options;\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, function () {\n            options.toggleContinueSelect = toggleContinueSelect;\n            _this.setKeyEvent();\n        });\n    };\n    Selecto.prototype.setToggleContinueSelectWithoutDeselect = function (toggleContinueSelectWithoutDeselect) {\n        var _this = this;\n        var options = this.options;\n        diffValue(options.toggleContinueSelectWithoutDeselect, toggleContinueSelectWithoutDeselect, function () {\n            options.toggleContinueSelectWithoutDeselect = toggleContinueSelectWithoutDeselect;\n            _this.setKeyEvent();\n        });\n    };\n    Selecto.prototype.setPreventDefault = function (value) {\n        this.gesto.options.preventDefault = value;\n    };\n    Selecto.prototype.setCheckInput = function (value) {\n        this.gesto.options.checkInput = value;\n    };\n    Selecto.prototype.initElement = function () {\n        var _a = this.options, dragContainer = _a.dragContainer, checkInput = _a.checkInput, preventDefault = _a.preventDefault, preventClickEventOnDragStart = _a.preventClickEventOnDragStart, preventClickEventOnDrag = _a.preventClickEventOnDrag, preventClickEventByCondition = _a.preventClickEventByCondition, _b = _a.preventRightClick, preventRightClick = _b === void 0 ? true : _b, className = _a.className;\n        var container = this.container;\n        this.target = createElement((h(\"div\", { className: \"\".concat(CLASS_NAME, \" \").concat(className || \"\") })), this.target, container);\n        var target = this.target;\n        this.dragContainer =\n            typeof dragContainer === \"string\"\n                ? [].slice.call((0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getDocument)(container).querySelectorAll(dragContainer))\n                : dragContainer || this.target.parentNode;\n        this.gesto = new gesto__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this.dragContainer, {\n            checkWindowBlur: true,\n            container: (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.getWindow)(container),\n            checkInput: checkInput,\n            preventDefault: preventDefault,\n            preventClickEventOnDragStart: preventClickEventOnDragStart,\n            preventClickEventOnDrag: preventClickEventOnDrag,\n            preventClickEventByCondition: preventClickEventByCondition,\n            preventRightClick: preventRightClick,\n        }).on({\n            dragStart: this._onDragStart,\n            drag: this._onDrag,\n            dragEnd: this._onDragEnd,\n        });\n        (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.addEvent)(document, \"selectstart\", this._onDocumentSelectStart);\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    };\n    Selecto.prototype.hitTest = function (selectRect, data, isDrag, gestoEvent) {\n        var _a = this.options, hitRate = _a.hitRate, selectByClick = _a.selectByClick;\n        var left = selectRect.left, top = selectRect.top, right = selectRect.right, bottom = selectRect.bottom;\n        var innerGroups = data.innerGroups;\n        var innerWidth = data.innerWidth;\n        var innerHeight = data.innerHeight;\n        var clientX = gestoEvent === null || gestoEvent === void 0 ? void 0 : gestoEvent.clientX;\n        var clientY = gestoEvent === null || gestoEvent === void 0 ? void 0 : gestoEvent.clientY;\n        var ignoreClick = data.ignoreClick;\n        var rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        var isHit = function (points, el) {\n            var hitRateValue = typeof hitRate === \"function\"\n                ? (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.splitUnit)(\"\".concat(hitRate(el)))\n                : (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.splitUnit)(\"\".concat(hitRate));\n            var inArea = ignoreClick\n                ? false\n                : (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.isInside)([clientX, clientY], points);\n            if (!isDrag && selectByClick && inArea) {\n                return true;\n            }\n            var overlapPoints = (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.getOverlapPoints)(rectPoints, points);\n            if (!overlapPoints.length) {\n                return false;\n            }\n            var overlapSize = (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.getAreaSize)(overlapPoints);\n            // Line\n            var targetSize = 0;\n            if (overlapSize === 0 && (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.getAreaSize)(points) === 0) {\n                targetSize = getLineSize(points);\n                overlapSize = getLineSize(overlapPoints);\n            }\n            else {\n                targetSize = (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.getAreaSize)(points);\n            }\n            if (hitRateValue.unit === \"px\") {\n                return overlapSize >= hitRateValue.value;\n            }\n            else {\n                var rate = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.between)(Math.round((overlapSize / targetSize) * 100), 0, 100);\n                return rate >= Math.min(100, hitRateValue.value);\n            }\n        };\n        var selectableTargets = data.selectableTargets;\n        var selectablePoints = data.selectablePoints;\n        var selectableInners = data.selectableInners;\n        if (!innerGroups) {\n            return selectableTargets.filter(function (_, i) {\n                if (!selectableInners[i]) {\n                    return false;\n                }\n                return isHit(selectablePoints[i], selectableTargets[i]);\n            });\n        }\n        var selectedTargets = [];\n        var minX = Math.floor(left / innerWidth);\n        var maxX = Math.floor(right / innerWidth);\n        var minY = Math.floor(top / innerHeight);\n        var maxY = Math.floor(bottom / innerHeight);\n        for (var x = minX; x <= maxX; ++x) {\n            var yGroups = innerGroups[x];\n            if (!yGroups) {\n                continue;\n            }\n            for (var y = minY; y <= maxY; ++y) {\n                var group = yGroups[y];\n                if (!group) {\n                    continue;\n                }\n                group.forEach(function (index) {\n                    var points = selectablePoints[index];\n                    var inner = selectableInners[index];\n                    var target = selectableTargets[index];\n                    if (inner && isHit(points, target)) {\n                        selectedTargets.push(target);\n                    }\n                });\n            }\n        }\n        return filterDuplicated(selectedTargets);\n    };\n    Selecto.prototype.initDragScroll = function () {\n        var _this = this;\n        this.dragScroll\n            .on(\"scrollDrag\", function (_a) {\n            var next = _a.next;\n            next(_this.gesto.getCurrentEvent());\n        })\n            .on(\"scroll\", function (_a) {\n            var container = _a.container, direction = _a.direction;\n            var innerScrollOptions = _this.gesto.getEventData().innerScrollOptions;\n            if (innerScrollOptions) {\n                _this.emit(\"innerScroll\", {\n                    container: container,\n                    direction: direction,\n                });\n            }\n            else {\n                _this.emit(\"scroll\", {\n                    container: container,\n                    direction: direction,\n                });\n            }\n        })\n            .on(\"move\", function (_a) {\n            var offsetX = _a.offsetX, offsetY = _a.offsetY, inputEvent = _a.inputEvent;\n            var gesto = _this.gesto;\n            if (!gesto || !gesto.isFlag()) {\n                return;\n            }\n            var data = _this.gesto.getEventData();\n            var boundArea = data.boundArea;\n            data.startX -= offsetX;\n            data.startY -= offsetY;\n            var innerScrollOptions = _this.gesto.getEventData().innerScrollOptions;\n            var container = innerScrollOptions === null || innerScrollOptions === void 0 ? void 0 : innerScrollOptions.container;\n            var isMoveInnerScroll = false;\n            if (container) {\n                var parentMap_2 = data.selectableInnerScrollParentMap;\n                var parentInfo = parentMap_2.get(container);\n                if (parentInfo) {\n                    parentInfo.paths.forEach(function (scrollContainer) {\n                        var containerInfo = parentMap_2.get(scrollContainer);\n                        containerInfo.points.forEach(function (pos) {\n                            pos[0] -= offsetX;\n                            pos[1] -= offsetY;\n                        });\n                    });\n                    parentInfo.indexes.forEach(function (index) {\n                        data.selectablePoints[index].forEach(function (pos) {\n                            pos[0] -= offsetX;\n                            pos[1] -= offsetY;\n                        });\n                    });\n                    isMoveInnerScroll = true;\n                }\n            }\n            if (!isMoveInnerScroll) {\n                data.selectablePoints.forEach(function (points) {\n                    points.forEach(function (pos) {\n                        pos[0] -= offsetX;\n                        pos[1] -= offsetY;\n                    });\n                });\n            }\n            _this._refreshGroups(data);\n            boundArea.left -= offsetX;\n            boundArea.right -= offsetX;\n            boundArea.top -= offsetY;\n            boundArea.bottom -= offsetY;\n            _this.gesto.scrollBy(offsetX, offsetY, inputEvent.inputEvent);\n            _this._checkSelected(_this.gesto.getCurrentEvent());\n        });\n    };\n    Selecto.prototype._select = function (selectedTargets, rect, e, isStart, isDragStartEnd) {\n        if (isDragStartEnd === void 0) { isDragStartEnd = false; }\n        var inputEvent = e.inputEvent;\n        var data = e.data;\n        var result = this.setSelectedTargets(selectedTargets);\n        var _a = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__.diff)(data.startSelectedTargets, selectedTargets), added = _a.added, removed = _a.removed, prevList = _a.prevList, list = _a.list;\n        var startResult = {\n            startSelected: prevList,\n            startAdded: added.map(function (i) { return list[i]; }),\n            startRemoved: removed.map(function (i) { return prevList[i]; }),\n        };\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"selectStart\", __assign(__assign(__assign({}, result), startResult), { rect: rect, inputEvent: inputEvent, data: data.data, isTrusted: e.isTrusted, isDragStartEnd: isDragStartEnd }));\n        }\n        if (result.added.length || result.removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.emit(\"select\", __assign(__assign(__assign({}, result), startResult), { rect: rect, inputEvent: inputEvent, data: data.data, isTrusted: e.isTrusted, isDragStartEnd: isDragStartEnd }));\n        }\n    };\n    Selecto.prototype._selectEnd = function (startSelectedTargets, startPassedTargets, rect, e, isDragStartEnd) {\n        if (isDragStartEnd === void 0) { isDragStartEnd = false; }\n        var inputEvent = e.inputEvent, isDouble = e.isDouble, data = e.data;\n        var type = inputEvent && inputEvent.type;\n        var isDragStart = type === \"mousedown\" || type === \"touchstart\";\n        var _a = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__.diff)(startSelectedTargets, this.selectedTargets), added = _a.added, removed = _a.removed, prevList = _a.prevList, list = _a.list;\n        var _b = (0,_egjs_children_differ__WEBPACK_IMPORTED_MODULE_1__.diff)(startPassedTargets, this.selectedTargets), afterAdded = _b.added, afterRemoved = _b.removed, afterPrevList = _b.prevList, afterList = _b.list;\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.emit(\"selectEnd\", {\n            startSelected: startSelectedTargets,\n            beforeSelected: startPassedTargets,\n            selected: this.selectedTargets,\n            added: added.map(function (index) { return list[index]; }),\n            removed: removed.map(function (index) { return prevList[index]; }),\n            afterAdded: afterAdded.map(function (index) { return afterList[index]; }),\n            afterRemoved: afterRemoved.map(function (index) { return afterPrevList[index]; }),\n            isDragStart: isDragStart && isDragStartEnd,\n            isDragStartEnd: isDragStart && isDragStartEnd,\n            isClick: !!e.isClick,\n            isDouble: !!isDouble,\n            rect: rect,\n            inputEvent: inputEvent,\n            data: data.data,\n            isTrusted: e.isTrusted,\n        });\n    };\n    Selecto.prototype._checkSelected = function (e, rect) {\n        if (rect === void 0) { rect = getRect(e, this.options.ratio); }\n        var data = e.data;\n        var top = rect.top, left = rect.left, width = rect.width, height = rect.height;\n        var selectFlag = data.selectFlag;\n        var containerX = data.containerX, containerY = data.containerY, scaleMatrix = data.scaleMatrix;\n        var offsetPos = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.calculateMatrixDist)(scaleMatrix, [\n            left - containerX,\n            top - containerY,\n        ]);\n        var offsetSize = (0,css_to_mat__WEBPACK_IMPORTED_MODULE_4__.calculateMatrixDist)(scaleMatrix, [\n            width,\n            height,\n        ]);\n        var selectedTargets = [];\n        if (selectFlag) {\n            this.target.style.cssText +=\n                \"display: block;\" +\n                    \"left:0px;top:0px;\" +\n                    \"transform: translate(\".concat(offsetPos[0], \"px, \").concat(offsetPos[1], \"px);\") +\n                    \"width:\".concat(offsetSize[0], \"px;height:\").concat(offsetSize[1], \"px;\");\n            var passedTargets = this.hitTest(rect, data, true, e);\n            selectedTargets = passTargets(data.startPassedTargets, passedTargets, this.continueSelect && this.continueSelectWithoutDeselect);\n        }\n        /**\n         * When the drag, the drag event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event drag\n         * @param {OnDrag} - Parameters for the drag event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"drag\", e => {\n         *   e.stop();\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        var result = this.emit(\"drag\", __assign(__assign({}, e), { data: data.data, isSelect: selectFlag, rect: rect }));\n        if (result === false) {\n            this.target.style.cssText += \"display: none;\";\n            e.stop();\n            return;\n        }\n        if (selectFlag) {\n            this._select(selectedTargets, rect, e);\n        }\n    };\n    Selecto.prototype._sameCombiKey = function (e, keys, isKeyup) {\n        if (!keys) {\n            return false;\n        }\n        var combi = (0,keycon__WEBPACK_IMPORTED_MODULE_6__.getCombi)(e.inputEvent, e.key);\n        var nextKeys = [].concat(keys);\n        var toggleKeys = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.isArray)(nextKeys[0]) ? nextKeys : [nextKeys];\n        if (isKeyup) {\n            var singleKey_1 = e.key;\n            return toggleKeys.some(function (keys) {\n                return keys.some(function (key) { return key === singleKey_1; });\n            });\n        }\n        return toggleKeys.some(function (keys) {\n            return keys.every(function (key) { return combi.indexOf(key) > -1; });\n        });\n    };\n    Selecto.prototype._findElement = function (clickedTarget, selectableTargets) {\n        var pointTarget = clickedTarget;\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        return pointTarget;\n    };\n    Selecto.prototype._refreshGroups = function (data) {\n        var _a;\n        var innerWidth = data.innerWidth;\n        var innerHeight = data.innerHeight;\n        var selectablePoints = data.selectablePoints;\n        if (this.options.checkOverflow) {\n            var innerScrollContainer_1 = (_a = this.gesto.getEventData().innerScrollOptions) === null || _a === void 0 ? void 0 : _a.container;\n            var parentMap_3 = data.selectableInnerScrollParentMap;\n            var innerScrollPathsList = data.selectableInnerScrollPathsList;\n            data.selectableInners = innerScrollPathsList.map(function (innerScrollPaths, i) {\n                var isAlwaysTrue = false;\n                return innerScrollPaths.every(function (target) {\n                    if (isAlwaysTrue) {\n                        return true;\n                    }\n                    if (target === innerScrollContainer_1) {\n                        isAlwaysTrue = true;\n                        return true;\n                    }\n                    var rect = parentMap_3.get(target);\n                    if (rect) {\n                        var points1 = selectablePoints[i];\n                        var points2 = rect.points;\n                        var overlapPoints = (0,overlap_area__WEBPACK_IMPORTED_MODULE_5__.getOverlapPoints)(points1, points2);\n                        if (!overlapPoints.length) {\n                            return false;\n                        }\n                    }\n                    return true;\n                });\n            });\n        }\n        if (!innerWidth || !innerHeight) {\n            data.innerGroups = null;\n        }\n        else {\n            var selectablePoints_1 = data.selectablePoints;\n            var groups_1 = {};\n            selectablePoints_1.forEach(function (points, i) {\n                var minX = Infinity;\n                var maxX = -Infinity;\n                var minY = Infinity;\n                var maxY = -Infinity;\n                points.forEach(function (pos) {\n                    var x = Math.floor(pos[0] / innerWidth);\n                    var y = Math.floor(pos[1] / innerHeight);\n                    minX = Math.min(x, minX);\n                    maxX = Math.max(x, maxX);\n                    minY = Math.min(y, minY);\n                    maxY = Math.max(y, maxY);\n                });\n                for (var x = minX; x <= maxX; ++x) {\n                    for (var y = minY; y <= maxY; ++y) {\n                        groups_1[x] = groups_1[x] || {};\n                        groups_1[x][y] = groups_1[x][y] || [];\n                        groups_1[x][y].push(i);\n                    }\n                }\n            });\n            data.innerGroups = groups_1;\n        }\n    };\n    Selecto = __decorate([\n        (0,framework_utils__WEBPACK_IMPORTED_MODULE_8__.Properties)(PROPERTIES, function (prototype, property) {\n            var attributes = {\n                enumerable: true,\n                configurable: true,\n                get: function () {\n                    return this.options[property];\n                },\n            };\n            var getter = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.camelize)(\"get \".concat(property));\n            if (prototype[getter]) {\n                attributes.get = function () {\n                    return this[getter]();\n                };\n            }\n            else {\n                attributes.get = function () {\n                    return this.options[property];\n                };\n            }\n            var setter = (0,_daybrush_utils__WEBPACK_IMPORTED_MODULE_0__.camelize)(\"set \".concat(property));\n            if (prototype[setter]) {\n                attributes.set = function (value) {\n                    this[setter](value);\n                };\n            }\n            else {\n                attributes.set = function (value) {\n                    this.options[property] = value;\n                };\n            }\n            Object.defineProperty(prototype, property, attributes);\n        })\n    ], Selecto);\n    return Selecto;\n}(_scena_event_emitter__WEBPACK_IMPORTED_MODULE_9__[\"default\"]));\n\nvar Selecto = /*#__PURE__*/ (function (_super) {\n    __extends(Selecto, _super);\n    function Selecto() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return Selecto;\n}(Selecto$1));\n\n\n//# sourceMappingURL=selecto.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@interactify/selection/dist/selecto.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@interactify/infinite-viewer/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@interactify/infinite-viewer/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLASS_NAME: () => (/* binding */ qe),\n/* harmony export */   EVENTS: () => (/* binding */ Ge),\n/* harmony export */   METHODS: () => (/* binding */ wn),\n/* harmony export */   OPTIONS: () => (/* binding */ vn),\n/* harmony export */   PROPERTIES: () => (/* binding */ Gt),\n/* harmony export */   \"default\": () => (/* binding */ Cn)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar Tr = Object.defineProperty;\nvar zr = (i, n, t) => n in i ? Tr(i, n, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[n] = t;\nvar _ = (i, n, t) => zr(i, typeof n != \"symbol\" ? n + \"\" : n, t);\n\n\nvar Lt = { exports: {} }, ht = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar pe;\nfunction Dr() {\n  if (pe) return ht;\n  pe = 1;\n  var i = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, e = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, o = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function a(l, h, u) {\n    var d, v = {}, c = null, m = null;\n    u !== void 0 && (c = \"\" + u), h.key !== void 0 && (c = \"\" + h.key), h.ref !== void 0 && (m = h.ref);\n    for (d in h) r.call(h, d) && !o.hasOwnProperty(d) && (v[d] = h[d]);\n    if (l && l.defaultProps) for (d in h = l.defaultProps, h) v[d] === void 0 && (v[d] = h[d]);\n    return { $$typeof: n, type: l, key: c, ref: m, props: v, _owner: e.current };\n  }\n  return ht.Fragment = t, ht.jsx = a, ht.jsxs = a, ht;\n}\nvar ft = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar ge;\nfunction Yr() {\n  return ge || (ge = 1,  true && function() {\n    var i = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), e = Symbol.for(\"react.strict_mode\"), o = Symbol.for(\"react.profiler\"), a = Symbol.for(\"react.provider\"), l = Symbol.for(\"react.context\"), h = Symbol.for(\"react.forward_ref\"), u = Symbol.for(\"react.suspense\"), d = Symbol.for(\"react.suspense_list\"), v = Symbol.for(\"react.memo\"), c = Symbol.for(\"react.lazy\"), m = Symbol.for(\"react.offscreen\"), p = Symbol.iterator, S = \"@@iterator\";\n    function T(s) {\n      if (s === null || typeof s != \"object\")\n        return null;\n      var f = p && s[p] || s[S];\n      return typeof f == \"function\" ? f : null;\n    }\n    var z = i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function b(s) {\n      {\n        for (var f = arguments.length, g = new Array(f > 1 ? f - 1 : 0), E = 1; E < f; E++)\n          g[E - 1] = arguments[E];\n        W(\"error\", s, g);\n      }\n    }\n    function W(s, f, g) {\n      {\n        var E = z.ReactDebugCurrentFrame, R = E.getStackAddendum();\n        R !== \"\" && (f += \"%s\", g = g.concat([R]));\n        var D = g.map(function(y) {\n          return String(y);\n        });\n        D.unshift(\"Warning: \" + f), Function.prototype.apply.call(console[s], console, D);\n      }\n    }\n    var k = !1, H = !1, V = !1, C = !1, P = !1, L;\n    L = Symbol.for(\"react.module.reference\");\n    function q(s) {\n      return !!(typeof s == \"string\" || typeof s == \"function\" || s === r || s === o || P || s === e || s === u || s === d || C || s === m || k || H || V || typeof s == \"object\" && s !== null && (s.$$typeof === c || s.$$typeof === v || s.$$typeof === a || s.$$typeof === l || s.$$typeof === h || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      s.$$typeof === L || s.getModuleId !== void 0));\n    }\n    function Z(s, f, g) {\n      var E = s.displayName;\n      if (E)\n        return E;\n      var R = f.displayName || f.name || \"\";\n      return R !== \"\" ? g + \"(\" + R + \")\" : g;\n    }\n    function F(s) {\n      return s.displayName || \"Context\";\n    }\n    function x(s) {\n      if (s == null)\n        return null;\n      if (typeof s.tag == \"number\" && b(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof s == \"function\")\n        return s.displayName || s.name || null;\n      if (typeof s == \"string\")\n        return s;\n      switch (s) {\n        case r:\n          return \"Fragment\";\n        case t:\n          return \"Portal\";\n        case o:\n          return \"Profiler\";\n        case e:\n          return \"StrictMode\";\n        case u:\n          return \"Suspense\";\n        case d:\n          return \"SuspenseList\";\n      }\n      if (typeof s == \"object\")\n        switch (s.$$typeof) {\n          case l:\n            var f = s;\n            return F(f) + \".Consumer\";\n          case a:\n            var g = s;\n            return F(g._context) + \".Provider\";\n          case h:\n            return Z(s, s.render, \"ForwardRef\");\n          case v:\n            var E = s.displayName || null;\n            return E !== null ? E : x(s.type) || \"Memo\";\n          case c: {\n            var R = s, D = R._payload, y = R._init;\n            try {\n              return x(y(D));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var B = Object.assign, K = 0, at, mt, _t, lt, Kt, Jt, Qt;\n    function te() {\n    }\n    te.__reactDisabledLog = !0;\n    function Je() {\n      {\n        if (K === 0) {\n          at = console.log, mt = console.info, _t = console.warn, lt = console.error, Kt = console.group, Jt = console.groupCollapsed, Qt = console.groupEnd;\n          var s = {\n            configurable: !0,\n            enumerable: !0,\n            value: te,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: s,\n            log: s,\n            warn: s,\n            error: s,\n            group: s,\n            groupCollapsed: s,\n            groupEnd: s\n          });\n        }\n        K++;\n      }\n    }\n    function Qe() {\n      {\n        if (K--, K === 0) {\n          var s = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: B({}, s, {\n              value: at\n            }),\n            info: B({}, s, {\n              value: mt\n            }),\n            warn: B({}, s, {\n              value: _t\n            }),\n            error: B({}, s, {\n              value: lt\n            }),\n            group: B({}, s, {\n              value: Kt\n            }),\n            groupCollapsed: B({}, s, {\n              value: Jt\n            }),\n            groupEnd: B({}, s, {\n              value: Qt\n            })\n          });\n        }\n        K < 0 && b(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var zt = z.ReactCurrentDispatcher, Rt;\n    function St(s, f, g) {\n      {\n        if (Rt === void 0)\n          try {\n            throw Error();\n          } catch (R) {\n            var E = R.stack.trim().match(/\\n( *(at )?)/);\n            Rt = E && E[1] || \"\";\n          }\n        return `\n` + Rt + s;\n      }\n    }\n    var Dt = !1, Et;\n    {\n      var tr = typeof WeakMap == \"function\" ? WeakMap : Map;\n      Et = new tr();\n    }\n    function ee(s, f) {\n      if (!s || Dt)\n        return \"\";\n      {\n        var g = Et.get(s);\n        if (g !== void 0)\n          return g;\n      }\n      var E;\n      Dt = !0;\n      var R = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var D;\n      D = zt.current, zt.current = null, Je();\n      try {\n        if (f) {\n          var y = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(y.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(y, []);\n            } catch ($) {\n              E = $;\n            }\n            Reflect.construct(s, [], y);\n          } else {\n            try {\n              y.call();\n            } catch ($) {\n              E = $;\n            }\n            s.call(y.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch ($) {\n            E = $;\n          }\n          s();\n        }\n      } catch ($) {\n        if ($ && E && typeof $.stack == \"string\") {\n          for (var w = $.stack.split(`\n`), j = E.stack.split(`\n`), X = w.length - 1, A = j.length - 1; X >= 1 && A >= 0 && w[X] !== j[A]; )\n            A--;\n          for (; X >= 1 && A >= 0; X--, A--)\n            if (w[X] !== j[A]) {\n              if (X !== 1 || A !== 1)\n                do\n                  if (X--, A--, A < 0 || w[X] !== j[A]) {\n                    var N = `\n` + w[X].replace(\" at new \", \" at \");\n                    return s.displayName && N.includes(\"<anonymous>\") && (N = N.replace(\"<anonymous>\", s.displayName)), typeof s == \"function\" && Et.set(s, N), N;\n                  }\n                while (X >= 1 && A >= 0);\n              break;\n            }\n        }\n      } finally {\n        Dt = !1, zt.current = D, Qe(), Error.prepareStackTrace = R;\n      }\n      var nt = s ? s.displayName || s.name : \"\", J = nt ? St(nt) : \"\";\n      return typeof s == \"function\" && Et.set(s, J), J;\n    }\n    function er(s, f, g) {\n      return ee(s, !1);\n    }\n    function rr(s) {\n      var f = s.prototype;\n      return !!(f && f.isReactComponent);\n    }\n    function wt(s, f, g) {\n      if (s == null)\n        return \"\";\n      if (typeof s == \"function\")\n        return ee(s, rr(s));\n      if (typeof s == \"string\")\n        return St(s);\n      switch (s) {\n        case u:\n          return St(\"Suspense\");\n        case d:\n          return St(\"SuspenseList\");\n      }\n      if (typeof s == \"object\")\n        switch (s.$$typeof) {\n          case h:\n            return er(s.render);\n          case v:\n            return wt(s.type, f, g);\n          case c: {\n            var E = s, R = E._payload, D = E._init;\n            try {\n              return wt(D(R), f, g);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var ct = Object.prototype.hasOwnProperty, re = {}, ne = z.ReactDebugCurrentFrame;\n    function bt(s) {\n      if (s) {\n        var f = s._owner, g = wt(s.type, s._source, f ? f.type : null);\n        ne.setExtraStackFrame(g);\n      } else\n        ne.setExtraStackFrame(null);\n    }\n    function nr(s, f, g, E, R) {\n      {\n        var D = Function.call.bind(ct);\n        for (var y in s)\n          if (D(s, y)) {\n            var w = void 0;\n            try {\n              if (typeof s[y] != \"function\") {\n                var j = Error((E || \"React class\") + \": \" + g + \" type `\" + y + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof s[y] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw j.name = \"Invariant Violation\", j;\n              }\n              w = s[y](f, y, E, g, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (X) {\n              w = X;\n            }\n            w && !(w instanceof Error) && (bt(R), b(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", E || \"React class\", g, y, typeof w), bt(null)), w instanceof Error && !(w.message in re) && (re[w.message] = !0, bt(R), b(\"Failed %s type: %s\", g, w.message), bt(null));\n          }\n      }\n    }\n    var ir = Array.isArray;\n    function Yt(s) {\n      return ir(s);\n    }\n    function or(s) {\n      {\n        var f = typeof Symbol == \"function\" && Symbol.toStringTag, g = f && s[Symbol.toStringTag] || s.constructor.name || \"Object\";\n        return g;\n      }\n    }\n    function sr(s) {\n      try {\n        return ie(s), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function ie(s) {\n      return \"\" + s;\n    }\n    function oe(s) {\n      if (sr(s))\n        return b(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", or(s)), ie(s);\n    }\n    var ut = z.ReactCurrentOwner, ar = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, se, ae, xt;\n    xt = {};\n    function lr(s) {\n      if (ct.call(s, \"ref\")) {\n        var f = Object.getOwnPropertyDescriptor(s, \"ref\").get;\n        if (f && f.isReactWarning)\n          return !1;\n      }\n      return s.ref !== void 0;\n    }\n    function cr(s) {\n      if (ct.call(s, \"key\")) {\n        var f = Object.getOwnPropertyDescriptor(s, \"key\").get;\n        if (f && f.isReactWarning)\n          return !1;\n      }\n      return s.key !== void 0;\n    }\n    function ur(s, f) {\n      if (typeof s.ref == \"string\" && ut.current && f && ut.current.stateNode !== f) {\n        var g = x(ut.current.type);\n        xt[g] || (b('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', x(ut.current.type), s.ref), xt[g] = !0);\n      }\n    }\n    function hr(s, f) {\n      {\n        var g = function() {\n          se || (se = !0, b(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", f));\n        };\n        g.isReactWarning = !0, Object.defineProperty(s, \"key\", {\n          get: g,\n          configurable: !0\n        });\n      }\n    }\n    function fr(s, f) {\n      {\n        var g = function() {\n          ae || (ae = !0, b(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", f));\n        };\n        g.isReactWarning = !0, Object.defineProperty(s, \"ref\", {\n          get: g,\n          configurable: !0\n        });\n      }\n    }\n    var vr = function(s, f, g, E, R, D, y) {\n      var w = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: n,\n        // Built-in properties that belong on the element\n        type: s,\n        key: f,\n        ref: g,\n        props: y,\n        // Record the component responsible for creating this element.\n        _owner: D\n      };\n      return w._store = {}, Object.defineProperty(w._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(w, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: E\n      }), Object.defineProperty(w, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: R\n      }), Object.freeze && (Object.freeze(w.props), Object.freeze(w)), w;\n    };\n    function dr(s, f, g, E, R) {\n      {\n        var D, y = {}, w = null, j = null;\n        g !== void 0 && (oe(g), w = \"\" + g), cr(f) && (oe(f.key), w = \"\" + f.key), lr(f) && (j = f.ref, ur(f, R));\n        for (D in f)\n          ct.call(f, D) && !ar.hasOwnProperty(D) && (y[D] = f[D]);\n        if (s && s.defaultProps) {\n          var X = s.defaultProps;\n          for (D in X)\n            y[D] === void 0 && (y[D] = X[D]);\n        }\n        if (w || j) {\n          var A = typeof s == \"function\" ? s.displayName || s.name || \"Unknown\" : s;\n          w && hr(y, A), j && fr(y, A);\n        }\n        return vr(s, w, j, R, E, ut.current, y);\n      }\n    }\n    var Ot = z.ReactCurrentOwner, le = z.ReactDebugCurrentFrame;\n    function rt(s) {\n      if (s) {\n        var f = s._owner, g = wt(s.type, s._source, f ? f.type : null);\n        le.setExtraStackFrame(g);\n      } else\n        le.setExtraStackFrame(null);\n    }\n    var Xt;\n    Xt = !1;\n    function Pt(s) {\n      return typeof s == \"object\" && s !== null && s.$$typeof === n;\n    }\n    function ce() {\n      {\n        if (Ot.current) {\n          var s = x(Ot.current.type);\n          if (s)\n            return `\n\nCheck the render method of \\`` + s + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function pr(s) {\n      return \"\";\n    }\n    var ue = {};\n    function gr(s) {\n      {\n        var f = ce();\n        if (!f) {\n          var g = typeof s == \"string\" ? s : s.displayName || s.name;\n          g && (f = `\n\nCheck the top-level render call using <` + g + \">.\");\n        }\n        return f;\n      }\n    }\n    function he(s, f) {\n      {\n        if (!s._store || s._store.validated || s.key != null)\n          return;\n        s._store.validated = !0;\n        var g = gr(f);\n        if (ue[g])\n          return;\n        ue[g] = !0;\n        var E = \"\";\n        s && s._owner && s._owner !== Ot.current && (E = \" It was passed a child from \" + x(s._owner.type) + \".\"), rt(s), b('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', g, E), rt(null);\n      }\n    }\n    function fe(s, f) {\n      {\n        if (typeof s != \"object\")\n          return;\n        if (Yt(s))\n          for (var g = 0; g < s.length; g++) {\n            var E = s[g];\n            Pt(E) && he(E, f);\n          }\n        else if (Pt(s))\n          s._store && (s._store.validated = !0);\n        else if (s) {\n          var R = T(s);\n          if (typeof R == \"function\" && R !== s.entries)\n            for (var D = R.call(s), y; !(y = D.next()).done; )\n              Pt(y.value) && he(y.value, f);\n        }\n      }\n    }\n    function mr(s) {\n      {\n        var f = s.type;\n        if (f == null || typeof f == \"string\")\n          return;\n        var g;\n        if (typeof f == \"function\")\n          g = f.propTypes;\n        else if (typeof f == \"object\" && (f.$$typeof === h || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        f.$$typeof === v))\n          g = f.propTypes;\n        else\n          return;\n        if (g) {\n          var E = x(f);\n          nr(g, s.props, \"prop\", E, s);\n        } else if (f.PropTypes !== void 0 && !Xt) {\n          Xt = !0;\n          var R = x(f);\n          b(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", R || \"Unknown\");\n        }\n        typeof f.getDefaultProps == \"function\" && !f.getDefaultProps.isReactClassApproved && b(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function _r(s) {\n      {\n        for (var f = Object.keys(s.props), g = 0; g < f.length; g++) {\n          var E = f[g];\n          if (E !== \"children\" && E !== \"key\") {\n            rt(s), b(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", E), rt(null);\n            break;\n          }\n        }\n        s.ref !== null && (rt(s), b(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), rt(null));\n      }\n    }\n    var ve = {};\n    function de(s, f, g, E, R, D) {\n      {\n        var y = q(s);\n        if (!y) {\n          var w = \"\";\n          (s === void 0 || typeof s == \"object\" && s !== null && Object.keys(s).length === 0) && (w += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var j = pr();\n          j ? w += j : w += ce();\n          var X;\n          s === null ? X = \"null\" : Yt(s) ? X = \"array\" : s !== void 0 && s.$$typeof === n ? (X = \"<\" + (x(s.type) || \"Unknown\") + \" />\", w = \" Did you accidentally export a JSX literal instead of a component?\") : X = typeof s, b(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", X, w);\n        }\n        var A = dr(s, f, g, R, D);\n        if (A == null)\n          return A;\n        if (y) {\n          var N = f.children;\n          if (N !== void 0)\n            if (E)\n              if (Yt(N)) {\n                for (var nt = 0; nt < N.length; nt++)\n                  fe(N[nt], s);\n                Object.freeze && Object.freeze(N);\n              } else\n                b(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              fe(N, s);\n        }\n        if (ct.call(f, \"key\")) {\n          var J = x(s), $ = Object.keys(f).filter(function(Cr) {\n            return Cr !== \"key\";\n          }), At = $.length > 0 ? \"{key: someKey, \" + $.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          if (!ve[J + At]) {\n            var yr = $.length > 0 ? \"{\" + $.join(\": ..., \") + \": ...}\" : \"{}\";\n            b(`A props object containing a \"key\" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />`, At, J, yr, J), ve[J + At] = !0;\n          }\n        }\n        return s === r ? _r(A) : mr(A), A;\n      }\n    }\n    function Sr(s, f, g) {\n      return de(s, f, g, !0);\n    }\n    function Er(s, f, g) {\n      return de(s, f, g, !1);\n    }\n    var wr = Er, br = Sr;\n    ft.Fragment = r, ft.jsx = wr, ft.jsxs = br;\n  }()), ft;\n}\n false ? 0 : Lt.exports = Yr();\nvar Q = Lt.exports, xr = \"function\", Or = \"object\", Xr = \"string\", Pr = \"undefined\", Ar = typeof document !== Pr && document, Mr = [{\n  open: \"(\",\n  close: \")\"\n}, {\n  open: '\"',\n  close: '\"'\n}, {\n  open: \"'\",\n  close: \"'\"\n}, {\n  open: '\\\\\"',\n  close: '\\\\\"'\n}, {\n  open: \"\\\\'\",\n  close: \"\\\\'\"\n}], yt = {\n  cm: function(i) {\n    return i * 96 / 2.54;\n  },\n  mm: function(i) {\n    return i * 96 / 254;\n  },\n  in: function(i) {\n    return i * 96;\n  },\n  pt: function(i) {\n    return i * 96 / 72;\n  },\n  pc: function(i) {\n    return i * 96 / 6;\n  },\n  \"%\": function(i, n) {\n    return i * n / 100;\n  },\n  vw: function(i, n) {\n    return n === void 0 && (n = window.innerWidth), i / 100 * n;\n  },\n  vh: function(i, n) {\n    return n === void 0 && (n = window.innerHeight), i / 100 * n;\n  },\n  vmax: function(i, n) {\n    return n === void 0 && (n = Math.max(window.innerWidth, window.innerHeight)), i / 100 * n;\n  },\n  vmin: function(i, n) {\n    return n === void 0 && (n = Math.min(window.innerWidth, window.innerHeight)), i / 100 * n;\n  }\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction kr() {\n  for (var i = 0, n = 0, t = arguments.length; n < t; n++) i += arguments[n].length;\n  for (var r = Array(i), e = 0, n = 0; n < t; n++) for (var o = arguments[n], a = 0, l = o.length; a < l; a++, e++) r[e] = o[a];\n  return r;\n}\nfunction st(i) {\n  return i && typeof i === Or;\n}\nfunction vt(i) {\n  return Array.isArray(i);\n}\nfunction Oe(i) {\n  return typeof i === Xr;\n}\nfunction Wr(i) {\n  return typeof i === xr;\n}\nfunction Lr(i, n) {\n  var t = i === \"\" || i == \" \", r = n === \"\" || n == \" \";\n  return r && t || i === n;\n}\nfunction Xe(i, n, t, r, e) {\n  var o = Vt(i, n, t);\n  return o ? t : Fr(i, n, t + 1, r, e);\n}\nfunction Vt(i, n, t) {\n  if (!i.ignore)\n    return null;\n  var r = n.slice(Math.max(t - 3, 0), t + 3).join(\"\");\n  return new RegExp(i.ignore).exec(r);\n}\nfunction Fr(i, n, t, r, e) {\n  for (var o = function(u) {\n    var d = n[u].trim();\n    if (d === i.close && !Vt(i, n, u))\n      return {\n        value: u\n      };\n    var v = u, c = Ft(e, function(m) {\n      var p = m.open;\n      return p === d;\n    });\n    if (c && (v = Xe(c, n, u, r, e)), v === -1)\n      return a = u, \"break\";\n    u = v, a = u;\n  }, a, l = t; l < r; ++l) {\n    var h = o(l);\n    if (l = a, typeof h == \"object\") return h.value;\n    if (h === \"break\") break;\n  }\n  return -1;\n}\nfunction Pe(i, n) {\n  var t = Oe(n) ? {\n    separator: n\n  } : n, r = t.separator, e = r === void 0 ? \",\" : r, o = t.isSeparateFirst, a = t.isSeparateOnlyOpenClose, l = t.isSeparateOpenClose, h = l === void 0 ? a : l, u = t.openCloseCharacters, d = u === void 0 ? Mr : u, v = d.map(function(C) {\n    var P = C.open, L = C.close;\n    return P === L ? P : P + \"|\" + L;\n  }).join(\"|\"), c = \"(\\\\s*\" + e + \"\\\\s*|\" + v + \"|\\\\s+)\", m = new RegExp(c, \"g\"), p = i.split(m).filter(function(C) {\n    return C && C !== \"undefined\";\n  }), S = p.length, T = [], z = [];\n  function b() {\n    return z.length ? (T.push(z.join(\"\")), z = [], !0) : !1;\n  }\n  for (var W = function(C) {\n    var P = p[C].trim(), L = C, q = Ft(d, function(x) {\n      var B = x.open;\n      return B === P;\n    }), Z = Ft(d, function(x) {\n      var B = x.close;\n      return B === P;\n    });\n    if (q) {\n      if (L = Xe(q, p, C, S, d), L !== -1 && h)\n        return b() && o || (T.push(p.slice(C, L + 1).join(\"\")), C = L, o) ? (k = C, \"break\") : (k = C, \"continue\");\n    } else if (Z && !Vt(Z, p, C)) {\n      var F = kr(d);\n      return F.splice(d.indexOf(Z), 1), {\n        value: Pe(i, {\n          separator: e,\n          isSeparateFirst: o,\n          isSeparateOnlyOpenClose: a,\n          isSeparateOpenClose: h,\n          openCloseCharacters: F\n        })\n      };\n    } else if (Lr(P, e) && !a)\n      return b(), o ? (k = C, \"break\") : (k = C, \"continue\");\n    L === -1 && (L = S - 1), z.push(p.slice(C, L + 1).join(\"\")), C = L, k = C;\n  }, k, H = 0; H < S; ++H) {\n    var V = W(H);\n    if (H = k, typeof V == \"object\") return V.value;\n    if (V === \"break\") break;\n  }\n  return z.length && T.push(z.join(\"\")), T;\n}\nfunction jr(i) {\n  return Pe(i, \",\");\n}\nfunction Ir(i) {\n  var n = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(i);\n  if (!n)\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  var t = n[1], r = n[2], e = n[3];\n  return {\n    prefix: t,\n    unit: e,\n    value: parseFloat(r)\n  };\n}\nfunction Ae(i) {\n  return i.replace(/[\\s-_]+([^\\s-_])/g, function(n, t) {\n    return t.toUpperCase();\n  });\n}\nfunction me() {\n  return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();\n}\nfunction Me(i, n, t) {\n  t === void 0 && (t = -1);\n  for (var r = i.length, e = 0; e < r; ++e)\n    if (n(i[e], e, i))\n      return e;\n  return t;\n}\nfunction Ft(i, n, t) {\n  var r = Me(i, n);\n  return r > -1 ? i[r] : t;\n}\nfunction G(i, n) {\n  var t = Ir(i), r = t.value, e = t.unit;\n  if (st(n)) {\n    var o = n[e];\n    if (o) {\n      if (Wr(o))\n        return o(r);\n      if (yt[e])\n        return yt[e](r, o);\n    }\n  } else if (e === \"%\")\n    return r * n / 100;\n  return yt[e] ? yt[e](r) : r;\n}\nfunction tt(i, n, t) {\n  return Math.max(n, Math.min(i, t));\n}\nfunction $r(i, n) {\n  var t = 1 / n;\n  return Math.round(i / n) / t;\n}\nfunction it(i, n) {\n  i.classList ? i.classList.add(n) : i.className += \" \" + n;\n}\nfunction O(i, n, t, r) {\n  i.addEventListener(n, t, r);\n}\nfunction Y(i, n, t, r) {\n  i.removeEventListener(n, t, r);\n}\nfunction Nt(i) {\n  return (i == null ? void 0 : i.ownerDocument) || Ar;\n}\nfunction ot(i) {\n  var n;\n  return ((n = i == null ? void 0 : i.ownerDocument) === null || n === void 0 ? void 0 : n.defaultView) || window;\n}\nfunction Br(i) {\n  return i && \"postMessage\" in i && \"blur\" in i && \"self\" in i;\n}\nfunction _e(i) {\n  return st(i) && i.nodeName && i.nodeType && \"ownerDocument\" in i;\n}\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar jt = function() {\n  return jt = Object.assign || function(n) {\n    for (var t, r = 1, e = arguments.length; r < e; r++) {\n      t = arguments[r];\n      for (var o in t) Object.prototype.hasOwnProperty.call(t, o) && (n[o] = t[o]);\n    }\n    return n;\n  }, jt.apply(this, arguments);\n};\nfunction Hr() {\n  for (var i = 0, n = 0, t = arguments.length; n < t; n++) i += arguments[n].length;\n  for (var r = Array(i), e = 0, n = 0; n < t; n++) for (var o = arguments[n], a = 0, l = o.length; a < l; a++, e++) r[e] = o[a];\n  return r;\n}\nvar Zt = /* @__PURE__ */ function() {\n  function i() {\n    this._events = {};\n  }\n  var n = i.prototype;\n  return n.on = function(t, r) {\n    if (st(t))\n      for (var e in t)\n        this.on(e, t[e]);\n    else\n      this._addEvent(t, r, {});\n    return this;\n  }, n.off = function(t, r) {\n    if (!t)\n      this._events = {};\n    else if (st(t))\n      for (var e in t)\n        this.off(e);\n    else if (!r)\n      this._events[t] = [];\n    else {\n      var o = this._events[t];\n      if (o) {\n        var a = Me(o, function(l) {\n          return l.listener === r;\n        });\n        a > -1 && o.splice(a, 1);\n      }\n    }\n    return this;\n  }, n.once = function(t, r) {\n    var e = this;\n    return r && this._addEvent(t, r, {\n      once: !0\n    }), new Promise(function(o) {\n      e._addEvent(t, o, {\n        once: !0\n      });\n    });\n  }, n.emit = function(t, r) {\n    var e = this;\n    r === void 0 && (r = {});\n    var o = this._events[t];\n    if (!t || !o)\n      return !0;\n    var a = !1;\n    return r.eventType = t, r.stop = function() {\n      a = !0;\n    }, r.currentTarget = this, Hr(o).forEach(function(l) {\n      l.listener(r), l.once && e.off(t, l.listener);\n    }), !a;\n  }, n.trigger = function(t, r) {\n    return r === void 0 && (r = {}), this.emit(t, r);\n  }, n._addEvent = function(t, r, e) {\n    var o = this._events;\n    o[t] = o[t] || [];\n    var a = o[t];\n    a.push(jt({\n      listener: r\n    }, e));\n  }, i;\n}();\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar It = function(i, n) {\n  return It = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t, r) {\n    t.__proto__ = r;\n  } || function(t, r) {\n    for (var e in r) r.hasOwnProperty(e) && (t[e] = r[e]);\n  }, It(i, n);\n};\nfunction Vr(i, n) {\n  It(i, n);\n  function t() {\n    this.constructor = i;\n  }\n  i.prototype = n === null ? Object.create(n) : (t.prototype = n.prototype, new t());\n}\nvar M = function() {\n  return M = Object.assign || function(n) {\n    for (var t, r = 1, e = arguments.length; r < e; r++) {\n      t = arguments[r];\n      for (var o in t) Object.prototype.hasOwnProperty.call(t, o) && (n[o] = t[o]);\n    }\n    return n;\n  }, M.apply(this, arguments);\n};\nfunction Nr(i, n) {\n  var t = n[0] - i[0], r = n[1] - i[1], e = Math.atan2(r, t);\n  return e >= 0 ? e : e + Math.PI * 2;\n}\nfunction Mt(i) {\n  return Nr([\n    i[0].clientX,\n    i[0].clientY\n  ], [\n    i[1].clientX,\n    i[1].clientY\n  ]) / Math.PI * 180;\n}\nfunction Zr(i) {\n  return i.touches && i.touches.length >= 2;\n}\nfunction Ct(i) {\n  return i ? i.touches ? qr(i.touches) : [ke(i)] : [];\n}\nfunction Ur(i) {\n  return i && (i.type.indexOf(\"mouse\") > -1 || \"button\" in i);\n}\nfunction Se(i, n, t) {\n  var r = t.length, e = gt(i, r), o = e.clientX, a = e.clientY, l = e.originalClientX, h = e.originalClientY, u = gt(n, r), d = u.clientX, v = u.clientY, c = gt(t, r), m = c.clientX, p = c.clientY, S = o - d, T = a - v, z = o - m, b = a - p;\n  return {\n    clientX: l,\n    clientY: h,\n    deltaX: S,\n    deltaY: T,\n    distX: z,\n    distY: b\n  };\n}\nfunction kt(i) {\n  return Math.sqrt(Math.pow(i[0].clientX - i[1].clientX, 2) + Math.pow(i[0].clientY - i[1].clientY, 2));\n}\nfunction qr(i) {\n  for (var n = Math.min(i.length, 2), t = [], r = 0; r < n; ++r)\n    t.push(ke(i[r]));\n  return t;\n}\nfunction ke(i) {\n  return {\n    clientX: i.clientX,\n    clientY: i.clientY\n  };\n}\nfunction gt(i, n) {\n  n === void 0 && (n = i.length);\n  for (var t = {\n    clientX: 0,\n    clientY: 0,\n    originalClientX: 0,\n    originalClientY: 0\n  }, r = Math.min(i.length, n), e = 0; e < r; ++e) {\n    var o = i[e];\n    t.originalClientX += \"originalClientX\" in o ? o.originalClientX : o.clientX, t.originalClientY += \"originalClientY\" in o ? o.originalClientY : o.clientY, t.clientX += o.clientX, t.clientY += o.clientY;\n  }\n  return n ? {\n    clientX: t.clientX / n,\n    clientY: t.clientY / n,\n    originalClientX: t.originalClientX / n,\n    originalClientY: t.originalClientY / n\n  } : t;\n}\nvar Wt = /* @__PURE__ */ function() {\n  function i(n) {\n    this.prevClients = [], this.startClients = [], this.movement = 0, this.length = 0, this.startClients = n, this.prevClients = n, this.length = n.length;\n  }\n  return i.prototype.getAngle = function(n) {\n    return n === void 0 && (n = this.prevClients), Mt(n);\n  }, i.prototype.getRotation = function(n) {\n    return n === void 0 && (n = this.prevClients), Mt(n) - Mt(this.startClients);\n  }, i.prototype.getPosition = function(n, t) {\n    n === void 0 && (n = this.prevClients);\n    var r = Se(n || this.prevClients, this.prevClients, this.startClients), e = r.deltaX, o = r.deltaY;\n    return this.movement += Math.sqrt(e * e + o * o), this.prevClients = n, r;\n  }, i.prototype.getPositions = function(n) {\n    n === void 0 && (n = this.prevClients);\n    for (var t = this.prevClients, r = this.startClients, e = Math.min(this.length, t.length), o = [], a = 0; a < e; ++a)\n      o[a] = Se([n[a]], [t[a]], [r[a]]);\n    return o;\n  }, i.prototype.getMovement = function(n) {\n    var t = this.movement;\n    if (!n)\n      return t;\n    var r = gt(n, this.length), e = gt(this.prevClients, this.length), o = r.clientX - e.clientX, a = r.clientY - e.clientY;\n    return Math.sqrt(o * o + a * a) + t;\n  }, i.prototype.getDistance = function(n) {\n    return n === void 0 && (n = this.prevClients), kt(n);\n  }, i.prototype.getScale = function(n) {\n    return n === void 0 && (n = this.prevClients), kt(n) / kt(this.startClients);\n  }, i.prototype.move = function(n, t) {\n    this.startClients.forEach(function(r) {\n      r.clientX -= n, r.clientY -= t;\n    }), this.prevClients.forEach(function(r) {\n      r.clientX -= n, r.clientY -= t;\n    });\n  }, i;\n}(), Ee = [\"textarea\", \"input\"], We = /* @__PURE__ */ function(i) {\n  Vr(n, i);\n  function n(t, r) {\n    r === void 0 && (r = {});\n    var e = i.call(this) || this;\n    e.options = {}, e.flag = !1, e.pinchFlag = !1, e.data = {}, e.isDrag = !1, e.isPinch = !1, e.clientStores = [], e.targets = [], e.prevTime = 0, e.doubleFlag = !1, e._useMouse = !1, e._useTouch = !1, e._useDrag = !1, e._dragFlag = !1, e._isTrusted = !1, e._isMouseEvent = !1, e._isSecondaryButton = !1, e._preventMouseEvent = !1, e._prevInputEvent = null, e._isDragAPI = !1, e._isIdle = !0, e._preventMouseEventId = 0, e._window = window, e.onDragStart = function(c, m) {\n      if (m === void 0 && (m = !0), !(!e.flag && c.cancelable === !1)) {\n        var p = c.type.indexOf(\"drag\") >= -1;\n        if (!(e.flag && p)) {\n          e._isDragAPI = !0;\n          var S = e.options, T = S.container, z = S.pinchOutside, b = S.preventWheelClick, W = S.preventRightClick, k = S.preventDefault, H = S.checkInput, V = S.dragFocusedInput, C = S.preventClickEventOnDragStart, P = S.preventClickEventOnDrag, L = S.preventClickEventByCondition, q = e._useTouch, Z = !e.flag;\n          if (e._isSecondaryButton = c.which === 3 || c.button === 2, b && (c.which === 2 || c.button === 1) || W && (c.which === 3 || c.button === 2))\n            return e.stop(), !1;\n          if (Z) {\n            var F = e._window.document.activeElement, x = c.target;\n            if (x) {\n              var B = x.tagName.toLowerCase(), K = Ee.indexOf(B) > -1, at = x.isContentEditable;\n              if (K || at) {\n                if (H || !V && F === x)\n                  return !1;\n                if (F && (F === x || at && F.isContentEditable && F.contains(x)))\n                  if (V)\n                    x.blur();\n                  else\n                    return !1;\n              } else if ((k || c.type === \"touchstart\") && F) {\n                var mt = F.tagName.toLowerCase();\n                (F.isContentEditable || Ee.indexOf(mt) > -1) && F.blur();\n              }\n              (C || P || L) && O(e._window, \"click\", e._onClick, !0);\n            }\n            e.clientStores = [new Wt(Ct(c))], e._isIdle = !1, e.flag = !0, e.isDrag = !1, e._isTrusted = m, e._dragFlag = !0, e._prevInputEvent = c, e.data = {}, e.doubleFlag = me() - e.prevTime < 200, e._isMouseEvent = Ur(c), !e._isMouseEvent && e._preventMouseEvent && e._allowMouseEvent();\n            var _t = e._preventMouseEvent || e.emit(\"dragStart\", M(M({ data: e.data, datas: e.data, inputEvent: c, isMouseEvent: e._isMouseEvent, isSecondaryButton: e._isSecondaryButton, isTrusted: m, isDouble: e.doubleFlag }, e.getCurrentStore().getPosition()), { preventDefault: function() {\n              c.preventDefault();\n            }, preventDrag: function() {\n              e._dragFlag = !1;\n            } }));\n            _t === !1 && e.stop(), e._isMouseEvent && e.flag && k && c.preventDefault();\n          }\n          if (!e.flag)\n            return !1;\n          var lt = 0;\n          if (Z ? (e._attchDragEvent(), q && z && (lt = setTimeout(function() {\n            O(T, \"touchstart\", e.onDragStart, {\n              passive: !1\n            });\n          }))) : q && z && Y(T, \"touchstart\", e.onDragStart), e.flag && Zr(c)) {\n            if (clearTimeout(lt), Z && c.touches.length !== c.changedTouches.length)\n              return;\n            e.pinchFlag || e.onPinchStart(c);\n          }\n        }\n      }\n    }, e.onDrag = function(c, m) {\n      if (e.flag) {\n        var p = e.options.preventDefault;\n        !e._isMouseEvent && p && c.preventDefault(), e._prevInputEvent = c;\n        var S = Ct(c), T = e.moveClients(S, c, !1);\n        if (e._dragFlag) {\n          if (e.pinchFlag || T.deltaX || T.deltaY) {\n            var z = e._preventMouseEvent || e.emit(\"drag\", M(M({}, T), { isScroll: !!m, inputEvent: c }));\n            if (z === !1) {\n              e.stop();\n              return;\n            }\n          }\n          e.pinchFlag && e.onPinch(c, S);\n        }\n        e.getCurrentStore().getPosition(S, !0);\n      }\n    }, e.onDragEnd = function(c) {\n      if (e.flag) {\n        var m = e.options, p = m.pinchOutside, S = m.container, T = m.preventClickEventOnDrag, z = m.preventClickEventOnDragStart, b = m.preventClickEventByCondition, W = e.isDrag;\n        (T || z || b) && requestAnimationFrame(function() {\n          e._allowClickEvent();\n        }), !b && !z && T && !W && e._allowClickEvent(), e._useTouch && p && Y(S, \"touchstart\", e.onDragStart), e.pinchFlag && e.onPinchEnd(c);\n        var k = c != null && c.touches ? Ct(c) : [], H = k.length;\n        H === 0 || !e.options.keepDragging ? e.flag = !1 : e._addStore(new Wt(k));\n        var V = e._getPosition(), C = me(), P = !W && e.doubleFlag;\n        e._prevInputEvent = null, e.prevTime = W || P ? 0 : C, e.flag || (e._dettachDragEvent(), e._preventMouseEvent || e.emit(\"dragEnd\", M({ data: e.data, datas: e.data, isDouble: P, isDrag: W, isClick: !W, isMouseEvent: e._isMouseEvent, isSecondaryButton: e._isSecondaryButton, inputEvent: c, isTrusted: e._isTrusted }, V)), e.clientStores = [], e._isMouseEvent || (e._preventMouseEvent = !0, clearTimeout(e._preventMouseEventId), e._preventMouseEventId = setTimeout(function() {\n          e._preventMouseEvent = !1;\n        }, 200)), e._isIdle = !0);\n      }\n    }, e.onBlur = function() {\n      e.onDragEnd();\n    }, e._allowClickEvent = function() {\n      Y(e._window, \"click\", e._onClick, !0);\n    }, e._onClick = function(c) {\n      e._allowClickEvent(), e._allowMouseEvent();\n      var m = e.options.preventClickEventByCondition;\n      m != null && m(c) || (c.stopPropagation(), c.preventDefault());\n    }, e._onContextMenu = function(c) {\n      var m = e.options;\n      m.preventRightClick ? e.onDragEnd(c) : c.preventDefault();\n    }, e._passCallback = function() {\n    };\n    var o = [].concat(t), a = o[0];\n    e._window = Br(a) ? a : ot(a), e.options = M({ checkInput: !1, container: a && !(\"document\" in a) ? ot(a) : a, preventRightClick: !0, preventWheelClick: !0, preventClickEventOnDragStart: !1, preventClickEventOnDrag: !1, preventClickEventByCondition: null, preventDefault: !0, checkWindowBlur: !1, keepDragging: !1, pinchThreshold: 0, events: [\"touch\", \"mouse\"] }, r);\n    var l = e.options, h = l.container, u = l.events, d = l.checkWindowBlur;\n    if (e._useDrag = u.indexOf(\"drag\") > -1, e._useTouch = u.indexOf(\"touch\") > -1, e._useMouse = u.indexOf(\"mouse\") > -1, e.targets = o, e._useDrag && o.forEach(function(c) {\n      O(c, \"dragstart\", e.onDragStart);\n    }), e._useMouse && (o.forEach(function(c) {\n      O(c, \"mousedown\", e.onDragStart), O(c, \"mousemove\", e._passCallback);\n    }), O(h, \"contextmenu\", e._onContextMenu)), d && O(ot(), \"blur\", e.onBlur), e._useTouch) {\n      var v = {\n        passive: !1\n      };\n      o.forEach(function(c) {\n        O(c, \"touchstart\", e.onDragStart, v), O(c, \"touchmove\", e._passCallback, v);\n      });\n    }\n    return e;\n  }\n  return n.prototype.stop = function() {\n    this.isDrag = !1, this.data = {}, this.clientStores = [], this.pinchFlag = !1, this.doubleFlag = !1, this.prevTime = 0, this.flag = !1, this._isIdle = !0, this._allowClickEvent(), this._dettachDragEvent(), this._isDragAPI = !1;\n  }, n.prototype.getMovement = function(t) {\n    return this.getCurrentStore().getMovement(t) + this.clientStores.slice(1).reduce(function(r, e) {\n      return r + e.movement;\n    }, 0);\n  }, n.prototype.isDragging = function() {\n    return this.isDrag;\n  }, n.prototype.isIdle = function() {\n    return this._isIdle;\n  }, n.prototype.isFlag = function() {\n    return this.flag;\n  }, n.prototype.isPinchFlag = function() {\n    return this.pinchFlag;\n  }, n.prototype.isDoubleFlag = function() {\n    return this.doubleFlag;\n  }, n.prototype.isPinching = function() {\n    return this.isPinch;\n  }, n.prototype.scrollBy = function(t, r, e, o) {\n    o === void 0 && (o = !0), this.flag && (this.clientStores[0].move(t, r), o && this.onDrag(e, !0));\n  }, n.prototype.move = function(t, r) {\n    var e = t[0], o = t[1], a = this.getCurrentStore(), l = a.prevClients;\n    return this.moveClients(l.map(function(h) {\n      var u = h.clientX, d = h.clientY;\n      return {\n        clientX: u + e,\n        clientY: d + o,\n        originalClientX: u,\n        originalClientY: d\n      };\n    }), r, !0);\n  }, n.prototype.triggerDragStart = function(t) {\n    this.onDragStart(t, !1);\n  }, n.prototype.setEventData = function(t) {\n    var r = this.data;\n    for (var e in t)\n      r[e] = t[e];\n    return this;\n  }, n.prototype.setEventDatas = function(t) {\n    return this.setEventData(t);\n  }, n.prototype.getCurrentEvent = function(t) {\n    return t === void 0 && (t = this._prevInputEvent), M(M({ data: this.data, datas: this.data }, this._getPosition()), { movement: this.getMovement(), isDrag: this.isDrag, isPinch: this.isPinch, isScroll: !1, inputEvent: t });\n  }, n.prototype.getEventData = function() {\n    return this.data;\n  }, n.prototype.getEventDatas = function() {\n    return this.data;\n  }, n.prototype.unset = function() {\n    var t = this, r = this.targets, e = this.options.container;\n    this.off(), Y(this._window, \"blur\", this.onBlur), this._useDrag && r.forEach(function(o) {\n      Y(o, \"dragstart\", t.onDragStart);\n    }), this._useMouse && (r.forEach(function(o) {\n      Y(o, \"mousedown\", t.onDragStart);\n    }), Y(e, \"contextmenu\", this._onContextMenu)), this._useTouch && (r.forEach(function(o) {\n      Y(o, \"touchstart\", t.onDragStart);\n    }), Y(e, \"touchstart\", this.onDragStart)), this._prevInputEvent = null, this._allowClickEvent(), this._dettachDragEvent();\n  }, n.prototype.onPinchStart = function(t) {\n    var r = this, e = this.options.pinchThreshold;\n    if (!(this.isDrag && this.getMovement() > e)) {\n      var o = new Wt(Ct(t));\n      this.pinchFlag = !0, this._addStore(o);\n      var a = this.emit(\"pinchStart\", M(M({ data: this.data, datas: this.data, angle: o.getAngle(), touches: this.getCurrentStore().getPositions() }, o.getPosition()), { inputEvent: t, isTrusted: this._isTrusted, preventDefault: function() {\n        t.preventDefault();\n      }, preventDrag: function() {\n        r._dragFlag = !1;\n      } }));\n      a === !1 && (this.pinchFlag = !1);\n    }\n  }, n.prototype.onPinch = function(t, r) {\n    if (!(!this.flag || !this.pinchFlag || r.length < 2)) {\n      var e = this.getCurrentStore();\n      this.isPinch = !0, this.emit(\"pinch\", M(M({ data: this.data, datas: this.data, movement: this.getMovement(r), angle: e.getAngle(r), rotation: e.getRotation(r), touches: e.getPositions(r), scale: e.getScale(r), distance: e.getDistance(r) }, e.getPosition(r)), { inputEvent: t, isTrusted: this._isTrusted }));\n    }\n  }, n.prototype.onPinchEnd = function(t) {\n    if (this.pinchFlag) {\n      var r = this.isPinch;\n      this.isPinch = !1, this.pinchFlag = !1;\n      var e = this.getCurrentStore();\n      this.emit(\"pinchEnd\", M(M({ data: this.data, datas: this.data, isPinch: r, touches: e.getPositions() }, e.getPosition()), { inputEvent: t }));\n    }\n  }, n.prototype.getCurrentStore = function() {\n    return this.clientStores[0];\n  }, n.prototype.moveClients = function(t, r, e) {\n    var o = this._getPosition(t, e), a = this.isDrag;\n    (o.deltaX || o.deltaY) && (this.isDrag = !0);\n    var l = !1;\n    return !a && this.isDrag && (l = !0), M(M({ data: this.data, datas: this.data }, o), { movement: this.getMovement(t), isDrag: this.isDrag, isPinch: this.isPinch, isScroll: !1, isMouseEvent: this._isMouseEvent, isSecondaryButton: this._isSecondaryButton, inputEvent: r, isTrusted: this._isTrusted, isFirstDrag: l });\n  }, n.prototype._addStore = function(t) {\n    this.clientStores.splice(0, 0, t);\n  }, n.prototype._getPosition = function(t, r) {\n    var e = this.getCurrentStore(), o = e.getPosition(t, r), a = this.clientStores.slice(1).reduce(function(u, d) {\n      var v = d.getPosition();\n      return u.distX += v.distX, u.distY += v.distY, u;\n    }, o), l = a.distX, h = a.distY;\n    return M(M({}, o), { distX: l, distY: h });\n  }, n.prototype._attchDragEvent = function() {\n    var t = this._window, r = this.options.container, e = {\n      passive: !1\n    };\n    this._isDragAPI && (O(r, \"dragover\", this.onDrag, e), O(t, \"dragend\", this.onDragEnd)), this._useMouse && (O(r, \"mousemove\", this.onDrag), O(t, \"mouseup\", this.onDragEnd)), this._useTouch && (O(r, \"touchmove\", this.onDrag, e), O(t, \"touchend\", this.onDragEnd, e), O(t, \"touchcancel\", this.onDragEnd, e));\n  }, n.prototype._dettachDragEvent = function() {\n    var t = this._window, r = this.options.container;\n    this._isDragAPI && (Y(r, \"dragover\", this.onDrag), Y(t, \"dragend\", this.onDragEnd)), this._useMouse && (Y(r, \"mousemove\", this.onDrag), Y(t, \"mouseup\", this.onDragEnd)), this._useTouch && (Y(r, \"touchstart\", this.onDragStart), Y(r, \"touchmove\", this.onDrag), Y(t, \"touchend\", this.onDragEnd), Y(t, \"touchcancel\", this.onDragEnd));\n  }, n.prototype._allowMouseEvent = function() {\n    this._preventMouseEvent = !1, clearTimeout(this._preventMouseEventId);\n  }, n;\n}(Zt);\nfunction Gr(i) {\n  for (var n = 5381, t = i.length; t; )\n    n = n * 33 ^ i.charCodeAt(--t);\n  return n >>> 0;\n}\nvar Kr = Gr;\nfunction Jr(i) {\n  return Kr(i).toString(36);\n}\nfunction Qr(i) {\n  if (i && i.getRootNode) {\n    var n = i.getRootNode();\n    if (n.nodeType === 11)\n      return n;\n  }\n}\nfunction tn(i, n, t) {\n  return t.original ? n : n.replace(/([^};{\\s}][^};{]*|^\\s*){/mg, function(r, e) {\n    var o = e.trim();\n    return (o ? jr(o) : [\"\"]).map(function(a) {\n      var l = a.trim();\n      return l.indexOf(\"@\") === 0 ? l : l.indexOf(\":global\") > -1 ? l.replace(/\\:global/g, \"\") : l.indexOf(\":host\") > -1 ? \"\".concat(l.replace(/\\:host/g, \".\".concat(i))) : l ? \".\".concat(i, \" \").concat(l) : \".\".concat(i);\n    }).join(\", \") + \" {\";\n  });\n}\nfunction en(i, n, t, r, e) {\n  var o = Nt(r), a = o.createElement(\"style\");\n  return a.setAttribute(\"type\", \"text/css\"), a.setAttribute(\"data-styled-id\", i), a.setAttribute(\"data-styled-count\", \"1\"), t.nonce && a.setAttribute(\"nonce\", t.nonce), a.innerHTML = tn(i, n, t), (e || o.head || o.body).appendChild(a), a;\n}\nfunction rn(i) {\n  var n = \"rCS\" + Jr(i);\n  return {\n    className: n,\n    inject: function(t, r) {\n      r === void 0 && (r = {});\n      var e = Qr(t), o = (e || t.ownerDocument || document).querySelector('style[data-styled-id=\"'.concat(n, '\"]'));\n      if (!o)\n        o = en(n, i, r, t, e);\n      else {\n        var a = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n        o.setAttribute(\"data-styled-count\", \"\".concat(a + 1));\n      }\n      return {\n        destroy: function() {\n          var l, h = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n          h <= 1 ? (o.remove ? o.remove() : (l = o.parentNode) === null || l === void 0 || l.removeChild(o), o = null) : o.setAttribute(\"data-styled-count\", \"\".concat(h - 1));\n        }\n      };\n    }\n  };\n}\nfunction Ut(i, n) {\n  for (var t = i.length, r = 0; r < t; ++r)\n    if (n(i[r], r))\n      return !0;\n  return !1;\n}\nfunction Le(i, n) {\n  for (var t = i.length, r = 0; r < t; ++r)\n    if (n(i[r], r))\n      return i[r];\n  return null;\n}\nfunction Fe(i) {\n  var n = i;\n  if (typeof n > \"u\") {\n    if (typeof navigator > \"u\" || !navigator)\n      return \"\";\n    n = navigator.userAgent || \"\";\n  }\n  return n.toLowerCase();\n}\nfunction qt(i, n) {\n  try {\n    return new RegExp(i, \"g\").exec(n);\n  } catch {\n    return null;\n  }\n}\nfunction nn() {\n  if (typeof navigator > \"u\" || !navigator || !navigator.userAgentData)\n    return !1;\n  var i = navigator.userAgentData, n = i.brands || i.uaList;\n  return !!(n && n.length);\n}\nfunction on(i, n) {\n  var t = qt(\"(\" + i + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))\", n);\n  return t ? t[3] : \"\";\n}\nfunction $t(i) {\n  return i.replace(/_/g, \".\");\n}\nfunction pt(i, n) {\n  var t = null, r = \"-1\";\n  return Ut(i, function(e) {\n    var o = qt(\"(\" + e.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", n);\n    return !o || e.brand ? !1 : (t = e, r = o[3] || \"-1\", e.versionAlias ? r = e.versionAlias : e.versionTest && (r = on(e.versionTest.toLowerCase(), n) || r), r = $t(r), !0);\n  }), {\n    preset: t,\n    version: r\n  };\n}\nfunction Tt(i, n) {\n  var t = {\n    brand: \"\",\n    version: \"-1\"\n  };\n  return Ut(i, function(r) {\n    var e = je(n, r);\n    return e ? (t.brand = r.id, t.version = r.versionAlias || e.version, t.version !== \"-1\") : !1;\n  }), t;\n}\nfunction je(i, n) {\n  return Le(i, function(t) {\n    var r = t.brand;\n    return qt(\"\" + n.test, r.toLowerCase());\n  });\n}\nvar Ie = [{\n  test: \"phantomjs\",\n  id: \"phantomjs\"\n}, {\n  test: \"whale\",\n  id: \"whale\"\n}, {\n  test: \"edgios|edge|edg\",\n  id: \"edge\"\n}, {\n  test: \"msie|trident|windows phone\",\n  id: \"ie\",\n  versionTest: \"iemobile|msie|rv\"\n}, {\n  test: \"miuibrowser\",\n  id: \"miui browser\"\n}, {\n  test: \"samsungbrowser\",\n  id: \"samsung internet\"\n}, {\n  test: \"samsung\",\n  id: \"samsung internet\",\n  versionTest: \"version\"\n}, {\n  test: \"chrome|crios\",\n  id: \"chrome\"\n}, {\n  test: \"firefox|fxios\",\n  id: \"firefox\"\n}, {\n  test: \"android\",\n  id: \"android browser\",\n  versionTest: \"version\"\n}, {\n  test: \"safari|iphone|ipad|ipod\",\n  id: \"safari\",\n  versionTest: \"version\"\n}], $e = [{\n  test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n  id: \"chrome\",\n  versionTest: \"chrome\"\n}, {\n  test: \"chromium\",\n  id: \"chrome\"\n}, {\n  test: \"whale\",\n  id: \"chrome\",\n  versionAlias: \"-1\",\n  brand: !0\n}], Bt = [{\n  test: \"applewebkit\",\n  id: \"webkit\",\n  versionTest: \"applewebkit|safari\"\n}], Be = [{\n  test: \"(?=(iphone|ipad))(?!(.*version))\",\n  id: \"webview\"\n}, {\n  test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n  id: \"webview\"\n}, {\n  // test webview\n  test: \"webview\",\n  id: \"webview\"\n}], He = [{\n  test: \"windows phone\",\n  id: \"windows phone\"\n}, {\n  test: \"windows 2000\",\n  id: \"window\",\n  versionAlias: \"5.0\"\n}, {\n  test: \"windows nt\",\n  id: \"window\"\n}, {\n  test: \"win32|windows\",\n  id: \"window\"\n}, {\n  test: \"iphone|ipad|ipod\",\n  id: \"ios\",\n  versionTest: \"iphone os|cpu os\"\n}, {\n  test: \"macos|macintel|mac os x\",\n  id: \"mac\"\n}, {\n  test: \"android|linux armv81\",\n  id: \"android\"\n}, {\n  test: \"tizen\",\n  id: \"tizen\"\n}, {\n  test: \"webos|web0s\",\n  id: \"webos\"\n}];\nfunction Ve(i) {\n  return !!pt(Be, i).preset;\n}\nfunction sn(i) {\n  var n = Fe(i), t = !!/mobi/g.exec(n), r = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1,\n    webview: Ve(n),\n    chromium: !1,\n    chromiumVersion: \"-1\",\n    webkit: !1,\n    webkitVersion: \"-1\"\n  }, e = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  }, o = pt(Ie, n), a = o.preset, l = o.version, h = pt(He, n), u = h.preset, d = h.version, v = pt($e, n);\n  if (r.chromium = !!v.preset, r.chromiumVersion = v.version, !r.chromium) {\n    var c = pt(Bt, n);\n    r.webkit = !!c.preset, r.webkitVersion = c.version;\n  }\n  return u && (e.name = u.id, e.version = d, e.majorVersion = parseInt(d, 10)), a && (r.name = a.id, r.version = l, r.webview && e.name === \"ios\" && r.name !== \"safari\" && (r.webview = !1)), r.majorVersion = parseInt(r.version, 10), {\n    browser: r,\n    os: e,\n    isMobile: t,\n    isHints: !1\n  };\n}\nfunction an(i) {\n  var n = navigator.userAgentData, t = (n.uaList || n.brands).slice(), r = n.mobile || !1, e = t[0], o = (n.platform || navigator.platform).toLowerCase(), a = {\n    name: e.brand,\n    version: e.version,\n    majorVersion: -1,\n    webkit: !1,\n    webkitVersion: \"-1\",\n    chromium: !1,\n    chromiumVersion: \"-1\",\n    webview: !!Tt(Be, t).brand || Ve(Fe())\n  }, l = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n  a.webkit = !a.chromium && Ut(Bt, function(c) {\n    return je(t, c);\n  });\n  var h = Tt($e, t);\n  if (a.chromium = !!h.brand, a.chromiumVersion = h.version || \"-1\", !a.chromium) {\n    var u = Tt(Bt, t);\n    a.webkit = !!u.brand, a.webkitVersion = u.version || \"-1\";\n  }\n  var d = Le(He, function(c) {\n    return new RegExp(\"\" + c.test, \"g\").exec(o);\n  });\n  l.name = d ? d.id : \"\";\n  {\n    var v = Tt(Ie, t);\n    a.name = v.brand || a.name, a.version = v.brand && i ? i.uaFullVersion : v.version;\n  }\n  return a.webkit && (l.name = r ? \"ios\" : \"mac\"), l.name === \"ios\" && a.webview && (a.version = \"-1\"), l.version = $t(l.version), a.version = $t(a.version), l.majorVersion = parseInt(l.version, 10), a.majorVersion = parseInt(a.version, 10), {\n    browser: a,\n    os: l,\n    isMobile: r,\n    isHints: !0\n  };\n}\nfunction ln(i) {\n  return nn() ? an() : sn(i);\n}\nfunction cn(i, n) {\n  return n.replace(/([^}{]*){/gm, (t, r) => `${r.replace(/\\.([^{,\\s\\d.]+)/g, `.${i}$1`)}{`);\n}\nfunction dt(i, n) {\n  return (t) => {\n    t && (i[n] = t);\n  };\n}\nconst un = ln(), hn = un.browser.name === \"safari\", et = \"infinite-viewer-\", we = `${et}wrapper`, be = `${et}scroll-area`, fn = `${et}scroll-bar`, Ne = `${et}horizontal-scroll-bar`, Ze = `${et}vertical-scroll-bar`, ye = `${et}scroll-thumb`, Ue = rn(\n  cn(\n    et,\n    `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    scrollbar-width: none;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.restrict-wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: calc(100% - 20px);\n    right: 10px;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: calc(100% - 20px);\n    bottom: 10px;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n    opacity: 0;\n}\n.scroll-bar:hover .scroll-thumb {\n    border-radius: 5px;\n    opacity: 1;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: opacity, margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: opacity, margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n}\n`\n  )\n), I = {\n  margin: 500,\n  threshold: 100,\n  zoom: 1,\n  zoomX: 1,\n  zoomY: 1,\n  rangeX: [-1 / 0, 1 / 0],\n  rangeY: [-1 / 0, 1 / 0],\n  rangeOffsetX: [0, 0],\n  rangeOffsetY: [0, 0],\n  wrapperElement: null,\n  scrollAreaElement: null,\n  horizontalScrollElement: null,\n  verticalScrollElement: null,\n  usePinch: !1,\n  useAutoZoom: !1,\n  useMouseDrag: !1,\n  pinchThreshold: 30,\n  cspNonce: \"\",\n  maxPinchWheel: 1 / 0,\n  wheelScale: 0.01,\n  displayHorizontalScroll: !0,\n  displayVerticalScroll: !0,\n  useTransform: !0,\n  useWheelPinch: !0,\n  zoomRange: [1e-3, 1 / 0],\n  wheelPinchKey: \"ctrl\",\n  useWheelScroll: hn,\n  zoomOffsetX: \"50%\",\n  zoomOffsetY: \"50%\",\n  translateZ: 0,\n  useGesture: !0,\n  useResizeObserver: !1,\n  pinchDirection: \"all\",\n  preventWheelClick: !0,\n  useBounceScrollBar: !1,\n  useOverflowScroll: !1\n}, Ce = (i) => 1 - Math.pow(1 - i, 3), Te = {\n  horizontal: {\n    pos: \"Left\",\n    coord: \"X\",\n    size: \"Width\"\n  },\n  vertical: {\n    pos: \"Top\",\n    coord: \"Y\",\n    size: \"Height\"\n  }\n}, qe = Ue.className, Gt = [\n  \"margin\",\n  \"threshold\",\n  \"zoomOffsetX\",\n  \"zoomOffsetY\",\n  \"zoom\",\n  \"zoomX\",\n  \"zoomY\",\n  \"rangeX\",\n  \"rangeY\",\n  \"rangeOffsetX\",\n  \"rangeOffsetY\",\n  \"usePinch\",\n  \"useMouseDrag\",\n  \"pinchThreshold\",\n  \"maxPinchWheel\",\n  \"wheelScale\",\n  \"displayVerticalScroll\",\n  \"displayHorizontalScroll\",\n  \"translateZ\",\n  \"useAutoZoom\",\n  \"wheelPinchKey\",\n  \"zoomRange\",\n  \"zoomRangeX\",\n  \"zoomRangeY\",\n  \"pinchDirection\",\n  \"useOverflowScroll\"\n], vn = [\n  // ignore target, container,\n  ...Gt,\n  \"preventWheelClick\",\n  \"useWheelPinch\",\n  \"useWheelScroll\",\n  \"useGesture\",\n  \"cspNonce\",\n  \"wrapperElement\",\n  \"scrollAreaElement\",\n  \"verticalScrollElement\",\n  \"horizontalScrollElement\",\n  \"useResizeObserver\",\n  \"wheelContainer\",\n  \"useBounceScrollBar\"\n], Ge = [\n  \"scroll\",\n  \"abortPinch\",\n  \"dragStart\",\n  \"dragEnd\",\n  \"pinchStart\",\n  \"pinch\"\n], wn = [\n  \"getScrollLeft\",\n  \"getScrollTop\",\n  \"getScrollWidth\",\n  \"getScrollHeight\",\n  \"getContainerWidth\",\n  \"getContainerHeight\",\n  \"getViewportWidth\",\n  \"getViewportHeight\",\n  \"getViewportScrollWidth\",\n  \"getViewportScrollHeight\",\n  \"scrollTo\",\n  \"scrollBy\",\n  \"zoomBy\",\n  \"scrollCenter\",\n  \"getContainer\",\n  \"getViewport\",\n  \"getWrapper\",\n  \"setZoom\",\n  \"getRangeX\",\n  \"getRangeY\",\n  \"resize\",\n  \"getZoom\",\n  \"getZoomX\",\n  \"getZoomY\",\n  \"getWheelContainer\",\n  \"setTo\",\n  \"setBy\"\n], dn = 1e-6;\nfunction pn(i) {\n  const { deltaX: n, deltaY: t, datas: r } = i, e = Date.now(), o = r.speed;\n  if (!o) {\n    r.speed = [0, 0], r.time = e;\n    return;\n  }\n  const a = e - r.time;\n  r.speed = [o[0] / 2 + n / a, o[1] / 2 + t / a];\n}\nfunction Ke(i, n) {\n  const t = Math.sqrt(i[0] * i[0] + i[1] * i[1]);\n  return Math.abs(t / n);\n}\nfunction gn(i, n) {\n  const t = Ke(i, n);\n  return [\n    -i[0] / 2 * t,\n    -i[1] / 2 * t\n  ];\n}\nfunction U(i) {\n  return Math.abs(i);\n}\nfunction mn(i, n, t, r, e) {\n  const o = e || isFinite(t[0]) ? t[0] : Math.min(-1, Math.floor(i / n)) * n - r, a = e || isFinite(t[1]) ? t[1] : Math.max(1, Math.ceil(i / n)) * n + r;\n  return [o, a];\n}\nfunction ze(i, n) {\n  return i ?? n;\n}\nfunction Re(i, n, t) {\n  const r = t.duration, e = t.easing || ((h) => 1 - Math.pow(1 - h, 3)), o = Date.now();\n  let a = o;\n  const l = () => {\n    const h = Date.now();\n    let u = h - o;\n    r < u && (u = r);\n    const d = e(u / r), v = e((a - o) / r);\n    a = h, i(d - v), !(u >= r) && n(l);\n  };\n  n(l);\n}\nclass De extends Zt {\n  constructor(t, r, e) {\n    super();\n    _(this, \"isAppend\", !1);\n    _(this, \"thumbElement\");\n    _(this, \"barElement\");\n    _(this, \"gesto\");\n    _(this, \"size\", 0);\n    _(this, \"scrollSize\", 0);\n    _(this, \"isHorizontal\", !1);\n    _(this, \"_onDragStart\", (t) => {\n      const r = this.isHorizontal, e = t.inputEvent.target, o = t.datas, a = this.thumbElement === e;\n      a || setTimeout(() => {\n        requestAnimationFrame(() => {\n          const l = this.thumbElement.getBoundingClientRect(), h = l[r ? \"left\" : \"top\"], u = l[r ? \"width\" : \"height\"], d = h + u, v = t[r ? \"clientX\" : \"clientY\"];\n          if (h <= v && v <= d)\n            return;\n          const c = this.size, m = c * c / this.scrollSize;\n          this.scrollBy(h < v ? m : -m);\n        });\n      }, 100), o.isThumb = a, t.inputEvent.stopPropagation(), t.inputEvent.preventDefault();\n    });\n    _(this, \"_onDrag\", (t) => {\n      t.datas.isThumb && this.scrollBy(this.isHorizontal ? t.deltaX : t.deltaY);\n    });\n    _(this, \"_onWheel\", (t) => {\n      const r = this.isHorizontal ? t.deltaX : t.deltaY;\n      r && t.preventDefault(), this.trigger(\"scroll\", {\n        delta: r\n      });\n    });\n    this.type = r;\n    const o = r === \"horizontal\", a = Nt(t);\n    let l, h = e;\n    e ? l = e.querySelector(`.${ye}`) : (h = a.createElement(\"div\"), l = a.createElement(\"div\"), h.insertBefore(l, null), this.isAppend = !0), it(\n      h,\n      o ? Ne : Ze\n    ), it(h, fn), it(l, ye), this.thumbElement = l, this.barElement = h, this.isHorizontal = o, this.gesto = new We(h, {\n      container: ot(a)\n    }).on(\"dragStart\", (u) => this._onDragStart(u)).on(\"drag\", (u) => this._onDrag(u)), O(this.barElement, \"wheel\", this._onWheel, {\n      passive: !1\n    });\n  }\n  scrollBy(t, r) {\n    const e = t / this.size;\n    this.trigger(\"scroll\", {\n      delta: r ? t : this.scrollSize * e\n    });\n  }\n  render(t, r, e, o) {\n    this.size = e, this.scrollSize = o;\n    const a = t && $r(o - e, 1e-3) > 0 ? 1 : 0, [l, h] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"], u = e / o * 100, d = Math.max(0, r) / o * 100;\n    this.thumbElement.style.cssText += `${h}: ${u}%;opacity: ${a};transform: translate${l}(${100 / u * d}%)`;\n  }\n  destroy() {\n    Y(this.barElement, \"wheel\", this._onWheel), this.gesto.off(), this.off();\n  }\n}\nlet Ht = class extends Zt {\n  /**\n   * @sort 1\n   */\n  constructor(t, r = {}, e = {}) {\n    super();\n    _(this, \"options\");\n    _(this, \"injectResult\");\n    _(this, \"wrapperElement\");\n    _(this, \"scrollAreaElement\");\n    _(this, \"horizontalScrollbar\");\n    _(this, \"verticalScrollbar\");\n    _(this, \"gesto\");\n    _(this, \"offsetX\", 0);\n    _(this, \"offsetY\", 0);\n    _(this, \"containerWidth\", 0);\n    _(this, \"containerHeight\", 0);\n    _(this, \"viewportWidth\", 0);\n    _(this, \"viewportHeight\", 0);\n    _(this, \"viewportScrollWidth\", 0);\n    _(this, \"viewportScrollHeight\", 0);\n    _(this, \"scrollLeft\", 0);\n    _(this, \"scrollTop\", 0);\n    _(this, \"_scrollTimer\", 0);\n    _(this, \"_zoomTimer\", 0);\n    _(this, \"_viewportElement\", null);\n    _(this, \"_wheelContainerElement\", null);\n    _(this, \"dragFlag\", !1);\n    _(this, \"isLoop\", !1);\n    _(this, \"_tempScale\", [1, 1]);\n    _(this, \"_tempRect\", null);\n    _(this, \"_tempRectTimer\", null);\n    _(this, \"_onDestroys\", []);\n    _(this, \"_asLeft\", 0);\n    _(this, \"_asTop\", 0);\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    _(this, \"resize\", () => {\n      const { offsetWidth: t, offsetHeight: r } = this._containerElement, {\n        offsetWidth: e,\n        offsetHeight: o,\n        scrollWidth: a,\n        scrollHeight: l\n      } = this._viewportElement;\n      this.containerWidth = t, this.containerHeight = r, this.viewportWidth = e, this.viewportHeight = o, this.viewportScrollWidth = Math.max(e, a), this.viewportScrollHeight = Math.max(o, l), this.render(), this._scrollBy(0, 0);\n    });\n    _(this, \"_onScroll\", () => {\n      const { scrollLeft: t, scrollTop: r } = this.wrapperElement, { zoom: e = I.zoom } = this, o = t - this.scrollLeft, a = r - this.scrollTop, l = this.getScrollLeft(), h = this.getScrollTop();\n      this.isLoop && (this.isLoop = !1), this.scrollLeft = t, this.scrollTop = r, this.scrollTo(\n        l + o / e,\n        h + a / e\n      );\n    });\n    _(this, \"onWheel\", (t) => {\n      const r = this.options, e = r.pinchDirection, o = r.maxPinchWheel || 1 / 0, a = t[`${this.wheelPinchKey}Key`] || t.ctrlKey;\n      if (r.useWheelPinch && a) {\n        let l = t.deltaY;\n        const h = l >= 0 ? 1 : -1, u = Math.min(o, Math.abs(l));\n        l = h * u;\n        const d = -l, v = Math.max(\n          1 + d * (r.wheelScale || 0.01),\n          dn\n        );\n        clearTimeout(this._tempRectTimer), this._tempRectTimer = window.setTimeout(() => {\n          this._tempRect = null;\n        }, 100), this._triggerPinch({\n          distance: u,\n          scale: v,\n          rotation: 0,\n          zoom: this.zoom * v,\n          zoomX: this.zoomX * (e === \"vertical\" ? 1 : v),\n          zoomY: this.zoomY * (e === \"horizontal\" ? 1 : v),\n          inputEvent: t,\n          isWheel: !0,\n          clientX: t.clientX,\n          clientY: t.clientY,\n          ratioX: 0,\n          ratioY: 0\n        });\n      } else if (r.useWheelScroll) {\n        let l = t.deltaX, h = t.deltaY;\n        t.shiftKey && !l && (l = h, h = 0), this.scrollBy(l / this.zoomX, h / this.zoomY);\n      } else\n        return;\n      t.preventDefault();\n    });\n    _(this, \"onGestureStart\", (t) => {\n      this._tempScale = [this.zoomX, this.zoomY], this._setClientRect(), t.preventDefault();\n    });\n    _(this, \"onGestureChange\", (t) => {\n      if (t.preventDefault(), this.gesto.isFlag() || !this._tempScale) {\n        this._tempScale = [1, 1];\n        return;\n      }\n      const r = t.scale, e = this._tempScale[0], o = this._tempScale[1], a = this.options.pinchDirection;\n      this._triggerPinch({\n        distance: 0,\n        scale: r,\n        rotation: t.rotation,\n        inputEvent: t,\n        isWheel: !0,\n        zoom: (e + o) * r / 2,\n        zoomX: e * (a === \"vertical\" ? 1 : r),\n        zoomY: o * (a === \"horizontal\" ? 1 : r),\n        clientX: t.clientX,\n        clientY: t.clientY,\n        ratioX: 0,\n        ratioY: 0\n      });\n    });\n    _(this, \"onGestureEnd\", () => {\n    });\n    this._containerElement = t, _e(r) ? (this._viewportElement = r, this.options = {\n      ...I,\n      ...e\n    }) : (this._viewportElement = t.children[0], this.options = {\n      ...I,\n      ...r\n    }), this.init();\n  }\n  static addProperties(t, r) {\n    t.forEach((e) => {\n      const o = {\n        enumerable: !0,\n        configurable: !0,\n        get() {\n          return this.options[e];\n        }\n      }, a = Ae(`set ${e}`);\n      r[a] ? o.set = function(l) {\n        this[a](l);\n      } : o.set = function(l) {\n        this.options[e] = l;\n      }, Object.defineProperty(r, e, o);\n    });\n  }\n  /**\n   * Get Container Element\n   */\n  getContainer() {\n    return this._containerElement;\n  }\n  /**\n   * Get Wheel Container Element\n   */\n  getWheelContainer() {\n    return this._wheelContainerElement;\n  }\n  /**\n   * Get Viewport Element\n   */\n  getViewport() {\n    return this._viewportElement;\n  }\n  /**\n   * Get Wrapper Element\n   */\n  getWrapper() {\n    return this.wrapperElement;\n  }\n  /**\n   * Get Scroll Area Element\n   */\n  geScrollArea() {\n    return this.scrollAreaElement;\n  }\n  /**\n   * Destroy elements, properties, and events.\n   */\n  destroy() {\n    this.off(), this.gesto.unset(), this.verticalScrollbar.destroy(), this.horizontalScrollbar.destroy(), this.injectResult.destroy();\n    const t = this._containerElement;\n    this._onDestroys.forEach((r) => {\n      r();\n    }), Y(this.wrapperElement, \"scroll\", this._onScroll), Y(this._wheelContainerElement, \"wheel\", this.onWheel), Y(t, \"gesturestart\", this.onGestureStart), Y(t, \"gesturechange\", this.onGestureChange), Y(t, \"gesturesend\", this.onGestureEnd), this.gesto = null, this.injectResult = null, this._containerElement = null, this._viewportElement = null, this.options = null;\n  }\n  /**\n   * Gets the number of pixels that an element's content is scrolled vertically.\n   */\n  getScrollTop(t = {}) {\n    let r = !1, e = !1;\n    st(t) ? (r = t.range, e = t.absolute) : r = t;\n    const o = this.zoomY, a = this.scrollTop / o + this.offsetY + (r ? U(this.getRangeY()[0]) : 0);\n    return e ? a * o : a;\n  }\n  /**\n   * Gets the number of pixels that an element's content is scrolled vertically.\n   */\n  getScrollLeft(t = {}) {\n    let r = !1, e = !1;\n    st(t) ? (r = t.range, e = t.absolute) : r = t;\n    const o = this.zoomX, a = this.scrollLeft / o + this.offsetX + (r ? U(this.getRangeX()[0]) : 0);\n    return e ? a * o : a;\n  }\n  /**\n   * Gets measurement of the width of an element's content with overflow\n   */\n  getScrollWidth(t) {\n    const r = this._getScrollRangeX(), e = this.zoomX, o = this.containerWidth / e + U(r[0]) + r[1];\n    return t ? o : o * e;\n  }\n  /**\n   * Gets measurement of the height of an element's content with overflow\n   */\n  getScrollHeight(t) {\n    const r = this._getScrollRangeY(), e = this.zoomY, o = this.containerHeight / e + U(r[0]) + r[1];\n    return t ? o : o * e;\n  }\n  /**\n   * Scroll the element to the center\n   */\n  scrollCenter(t = {}) {\n    this.resize();\n    const r = this.zoomX, e = this.zoomY;\n    let o = -(this.containerWidth / r - this.viewportWidth) / 2, a = -(this.containerHeight / e - this.viewportHeight) / 2;\n    return t.absolute && (o *= r, a *= e), t.horizontal === !1 && (o = this.getScrollLeft()), t.vertical === !1 && (a = this.getScrollTop()), this.scrollTo(o, a, t);\n  }\n  /**\n   * Move to that position or zoom.\n   * @since 0.25.0\n   */\n  setTo(t) {\n    const {\n      x: r = this.getScrollLeft(),\n      y: e = this.getScrollTop(),\n      zoom: o = [this.getZoomX(), this.getZoomY()],\n      duration: a\n    } = t, { zoomX: l, zoomY: h, zoomRange: u } = this;\n    let {\n      zoomOffsetX: d = I.zoomOffsetX,\n      zoomOffsetY: v = I.zoomOffsetY\n    } = this;\n    \"zoomOffsetX\" in t && (d = t.zoomOffsetX), \"zoomOffsetY\" in t && (v = t.zoomOffsetY);\n    const [c, m] = vt(o) ? o : [o, o], p = this.zoomRangeX || u, S = this.zoomRangeY || u, T = tt(c, p[0], p[1]), z = tt(m, S[0], S[1]), b = G(`${d}`, this.viewportWidth) * (1 / l - 1 / T), W = G(`${v}`, this.viewportHeight) * (1 / h - 1 / z);\n    this.scrollTo(r - b, e - W, {\n      duration: a\n    }), this.setZoom(o, {\n      zoomOffsetX: d,\n      zoomOffsetY: v,\n      duration: a,\n      zoomBase: \"fixed\"\n    });\n  }\n  /**\n   * Move by the position or zoom delta value.\n   * @since 0.25.0\n   */\n  setBy(t) {\n    const { x: r = 0, y: e = 0, zoom: o = [0, 0] } = t, [a, l] = vt(o) ? o : [o, o];\n    this.setTo({\n      ...t,\n      x: this.getScrollLeft() + r,\n      y: this.getScrollTop() + e,\n      zoom: [this.zoomX + a, this.zoomY + l]\n    });\n  }\n  /**\n   * Scrolls the container by the given amount.\n   */\n  scrollBy(t, r, e) {\n    if (this._pauseScrollAnimation(), !e || !e.duration) {\n      let o = this.getScrollLeft(), a = this.getScrollTop();\n      return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this._scrollTo(o + t, a + r, e);\n    } else\n      return this._startScrollAnimation([t, r], e), !0;\n  }\n  /**\n   * Scrolls the container to set of coordinates.\n   * @param scrollLeft\n   * @param scrollTop\n   */\n  scrollTo(t, r, e) {\n    if (this._pauseScrollAnimation(), !e || !e.duration)\n      return this._scrollTo(t, r, e);\n    {\n      let o = this.getScrollLeft(), a = this.getScrollTop();\n      return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this.scrollBy(t - o, r - a, e);\n    }\n  }\n  /**\n   * Set viewer zoom by the given amount\n   */\n  zoomBy(t, r) {\n    this._pauseZoomAnimation();\n    const [e, o] = vt(t) ? t : [t, t];\n    !r || !r.duration ? this._setZoom([this.zoomX + e, this.zoomY + o], r) : this._startZoomAnimation([e, o], r);\n  }\n  /**\n   * Set viewer zoom\n   */\n  setZoom(t, r) {\n    if (this._pauseZoomAnimation(), !r || !r.duration)\n      this._setZoom(t, r);\n    else {\n      const [e, o] = vt(t) ? t : [t, t];\n      this._startZoomAnimation(\n        [e - this.zoomX, o - this.zoomY],\n        r\n      );\n    }\n  }\n  getViewportWidth() {\n    return this.viewportWidth;\n  }\n  getViewportHeight() {\n    return this.viewportWidth;\n  }\n  getViewportScrollWidth() {\n    return this.viewportScrollWidth;\n  }\n  getViewportScrollHeight() {\n    return this.viewportScrollHeight;\n  }\n  getContainerWidth() {\n    return this.containerWidth;\n  }\n  getContainerHeight() {\n    return this.containerHeight;\n  }\n  /**\n   * Get viewer zoom\n   */\n  getZoom() {\n    return (this.zoomX + this.zoomY) / 2;\n  }\n  /**\n   * Get viewer zoomX\n   * @since 0.20.0\n   */\n  getZoomX() {\n    return this.zoomX;\n  }\n  /**\n   * Get viewer zoom\n   * @since 0.20.0\n   */\n  getZoomY() {\n    return this.zoomY;\n  }\n  /**\n   * get x ranges\n   */\n  getRangeX(t, r) {\n    return this._getRangeCoord(\"horizontal\", t, r);\n  }\n  /**\n   * get y ranges\n   */\n  getRangeY(t, r) {\n    return this._getRangeCoord(\"vertical\", t, r);\n  }\n  init() {\n    const t = this._containerElement, r = this.options, e = Nt(t), o = ot(t);\n    let a = r.wrapperElement || t.querySelector(`.${we}`), l = r.scrollAreaElement || t.querySelector(`.${be}`);\n    const h = r.horizontalScrollElement || t.querySelector(`.${Ne}`), u = r.verticalScrollElement || t.querySelector(`.${Ze}`);\n    a || (a = e.createElement(\"div\"), a.insertBefore(this._viewportElement, null), t.insertBefore(a, null)), this.wrapperElement = a, l || (l = e.createElement(\"div\"), a.insertBefore(l, a.firstChild)), this.scrollAreaElement = l, it(t, qe), it(a, we), it(l, be);\n    const d = new De(\n      t,\n      \"horizontal\",\n      h\n    ), v = new De(\n      t,\n      \"vertical\",\n      u\n    );\n    this.horizontalScrollbar = d, this.verticalScrollbar = v, d.on(\"scroll\", (p) => {\n      this.scrollBy(p.delta / this.zoomX, 0);\n    }), v.on(\"scroll\", (p) => {\n      this.scrollBy(0, p.delta / this.zoomY);\n    }), d.isAppend && t.insertBefore(d.barElement, null), v.isAppend && t.insertBefore(v.barElement, null), this.injectResult = Ue.inject(t, {\n      nonce: this.options.cspNonce\n    });\n    const c = r.wheelContainer;\n    let m = null;\n    if (c && (Oe(c) ? m = e.querySelector(c) : _e(c) ? m = c : (\"value\" in c || \"current\" in c) && (m = c.current || c.value)), m || (m = t), this._wheelContainerElement = m, this.gesto = new We(t, {\n      container: ot(t),\n      events: [\"touch\", \"mouse\"],\n      preventWheelClick: this.options.preventWheelClick ?? !0\n    }).on(\"dragStart\", (p) => {\n      const { inputEvent: S, stop: T, datas: z } = p;\n      if (!this.useMouseDrag && p.isMouseEvent) {\n        T();\n        return;\n      }\n      if (this._pauseScrollAnimation(), this.dragFlag = !1, this.trigger(\"dragStart\", p) === !1) {\n        T();\n        return;\n      }\n      S.preventDefault(), z.startEvent = S;\n    }).on(\"drag\", (p) => {\n      !this.options.usePinch || p.isPinch || this.useMouseDrag && p.isMouseEvent ? (this.trigger(\"drag\", {\n        ...p,\n        inputEvent: p.inputEvent\n      }), pn(p), this.scrollBy(-p.deltaX / this.zoomX, -p.deltaY / this.zoomY)) : !this.dragFlag && p.movement > r.pinchThreshold && (this.dragFlag = !0, this.trigger(\"abortPinch\", {\n        inputEvent: p.datas.startEvent || p.inputEvent\n      }));\n    }).on(\"dragEnd\", (p) => {\n      this.trigger(\"dragEnd\", {\n        isDrag: p.isDrag,\n        isDouble: p.isDouble,\n        inputEvent: p.inputEvent\n      }), this._startScrollAnimationBySpeed(p.datas.speed);\n    }).on(\"pinchStart\", ({ inputEvent: p, datas: S, stop: T }) => {\n      p.preventDefault(), this._pauseScrollAnimation(), S.startZoom = [this.zoomX, this.zoomY], this.trigger(\"pinchStart\", {\n        inputEvent: p\n      }) === !1 && T(), this._setClientRect();\n    }).on(\"pinch\", (p) => {\n      const S = p.scale, T = this.options.pinchDirection;\n      this._triggerPinch({\n        rotation: p.rotation,\n        distance: p.distance,\n        scale: p.scale,\n        inputEvent: p.inputEvent,\n        isWheel: !1,\n        zoom: p.datas.startZoom * S,\n        zoomX: this.zoomX * (T === \"vertical\" ? 1 : S),\n        zoomY: this.zoomY * (T === \"horizontal\" ? 1 : S),\n        clientX: p.clientX,\n        clientY: p.clientY,\n        ratioX: 0,\n        ratioY: 0\n      });\n    }).on(\"pinchEnd\", () => {\n      this._tempRect = null;\n    }), O(a, \"scroll\", this._onScroll), r.useResizeObserver) {\n      const p = new o.ResizeObserver(() => {\n        this.resize();\n      });\n      p.observe(this._viewportElement), p.observe(this._containerElement), this._onDestroys.push(() => {\n        p.disconnect();\n      });\n    } else\n      O(o, \"resize\", this.resize), this._onDestroys.push(() => {\n        Y(o, \"resize\", this.resize);\n      });\n    (r.useWheelPinch || r.useWheelScroll) && O(m, \"wheel\", this.onWheel, {\n      passive: !1\n    }), r.useGesture && (O(t, \"gesturestart\", this.onGestureStart, {\n      passive: !1\n    }), O(t, \"gesturechange\", this.onGestureChange, {\n      passive: !1\n    })), this.resize();\n  }\n  render() {\n    const {\n      offsetX: t,\n      offsetY: r,\n      zoomX: e = I.zoomX,\n      zoomY: o = I.zoomY,\n      translateZ: a = 0,\n      rangeX: l,\n      rangeY: h,\n      containerWidth: u,\n      containerHeight: d\n    } = this, { useTransform: v = I.useTransform } = this.options;\n    let c = -t * e, m = -r * o;\n    this.scrollAreaElement.style.cssText = `width:calc(100% + ${this.getScrollAreaWidth()}px);height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n    const p = this._viewportElement.style;\n    v === !1 ? p.cssText += `position: relative; left: ${c}px; top: ${m}px; ` : p.cssText += `transform-origin: 0 0;transform:translate3d(${c}px, ${m}px, ${a}px) scale(${e}, ${o});`, this.renderScroll();\n  }\n  renderScroll() {\n    const { zoomX: t, zoomY: r, containerWidth: e, containerHeight: o } = this, a = this.horizontalScrollbar, l = this.verticalScrollbar;\n    if (this.options.useBounceScrollBar) {\n      const h = this.getScrollLeft(!0) * t, u = this.getRangeX(!0), d = e + U(u[0]) + U(u[1]), v = this.getScrollTop(!0) * r, c = this.getRangeY(!0), m = o + U(c[0]) + U(c[1]);\n      a.render(\n        this.displayHorizontalScroll,\n        h,\n        e,\n        d\n      ), l.render(\n        this.displayVerticalScroll,\n        v,\n        o,\n        m\n      );\n    } else {\n      const h = this._getScrollRangeX(), u = this._getScrollRangeY(), d = this.getScrollLeft(), v = this.getScrollTop(), c = this.containerWidth + U(h[0]) + h[1], m = this.containerHeight + U(u[0]) + u[1];\n      a.render(\n        this.displayHorizontalScroll,\n        d - h[0],\n        e,\n        c\n      ), l.render(\n        this.displayVerticalScroll,\n        v - u[0],\n        o,\n        m\n      );\n    }\n  }\n  move(t, r) {\n    const e = this.wrapperElement;\n    e.scrollLeft = t, e.scrollTop = r;\n  }\n  setDisplayVerticalScroll(t) {\n    this.options.displayVerticalScroll = t, this.renderScroll();\n  }\n  setDisplayHorizontalScroll(t) {\n    this.options.displayHorizontalScroll = t, this.renderScroll();\n  }\n  _startZoomAnimation(t, r) {\n    if (!t)\n      return;\n    const e = r.duration, o = r.easing || Ce;\n    Re(\n      (a) => this._setZoom(\n        [this.zoomX + t[0] * a, this.zoomY + t[1] * a],\n        r\n      ),\n      (a) => {\n        this._zoomTimer = requestAnimationFrame(a);\n      },\n      {\n        easing: o,\n        duration: e\n      }\n    );\n  }\n  _startScrollAnimation(t, r) {\n    if (!t[0] && !t[1])\n      return;\n    const e = r.duration, o = r.easing || Ce;\n    Re(\n      (a) => this._scrollBy(t[0] * a, t[1] * a, r),\n      (a) => {\n        this._scrollTimer = requestAnimationFrame(a);\n      },\n      {\n        easing: o,\n        duration: e\n      }\n    );\n  }\n  _startScrollAnimationBySpeed(t) {\n    if (!t || !t[0] && !t[1])\n      return;\n    const r = -6e-4, e = Ke(t, r), o = gn(t, r);\n    return this._startScrollAnimation(o, {\n      duration: e\n    });\n  }\n  _pauseScrollAnimation() {\n    cancelAnimationFrame(this._scrollTimer), this._scrollTimer = 0;\n  }\n  _pauseZoomAnimation() {\n    cancelAnimationFrame(this._zoomTimer), this._zoomTimer = 0;\n  }\n  getScrollAreaWidth() {\n    const [t, r] = this.getRangeX(!0);\n    return t || r ? this.margin * 2 : 0;\n  }\n  getScrollAreaHeight() {\n    const [t, r] = this.getRangeY(!0);\n    return t || r ? this.margin * 2 : 0;\n  }\n  _triggerPinch(t) {\n    const { clientX: r, clientY: e, zoomX: o, zoomY: a } = t;\n    this.useAutoZoom && this._zoomByClient([o, a], r, e), this._tempRect || this._setClientRect();\n    const l = this.zoomRange, h = this.zoomRangeX || l, u = this.zoomRangeY || l, { left: d, top: v, width: c, height: m } = this._tempRect, p = (r - d) / c * 100, S = (e - v) / m * 100;\n    this.trigger(\"pinch\", {\n      ...t,\n      zoom: tt((o + a) / 2, l[0], l[1]),\n      zoomX: tt(o, h[0], h[1]),\n      zoomY: tt(a, u[0], u[1]),\n      ratioX: p,\n      ratioY: S\n    });\n  }\n  _setClientRect() {\n    const t = this.getContainer().getBoundingClientRect();\n    this._tempRect = {\n      left: t.left,\n      top: t.top,\n      width: t.width,\n      height: t.height\n    };\n  }\n  _zoomByClient(t, r, e) {\n    this._tempRect || this._setClientRect();\n    const { left: o, top: a, width: l, height: h } = this._tempRect, u = this.options, d = u.zoomOffsetX, v = u.zoomOffsetY;\n    u.zoomOffsetX = `${(r - o) / l * 100}%`, u.zoomOffsetY = `${(e - a) / h * 100}%`, this._setZoom(t, {\n      zoomBase: \"screen\"\n    }), u.zoomOffsetX = d, u.zoomOffsetY = v;\n  }\n  _setZoom(t, r = {}) {\n    const e = r.zoomBase, {\n      containerWidth: o,\n      containerHeight: a,\n      zoomX: l,\n      zoomY: h,\n      zoomRange: u\n    } = this;\n    let {\n      zoomOffsetX: d = I.zoomOffsetX,\n      zoomOffsetY: v = I.zoomOffsetY\n    } = this;\n    \"zoomOffsetX\" in r && (d = r.zoomOffsetX), \"zoomOffsetY\" in r && (v = r.zoomOffsetY);\n    const c = this.getScrollLeft(), m = this.getScrollTop(), [p, S] = vt(t) ? t : [t, t], T = this.zoomRangeX || u, z = this.zoomRangeY || u, b = tt(p, T[0], T[1]), W = tt(S, z[0], z[1]), k = this.options;\n    k.zoomX = b, k.zoomY = W, k.zoom = (b + W) / 2;\n    const H = this.getScrollLeft(), V = this.getScrollTop();\n    let C = 0, P = 0;\n    e === \"fixed\" ? (C = G(`${d}`, this.viewportWidth), P = G(`${v}`, this.viewportHeight)) : e === \"viewport\" ? (C = (-c + G(`${d}`, this.viewportWidth)) * l, P = (-m + G(`${v}`, this.viewportHeight)) * h) : (C = G(`${d}`, o), P = G(`${v}`, a));\n    const L = c + C / l, q = m + P / h, Z = H + C / b, F = V + P / W;\n    this._scrollBy(L - Z, q - F, {\n      zoom: !!(b - l || W - h)\n    }), this.render();\n  }\n  _scrollBy(t, r, e) {\n    let o = this.getScrollLeft(), a = this.getScrollTop();\n    return e != null && e.absolute && (o *= this.zoomX, a *= this.zoomY), this._scrollTo(o + t, a + r, e);\n  }\n  _scrollTo(t, r, e) {\n    const { scrollLeft: o, scrollTop: a } = this, l = e == null ? void 0 : e.absolute;\n    this._scrollToType(\"horizontal\", t, l), this._scrollToType(\"vertical\", r, l);\n    const h = this.scrollLeft, u = this.scrollTop;\n    this.render();\n    const d = this.getScrollLeft(), v = this.getScrollTop();\n    return this._emitScrollEvent(\n      d,\n      v,\n      e == null ? void 0 : e.zoom\n    ), Math.round(o) !== h || Math.round(a) !== u ? (this.isLoop = !0, this.move(h, u), requestAnimationFrame(() => {\n      if (!this.isLoop)\n        return;\n      this.isLoop = !1;\n      const { scrollLeft: c, scrollTop: m } = this.wrapperElement;\n      this.scrollLeft = c, this.scrollTop = m, (h !== Math.round(c) || u !== Math.round(m)) && this._scrollTo(d, v);\n    }), !1) : !0;\n  }\n  _scrollToType(t, r, e) {\n    const o = Te[t], {\n      margin: a = I.margin,\n      threshold: l = I.threshold\n    } = this, h = this[`scroll${o.pos}`], [u, d] = this[`getRange${o.coord}`](!0, !0);\n    let v = Math.round(h);\n    const c = this[`getScrollArea${o.size}`](), m = this[`zoom${o.coord}`];\n    e && (r = r / m);\n    const p = r * m;\n    if (u === d)\n      v = u, r = u / m;\n    else if (p - l <= u) {\n      const S = Math.max(0, p - u);\n      v = S, r = (u + S) / m;\n    } else if (p + l >= d) {\n      const S = Math.max(0, d - p);\n      v = c - S, r = (d - S) / m;\n    } else v < l ? v += a : v > c - l && (v -= a);\n    v = Math.round(v), this[`scroll${o.pos}`] = v, this[`offset${o.coord}`] = r - v / m;\n  }\n  _getRangeCoord(t, r, e) {\n    const { margin: o = I.margin, threshold: a } = this, l = Te[t], h = ze(\n      this[`range${l.coord}`],\n      I[`range${l.coord}`]\n    ), u = ze(\n      this[`rangeOffset${l.coord}`],\n      I[`rangeOffset${l.coord}`]\n    ), d = this[`zoom${l.coord}`], v = mn(\n      this[`getScroll${l.pos}`](),\n      o,\n      h,\n      a,\n      e\n    );\n    return r ? [\n      v[0] * d + u[0],\n      this.options.useOverflowScroll ? Math.max(\n        this[`viewport${l.size}`] * d - this[`container${l.size}`],\n        v[1] * d + u[1]\n      ) : v[1] * d + u[1]\n    ] : [v[0] + u[0], v[1] + u[1]];\n  }\n  _emitScrollEvent(t, r, e) {\n    const o = this._asLeft, a = this._asTop;\n    !e && o === t && a === r || (this._asLeft = t, this._asTop = r, this.trigger(\"scroll\", {\n      scrollLeft: t,\n      scrollTop: r,\n      zoomX: this.zoomX,\n      zoomY: this.zoomY\n    }));\n  }\n  _getScrollRangeX() {\n    const t = this.getScrollLeft(), r = this.rangeX, e = r[0];\n    let o = r[1];\n    this.useOverflowScroll && isFinite(o) && (o = Math.max(\n      o,\n      this.viewportWidth - this.containerWidth / this.zoomX\n    ));\n    const a = Math.min(\n      0,\n      isFinite(e) ? Math.min(e, t) : t\n    ), l = Math.max(\n      0,\n      isFinite(o) ? Math.max(o, t) : t\n    ), h = this.viewportScrollWidth, u = Math.max(this.containerWidth / this.zoomX, h) - h;\n    return [Math.min(0, u + a), l];\n  }\n  _getScrollRangeY() {\n    const t = this.getScrollTop(), r = this.rangeY, e = r[0];\n    let o = r[1];\n    this.useOverflowScroll && isFinite(o) && (o = Math.max(\n      o,\n      this.viewportHeight - this.containerHeight / this.zoomY\n    ));\n    const a = Math.min(\n      0,\n      isFinite(e) ? Math.min(e, t) : t\n    ), l = Math.max(\n      0,\n      isFinite(o) ? Math.max(o, t) : t\n    ), h = this.viewportScrollHeight, u = Math.max(this.containerHeight / this.zoomY, h) - h;\n    return [Math.min(0, u + a), l];\n  }\n};\nHt.addProperties(Gt, Ht.prototype);\nlet _n = class extends Ht {\n};\nconst Ye = Ge.map((i) => Ae(`on ${i}`));\nclass Cn extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n  constructor() {\n    super(...arguments);\n    _(this, \"infiniteViewer\");\n    _(this, \"containerElement\");\n    _(this, \"wrapperElement\");\n    _(this, \"scrollAreaElement\");\n    _(this, \"horizontalScrollElement\");\n    _(this, \"verticalScrollElement\");\n  }\n  render() {\n    const t = this.props.className;\n    return /* @__PURE__ */ Q.jsxs(\n      \"div\",\n      {\n        className: `${t || \"\"} ${qe}`,\n        ref: dt(this, \"containerElement\"),\n        children: [\n          /* @__PURE__ */ Q.jsxs(\n            \"div\",\n            {\n              className: \"infinite-viewer-wrapper\",\n              ref: dt(this, \"wrapperElement\"),\n              children: [\n                /* @__PURE__ */ Q.jsx(\n                  \"div\",\n                  {\n                    className: \"infinite-viewer-scroll-area\",\n                    ref: dt(this, \"scrollAreaElement\")\n                  }\n                ),\n                this.props.children\n              ]\n            }\n          ),\n          /* @__PURE__ */ Q.jsx(\n            \"div\",\n            {\n              className: \"infinite-viewer-scroll-bar infinite-viewer-horizontal-scroll-bar\",\n              ref: dt(this, \"horizontalScrollElement\"),\n              children: /* @__PURE__ */ Q.jsx(\"div\", { className: \"infinite-viewer-scroll-thumb\" })\n            }\n          ),\n          /* @__PURE__ */ Q.jsx(\n            \"div\",\n            {\n              className: \"infinite-viewer-scroll-bar infinite-viewer-vertical-scroll-bar\",\n              ref: dt(this, \"verticalScrollElement\"),\n              children: /* @__PURE__ */ Q.jsx(\"div\", { className: \"infinite-viewer-scroll-thumb\" })\n            }\n          )\n        ]\n      }\n    );\n  }\n  componentDidMount() {\n    const t = this.props, r = {};\n    vn.forEach((e) => {\n      e in t && typeof t[e] < \"u\" && (r[e] = t[e]);\n    }), this.infiniteViewer = new _n(\n      this.containerElement,\n      this.scrollAreaElement.nextElementSibling,\n      {\n        ...r,\n        wrapperElement: this.wrapperElement,\n        scrollAreaElement: this.scrollAreaElement,\n        horizontalScrollElement: this.horizontalScrollElement,\n        verticalScrollElement: this.verticalScrollElement\n      }\n    ), Ge.forEach((e, o) => {\n      this.infiniteViewer.on(e, (a) => {\n        const l = this.props;\n        (l[Ye[o]] && l[Ye[o]](a)) === !1 && a.stop();\n      });\n    });\n  }\n  componentDidUpdate() {\n    const t = this.props, r = this.infiniteViewer;\n    Gt.forEach((e) => {\n      e in t && r[e] !== t[e] && (r[e] = t[e]);\n    });\n  }\n  componentWillUnmount() {\n    this.infiniteViewer.destroy();\n  }\n  getElement() {\n    return this.containerElement;\n  }\n}\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@interactify/infinite-viewer/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@interactify/moveable/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@interactify/moveable/dist/index.es.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Clippable: () => (/* binding */ tf),\n/* harmony export */   DIRECTIONS: () => (/* binding */ Xr),\n/* harmony export */   Draggable: () => (/* binding */ Ot),\n/* harmony export */   EdgeDraggable: () => (/* binding */ Rf),\n/* harmony export */   InitialMoveable: () => (/* binding */ on),\n/* harmony export */   MOVEABLE_ABLES: () => (/* binding */ Ps),\n/* harmony export */   MOVEABLE_EVENTS: () => (/* binding */ Bf),\n/* harmony export */   MOVEABLE_METHODS: () => (/* binding */ wf),\n/* harmony export */   MOVEABLE_PROPS: () => (/* binding */ zf),\n/* harmony export */   Pinchable: () => (/* binding */ bu),\n/* harmony export */   Resizable: () => (/* binding */ Tr),\n/* harmony export */   Rotatable: () => (/* binding */ wl),\n/* harmony export */   Roundable: () => (/* binding */ of),\n/* harmony export */   Scalable: () => (/* binding */ yu),\n/* harmony export */   Snappable: () => (/* binding */ su),\n/* harmony export */   Warpable: () => (/* binding */ Mu),\n/* harmony export */   calculateElementPosition: () => (/* binding */ ke),\n/* harmony export */   \"default\": () => (/* binding */ _f),\n/* harmony export */   getElementInfo: () => (/* binding */ If),\n/* harmony export */   makeAble: () => (/* binding */ dn),\n/* harmony export */   makeMoveable: () => (/* binding */ Gf)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar $a = Object.defineProperty;\nvar Fa = (t, e, n) => e in t ? $a(t, e, { enumerable: !0, configurable: !0, writable: !0, value: n }) : t[e] = n;\nvar X = (t, e, n) => Fa(t, typeof e != \"symbol\" ? e + \"\" : e, n);\n\n\nfunction dn(t, e) {\n  return {\n    events: [],\n    props: [],\n    name: t,\n    ...e\n  };\n}\nfunction Vr(t, e) {\n  for (var n = t.length, r = 0; r < n; ++r)\n    if (e(t[r], r))\n      return !0;\n  return !1;\n}\nfunction Oo(t, e) {\n  for (var n = t.length, r = 0; r < n; ++r)\n    if (e(t[r], r))\n      return t[r];\n  return null;\n}\nfunction wo(t) {\n  var e = t;\n  if (typeof e > \"u\") {\n    if (typeof navigator > \"u\" || !navigator)\n      return \"\";\n    e = navigator.userAgent || \"\";\n  }\n  return e.toLowerCase();\n}\nfunction jr(t, e) {\n  try {\n    return new RegExp(t, \"g\").exec(e);\n  } catch {\n    return null;\n  }\n}\nfunction Va() {\n  if (typeof navigator > \"u\" || !navigator || !navigator.userAgentData)\n    return !1;\n  var t = navigator.userAgentData, e = t.brands || t.uaList;\n  return !!(e && e.length);\n}\nfunction ja(t, e) {\n  var n = jr(\"(\" + t + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))\", e);\n  return n ? n[3] : \"\";\n}\nfunction Sr(t) {\n  return t.replace(/_/g, \".\");\n}\nfunction Ke(t, e) {\n  var n = null, r = \"-1\";\n  return Vr(t, function(s) {\n    var o = jr(\"(\" + s.test + \")((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?\", e);\n    return !o || s.brand ? !1 : (n = s, r = o[3] || \"-1\", s.versionAlias ? r = s.versionAlias : s.versionTest && (r = ja(s.versionTest.toLowerCase(), e) || r), r = Sr(r), !0);\n  }), {\n    preset: n,\n    version: r\n  };\n}\nfunction xn(t, e) {\n  var n = {\n    brand: \"\",\n    version: \"-1\"\n  };\n  return Vr(t, function(r) {\n    var s = Io(e, r);\n    return s ? (n.brand = r.id, n.version = r.versionAlias || s.version, n.version !== \"-1\") : !1;\n  }), n;\n}\nfunction Io(t, e) {\n  return Oo(t, function(n) {\n    var r = n.brand;\n    return jr(\"\" + e.test, r.toLowerCase());\n  });\n}\nvar Bo = [{\n  test: \"phantomjs\",\n  id: \"phantomjs\"\n}, {\n  test: \"whale\",\n  id: \"whale\"\n}, {\n  test: \"edgios|edge|edg\",\n  id: \"edge\"\n}, {\n  test: \"msie|trident|windows phone\",\n  id: \"ie\",\n  versionTest: \"iemobile|msie|rv\"\n}, {\n  test: \"miuibrowser\",\n  id: \"miui browser\"\n}, {\n  test: \"samsungbrowser\",\n  id: \"samsung internet\"\n}, {\n  test: \"samsung\",\n  id: \"samsung internet\",\n  versionTest: \"version\"\n}, {\n  test: \"chrome|crios\",\n  id: \"chrome\"\n}, {\n  test: \"firefox|fxios\",\n  id: \"firefox\"\n}, {\n  test: \"android\",\n  id: \"android browser\",\n  versionTest: \"version\"\n}, {\n  test: \"safari|iphone|ipad|ipod\",\n  id: \"safari\",\n  versionTest: \"version\"\n}], zo = [{\n  test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n  id: \"chrome\",\n  versionTest: \"chrome\"\n}, {\n  test: \"chromium\",\n  id: \"chrome\"\n}, {\n  test: \"whale\",\n  id: \"chrome\",\n  versionAlias: \"-1\",\n  brand: !0\n}], Er = [{\n  test: \"applewebkit\",\n  id: \"webkit\",\n  versionTest: \"applewebkit|safari\"\n}], Ao = [{\n  test: \"(?=(iphone|ipad))(?!(.*version))\",\n  id: \"webview\"\n}, {\n  test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n  id: \"webview\"\n}, {\n  // test webview\n  test: \"webview\",\n  id: \"webview\"\n}], Go = [{\n  test: \"windows phone\",\n  id: \"windows phone\"\n}, {\n  test: \"windows 2000\",\n  id: \"window\",\n  versionAlias: \"5.0\"\n}, {\n  test: \"windows nt\",\n  id: \"window\"\n}, {\n  test: \"win32|windows\",\n  id: \"window\"\n}, {\n  test: \"iphone|ipad|ipod\",\n  id: \"ios\",\n  versionTest: \"iphone os|cpu os\"\n}, {\n  test: \"macos|macintel|mac os x\",\n  id: \"mac\"\n}, {\n  test: \"android|linux armv81\",\n  id: \"android\"\n}, {\n  test: \"tizen\",\n  id: \"tizen\"\n}, {\n  test: \"webos|web0s\",\n  id: \"webos\"\n}];\nfunction ko(t) {\n  return !!Ke(Ao, t).preset;\n}\nfunction Xa(t) {\n  var e = wo(t), n = !!/mobi/g.exec(e), r = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1,\n    webview: ko(e),\n    chromium: !1,\n    chromiumVersion: \"-1\",\n    webkit: !1,\n    webkitVersion: \"-1\"\n  }, s = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  }, o = Ke(Bo, e), i = o.preset, a = o.version, c = Ke(Go, e), l = c.preset, u = c.version, f = Ke(zo, e);\n  if (r.chromium = !!f.preset, r.chromiumVersion = f.version, !r.chromium) {\n    var d = Ke(Er, e);\n    r.webkit = !!d.preset, r.webkitVersion = d.version;\n  }\n  return l && (s.name = l.id, s.version = u, s.majorVersion = parseInt(u, 10)), i && (r.name = i.id, r.version = a, r.webview && s.name === \"ios\" && r.name !== \"safari\" && (r.webview = !1)), r.majorVersion = parseInt(r.version, 10), {\n    browser: r,\n    os: s,\n    isMobile: n,\n    isHints: !1\n  };\n}\nfunction Ha(t) {\n  var e = navigator.userAgentData, n = (e.uaList || e.brands).slice(), r = e.mobile || !1, s = n[0], o = (e.platform || navigator.platform).toLowerCase(), i = {\n    name: s.brand,\n    version: s.version,\n    majorVersion: -1,\n    webkit: !1,\n    webkitVersion: \"-1\",\n    chromium: !1,\n    chromiumVersion: \"-1\",\n    webview: !!xn(Ao, n).brand || ko(wo())\n  }, a = {\n    name: \"unknown\",\n    version: \"-1\",\n    majorVersion: -1\n  };\n  i.webkit = !i.chromium && Vr(Er, function(d) {\n    return Io(n, d);\n  });\n  var c = xn(zo, n);\n  if (i.chromium = !!c.brand, i.chromiumVersion = c.version, !i.chromium) {\n    var l = xn(Er, n);\n    i.webkit = !!l.brand, i.webkitVersion = l.version;\n  }\n  var u = Oo(Go, function(d) {\n    return new RegExp(\"\" + d.test, \"g\").exec(o);\n  });\n  a.name = u ? u.id : \"\";\n  {\n    var f = xn(Bo, n);\n    i.name = f.brand || i.name, i.version = f.brand && t ? t.uaFullVersion : f.version;\n  }\n  return i.webkit && (a.name = r ? \"ios\" : \"mac\"), a.name === \"ios\" && i.webview && (i.version = \"-1\"), a.version = Sr(a.version), i.version = Sr(i.version), a.majorVersion = parseInt(a.version, 10), i.majorVersion = parseInt(i.version, 10), {\n    browser: i,\n    os: a,\n    isMobile: r,\n    isHints: !0\n  };\n}\nfunction qa(t) {\n  return Va() ? Ha() : Xa(t);\n}\nconst Ua = [\"n\", \"w\", \"s\", \"e\"], Xr = [\"n\", \"w\", \"s\", \"e\", \"nw\", \"ne\", \"sw\", \"se\"];\nfunction Ka(t, e) {\n  return `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${32 * t}px\" height=\"${32 * t}px\" viewBox=\"0 0 32 32\" ><path d=\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\" stroke-linejoin=\"round\" stroke-width=\"1.2\" fill=\"black\" stroke=\"white\" style=\"transform:rotate(${e}deg);transform-origin: 16px 16px\"></path></svg>`;\n}\nfunction Za(t) {\n  const e = Ka(1, t), n = Math.round(t / 45) * 45 % 180;\n  let r = \"ns-resize\";\n  return n === 135 ? r = \"nwse-resize\" : n === 45 ? r = \"nesw-resize\" : n === 90 && (r = \"ew-resize\"), `cursor:${r};cursor: url('${e}') 16 16, ${r};`;\n}\nconst Ye = qa(), $o = Ye.browser.webkit, Fo = $o && (() => {\n  const t = typeof window > \"u\" ? { userAgent: \"\" } : window.navigator, e = /applewebkit\\/([^\\s]+)/g.exec(t.userAgent.toLowerCase());\n  return e ? parseFloat(e[1]) < 605 : !1;\n})(), Lo = Ye.browser.name, No = parseInt(Ye.browser.version, 10), Ja = Lo === \"chrome\", Qa = Ye.browser.chromium, tc = parseInt(Ye.browser.chromiumVersion, 10) || 0, ec = Ja && No >= 109 || Qa && tc >= 109, nc = Lo === \"firefox\", rc = parseInt(Ye.browser.webkitVersion, 10) >= 612 || No >= 15, Hr = \"moveable-\", sc = Xr.map((t) => {\n  let e = \"\", n = \"\", r = \"center\", s = \"center\";\n  const o = \"calc(var(--moveable-control-padding, 20) * -1px)\";\n  return t.indexOf(\"n\") > -1 && (e = `top: ${o};`, s = \"bottom\"), t.indexOf(\"s\") > -1 && (e = \"top: 0px;\", s = \"top\"), t.indexOf(\"w\") > -1 && (n = `left: ${o};`, r = \"right\"), t.indexOf(\"e\") > -1 && (n = \"left: 0px;\", r = \"left\"), `.around-control[data-direction*=\"${t}\"] {\n        ${n}${e}\n        transform-origin: ${r} ${s};\n    }`;\n}).join(`\n`), oc = `\n{\nposition: absolute;\nwidth: 1px;\nheight: 1px;\nleft: 0;\ntop: 0;\nz-index: 3000;\n--moveable-color: #4af;\n--zoom: 1;\n--zoompx: 1px;\n--moveable-line-padding: 0;\n--moveable-control-padding: 0;\nwill-change: transform;\noutline: 1px solid transparent;\n}\n.control-box {\nz-index: 0;\n}\n.line, .control {\nposition: absolute;\nleft: 0;\ntop: 0;\nwill-change: transform;\n}\n.control {\nwidth: 14px;\nheight: 14px;\nborder-radius: 50%;\nborder: 2px solid #fff;\nbox-sizing: border-box;\nbackground: #4af;\nbackground: var(--moveable-color);\nmargin-top: -7px;\nmargin-left: -7px;\nborder: 2px solid #fff;\nz-index: 10;\n}\n.around-control {\nposition: absolute;\nwill-change: transform;\nwidth: calc(var(--moveable-control-padding, 20) * 1px);\nheight: calc(var(--moveable-control-padding, 20) * 1px);\nleft: calc(var(--moveable-control-padding, 20) * -0.5px);\ntop: calc(var(--moveable-control-padding, 20) * -0.5px);\nbox-sizing: border-box;\nbackground: transparent;\nz-index: 8;\ncursor: alias;\ntransform-origin: center center;\n}\n${sc}\n.padding {\nposition: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 100px;\nheight: 100px;\ntransform-origin: 0 0;\n}\n.line {\nwidth: 1px;\nheight: 1px;\nbackground: #4af;\nbackground: var(--moveable-color);\ntransform-origin: 0px 50%;\n}\n.line.edge {\nz-index: 1;\nbackground: transparent;\n}\n.line.dashed {\nbox-sizing: border-box;\nbackground: transparent;\n}\n.line.dashed.horizontal {\nborder-top: 1px dashed #4af;\nborder-top-color: #4af;\nborder-top-color: var(--moveable-color);\n}\n.line.dashed.vertical {\nborder-left: 1px dashed #4af;\nborder-left-color: #4af;\nborder-left-color: var(--moveable-color);\n}\n.line.vertical {\ntransform: translateX(-50%);\n}\n.line.horizontal {\ntransform: translateY(-50%);\n}\n.line.vertical.bold {\nwidth: 2px;\n}\n.line.horizontal.bold {\nheight: 2px;\n}\n\n.control.origin {\nborder-color: #f55;\nbackground: #fff;\nwidth: 12px;\nheight: 12px;\nmargin-top: -6px;\nmargin-left: -6px;\npointer-events: none;\n}\n${[0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map((t) => `\n.direction[data-rotation=\"${t}\"], :global .view-control-rotation${t} {\n${Za(t)}\n}\n`).join(`\n`)}\n\n.line.direction:before {\ncontent: \"\";\nposition: absolute;\nwidth: 100%;\nheight: calc(var(--moveable-line-padding, 0) * 1px);\nbottom: 0;\nleft: 0;\n}\n.group {\nz-index: -1;\n}\n.area {\nposition: absolute;\n}\n.area-pieces {\nposition: absolute;\ntop: 0;\nleft: 0;\ndisplay: none;\n}\n.area.avoid, .area.pass {\npointer-events: none;\n}\n.area.avoid+.area-pieces {\ndisplay: block;\n}\n.area-piece {\nposition: absolute;\n}\n\n${Fo ? `:global svg *:before {\ncontent:\"\";\ntransform-origin: inherit;\n}` : \"\"}\n`, ic = [\n  [0, 1, 2],\n  [1, 0, 3],\n  [2, 0, 3],\n  [3, 1, 2]\n], Cr = 1e-4, Bt = 1e-7, Sn = 1e-9, Dr = Math.pow(10, 10), Fs = -Dr, ac = {\n  n: [0, -1],\n  e: [1, 0],\n  s: [0, 1],\n  w: [-1, 0],\n  nw: [-1, -1],\n  ne: [1, -1],\n  sw: [-1, 1],\n  se: [1, 1]\n}, qr = {\n  n: [0, 1],\n  e: [1, 3],\n  s: [3, 2],\n  w: [2, 0],\n  nw: [0],\n  ne: [1],\n  sw: [2],\n  se: [3]\n}, Wo = {\n  n: 0,\n  s: 180,\n  w: 270,\n  e: 90,\n  nw: 315,\n  ne: 45,\n  sw: 225,\n  se: 135\n}, wf = [\n  \"isMoveableElement\",\n  \"updateRect\",\n  \"updateTarget\",\n  \"destroy\",\n  \"dragStart\",\n  \"isInside\",\n  \"hitTest\",\n  \"setState\",\n  \"getRect\",\n  \"request\",\n  \"isDragging\",\n  \"getManager\",\n  \"forceUpdate\",\n  \"waitToChangeTarget\",\n  \"updateSelectors\",\n  \"getTargets\",\n  \"stopDrag\",\n  \"getControlBoxElement\",\n  \"getMoveables\",\n  \"getDragElement\"\n];\nfunction cc(t, ...e) {\n  return e.map(\n    (n) => n.split(\" \").map((r) => r ? `${t}${r}` : \"\").join(\" \")\n  ).join(\" \");\n}\nfunction lc(t, e) {\n  return e.replace(/([^}{]*){/gm, (n, r) => `${r.replace(/\\.([^{,\\s\\d.]+)/g, `.${t}$1`)}{`);\n}\nfunction Se(t, e) {\n  return (n) => {\n    n && (t[e] = n);\n  };\n}\nfunction Yo(t, e, n) {\n  return (r) => {\n    r && (t[e][n] = r);\n  };\n}\nvar uc = \"function\", fc = \"object\", dc = \"string\", pc = \"number\", Ur = \"undefined\", Vo = typeof window !== Ur, gc = typeof document !== Ur && document, hc = [{\n  open: \"(\",\n  close: \")\"\n}, {\n  open: '\"',\n  close: '\"'\n}, {\n  open: \"'\",\n  close: \"'\"\n}, {\n  open: '\\\\\"',\n  close: '\\\\\"'\n}, {\n  open: \"\\\\'\",\n  close: \"\\\\'\"\n}], Dt = 1e-7, En = {\n  cm: function(t) {\n    return t * 96 / 2.54;\n  },\n  mm: function(t) {\n    return t * 96 / 254;\n  },\n  in: function(t) {\n    return t * 96;\n  },\n  pt: function(t) {\n    return t * 96 / 72;\n  },\n  pc: function(t) {\n    return t * 96 / 6;\n  },\n  \"%\": function(t, e) {\n    return t * e / 100;\n  },\n  vw: function(t, e) {\n    return e === void 0 && (e = window.innerWidth), t / 100 * e;\n  },\n  vh: function(t, e) {\n    return e === void 0 && (e = window.innerHeight), t / 100 * e;\n  },\n  vmax: function(t, e) {\n    return e === void 0 && (e = Math.max(window.innerWidth, window.innerHeight)), t / 100 * e;\n  },\n  vmin: function(t, e) {\n    return e === void 0 && (e = Math.min(window.innerWidth, window.innerHeight)), t / 100 * e;\n  }\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction vc() {\n  for (var t = 0, e = 0, n = arguments.length; e < n; e++) t += arguments[e].length;\n  for (var r = Array(t), s = 0, e = 0; e < n; e++) for (var o = arguments[e], i = 0, a = o.length; i < a; i++, s++) r[s] = o[i];\n  return r;\n}\nfunction zn(t, e, n, r) {\n  return (t * r + e * n) / (n + r);\n}\nfunction Kr(t) {\n  return typeof t === Ur;\n}\nfunction qt(t) {\n  return t && typeof t === fc;\n}\nfunction Rt(t) {\n  return Array.isArray(t);\n}\nfunction re(t) {\n  return typeof t === dc;\n}\nfunction an(t) {\n  return typeof t === pc;\n}\nfunction Zr(t) {\n  return typeof t === uc;\n}\nfunction mc(t, e) {\n  var n = t === \"\" || t == \" \", r = e === \"\" || e == \" \";\n  return r && n || t === e;\n}\nfunction jo(t, e, n, r, s) {\n  var o = Jr(t, e, n);\n  return o ? n : xc(t, e, n + 1, r, s);\n}\nfunction Jr(t, e, n) {\n  if (!t.ignore)\n    return null;\n  var r = e.slice(Math.max(n - 3, 0), n + 3).join(\"\");\n  return new RegExp(t.ignore).exec(r);\n}\nfunction xc(t, e, n, r, s) {\n  for (var o = function(l) {\n    var u = e[l].trim();\n    if (u === t.close && !Jr(t, e, l))\n      return {\n        value: l\n      };\n    var f = l, d = kt(s, function(p) {\n      var g = p.open;\n      return g === u;\n    });\n    if (d && (f = jo(d, e, l, r, s)), f === -1)\n      return i = l, \"break\";\n    l = f, i = l;\n  }, i, a = n; a < r; ++a) {\n    var c = o(a);\n    if (a = i, typeof c == \"object\") return c.value;\n    if (c === \"break\") break;\n  }\n  return -1;\n}\nfunction Qr(t, e) {\n  var n = re(e) ? {\n    separator: e\n  } : e, r = n.separator, s = r === void 0 ? \",\" : r, o = n.isSeparateFirst, i = n.isSeparateOnlyOpenClose, a = n.isSeparateOpenClose, c = a === void 0 ? i : a, l = n.openCloseCharacters, u = l === void 0 ? hc : l, f = u.map(function(R) {\n    var y = R.open, M = R.close;\n    return y === M ? y : y + \"|\" + M;\n  }).join(\"|\"), d = \"(\\\\s*\" + s + \"\\\\s*|\" + f + \"|\\\\s+)\", p = new RegExp(d, \"g\"), g = t.split(p).filter(function(R) {\n    return R && R !== \"undefined\";\n  }), h = g.length, v = [], m = [];\n  function S() {\n    return m.length ? (v.push(m.join(\"\")), m = [], !0) : !1;\n  }\n  for (var x = function(R) {\n    var y = g[R].trim(), M = R, P = kt(u, function(T) {\n      var w = T.open;\n      return w === y;\n    }), _ = kt(u, function(T) {\n      var w = T.close;\n      return w === y;\n    });\n    if (P) {\n      if (M = jo(P, g, R, h, u), M !== -1 && c)\n        return S() && o || (v.push(g.slice(R, M + 1).join(\"\")), R = M, o) ? (C = R, \"break\") : (C = R, \"continue\");\n    } else if (_ && !Jr(_, g, R)) {\n      var O = vc(u);\n      return O.splice(u.indexOf(_), 1), {\n        value: Qr(t, {\n          separator: s,\n          isSeparateFirst: o,\n          isSeparateOnlyOpenClose: i,\n          isSeparateOpenClose: c,\n          openCloseCharacters: O\n        })\n      };\n    } else if (mc(y, s) && !i)\n      return S(), o ? (C = R, \"break\") : (C = R, \"continue\");\n    M === -1 && (M = h - 1), m.push(g.slice(R, M + 1).join(\"\")), R = M, C = R;\n  }, C, E = 0; E < h; ++E) {\n    var D = x(E);\n    if (E = C, typeof D == \"object\") return D.value;\n    if (D === \"break\") break;\n  }\n  return m.length && v.push(m.join(\"\")), v;\n}\nfunction ce(t) {\n  return Qr(t, \"\");\n}\nfunction xe(t) {\n  return Qr(t, \",\");\n}\nfunction Xo(t) {\n  var e = /([^(]*)\\(([\\s\\S]*)\\)([\\s\\S]*)/g.exec(t);\n  return !e || e.length < 4 ? {} : {\n    prefix: e[1],\n    value: e[2],\n    suffix: e[3]\n  };\n}\nfunction pn(t) {\n  var e = /^([^\\d|e|\\-|\\+]*)((?:\\d|\\.|-|e-|e\\+)+)(\\S*)$/g.exec(t);\n  if (!e)\n    return {\n      prefix: \"\",\n      unit: \"\",\n      value: NaN\n    };\n  var n = e[1], r = e[2], s = e[3];\n  return {\n    prefix: n,\n    unit: s,\n    value: parseFloat(r)\n  };\n}\nfunction Sc(t, e) {\n  return t.replace(/([a-z])([A-Z])/g, function(n, r, s) {\n    return \"\" + r + e + s.toLowerCase();\n  });\n}\nfunction cn() {\n  return Date.now ? Date.now() : (/* @__PURE__ */ new Date()).getTime();\n}\nfunction ne(t, e, n) {\n  n === void 0 && (n = -1);\n  for (var r = t.length, s = 0; s < r; ++s)\n    if (e(t[s], s, t))\n      return s;\n  return n;\n}\nfunction kt(t, e, n) {\n  var r = ne(t, e);\n  return r > -1 ? t[r] : n;\n}\nvar Ho = /* @__PURE__ */ function() {\n  var t = cn(), e = Vo && (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame);\n  return e ? e.bind(window) : function(n) {\n    var r = cn(), s = setTimeout(function() {\n      n(r - t);\n    }, 1e3 / 60);\n    return s;\n  };\n}(), Ec = /* @__PURE__ */ function() {\n  var t = Vo && (window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame);\n  return t ? t.bind(window) : function(e) {\n    clearTimeout(e);\n  };\n}();\nfunction Ve(t) {\n  return Object.keys(t);\n}\nfunction ft(t, e) {\n  var n = pn(t), r = n.value, s = n.unit;\n  if (qt(e)) {\n    var o = e[s];\n    if (o) {\n      if (Zr(o))\n        return o(r);\n      if (En[s])\n        return En[s](r, o);\n    }\n  } else if (s === \"%\")\n    return r * e / 100;\n  return En[s] ? En[s](r) : r;\n}\nfunction br(t, e, n) {\n  return Math.max(e, Math.min(t, n));\n}\nfunction Ls(t, e, n, r) {\n  return r === void 0 && (r = t[0] / t[1]), [[tt(e[0], Dt), tt(e[0] / r, Dt)], [tt(e[1] * r, Dt), tt(e[1], Dt)]].filter(function(s) {\n    return s.every(function(o, i) {\n      var a = e[i], c = tt(a, Dt);\n      return n ? o <= a || o <= c : o >= a || o >= c;\n    });\n  })[0] || t;\n}\nfunction qo(t, e, n, r) {\n  if (!r)\n    return t.map(function(p, g) {\n      return br(p, e[g], n[g]);\n    });\n  var s = t[0], o = t[1], i = r === !0 ? s / o : r, a = Ls(t, e, !1, i), c = a[0], l = a[1], u = Ls(t, n, !0, i), f = u[0], d = u[1];\n  return s < c || o < l ? (s = c, o = l) : (s > f || o > d) && (s = f, o = d), [s, o];\n}\nfunction Cc(t) {\n  for (var e = t.length, n = 0, r = e - 1; r >= 0; --r)\n    n += t[r];\n  return n;\n}\nfunction yr(t) {\n  for (var e = t.length, n = 0, r = e - 1; r >= 0; --r)\n    n += t[r];\n  return e ? n / e : 0;\n}\nfunction xt(t, e) {\n  var n = e[0] - t[0], r = e[1] - t[1], s = Math.atan2(r, n);\n  return s >= 0 ? s : s + Math.PI * 2;\n}\nfunction Dc(t) {\n  return [0, 1].map(function(e) {\n    return yr(t.map(function(n) {\n      return n[e];\n    }));\n  });\n}\nfunction Ns(t) {\n  var e = Dc(t), n = xt(e, t[0]), r = xt(e, t[1]);\n  return n < r && r - n < Math.PI || n > r && r - n < -Math.PI ? 1 : -1;\n}\nfunction te(t, e) {\n  return Math.sqrt(Math.pow((e ? e[0] : 0) - t[0], 2) + Math.pow((e ? e[1] : 0) - t[1], 2));\n}\nfunction tt(t, e) {\n  if (!e)\n    return t;\n  var n = 1 / e;\n  return Math.round(t / e) / n;\n}\nfunction Ws(t, e) {\n  return t.forEach(function(n, r) {\n    t[r] = tt(t[r], e);\n  }), t;\n}\nfunction bc(t) {\n  for (var e = [], n = 0; n < t; ++n)\n    e.push(n);\n  return e;\n}\nfunction yc(t) {\n  return t.reduce(function(e, n) {\n    return e.concat(n);\n  }, []);\n}\nfunction Uo(t, e) {\n  t.indexOf(e) === -1 && t.push(e);\n}\nfunction bt(t, e) {\n  return t.classList ? t.classList.contains(e) : !!t.className.match(new RegExp(\"(\\\\s|^)\" + e + \"(\\\\s|$)\"));\n}\nfunction Ko(t, e) {\n  t.classList ? t.classList.add(e) : t.className += \" \" + e;\n}\nfunction Zo(t, e) {\n  if (t.classList)\n    t.classList.remove(e);\n  else {\n    var n = new RegExp(\"(\\\\s|^)\" + e + \"(\\\\s|$)\");\n    t.className = t.className.replace(n, \" \");\n  }\n}\nfunction Pt(t, e, n, r) {\n  t.addEventListener(e, n, r);\n}\nfunction Mt(t, e, n, r) {\n  t.removeEventListener(e, n, r);\n}\nfunction ts(t) {\n  return (t == null ? void 0 : t.ownerDocument) || gc;\n}\nfunction es(t) {\n  return ts(t).documentElement;\n}\nfunction fe(t) {\n  return ts(t).body;\n}\nfunction ae(t) {\n  var e;\n  return ((e = t == null ? void 0 : t.ownerDocument) === null || e === void 0 ? void 0 : e.defaultView) || window;\n}\nfunction Jo(t) {\n  return t && \"postMessage\" in t && \"blur\" in t && \"self\" in t;\n}\nfunction ns(t) {\n  return qt(t) && t.nodeName && t.nodeType && \"ownerDocument\" in t;\n}\nfunction Rc(t, e, n, r, s, o) {\n  for (var i = 0; i < s; ++i) {\n    var a = n + i * s, c = r + i * s;\n    t[a] += t[c] * o, e[a] += e[c] * o;\n  }\n}\nfunction Mc(t, e, n, r, s) {\n  for (var o = 0; o < s; ++o) {\n    var i = n + o * s, a = r + o * s, c = t[i], l = e[i];\n    t[i] = t[a], t[a] = c, e[i] = e[a], e[a] = l;\n  }\n}\nfunction Pc(t, e, n, r, s) {\n  for (var o = 0; o < r; ++o) {\n    var i = n + o * r;\n    t[i] /= s, e[i] /= s;\n  }\n}\nfunction Qo(t, e, n) {\n  for (var r = t.slice(), s = 0; s < n; ++s)\n    r[s * n + e - 1] = 0, r[(e - 1) * n + s] = 0;\n  return r[(e - 1) * (n + 1)] = 1, r;\n}\nfunction Jt(t, e) {\n  e === void 0 && (e = Math.sqrt(t.length));\n  for (var n = t.slice(), r = gt(e), s = 0; s < e; ++s) {\n    var o = e * s + s;\n    if (!tt(n[o], Dt)) {\n      for (var i = s + 1; i < e; ++i)\n        if (n[e * s + i]) {\n          Mc(n, r, s, i, e);\n          break;\n        }\n    }\n    if (!tt(n[o], Dt))\n      return [];\n    Pc(n, r, s, e, n[o]);\n    for (var i = 0; i < e; ++i) {\n      var a = i, c = i + s * e, l = n[c];\n      !tt(l, Dt) || s === i || Rc(n, r, a, s, e, -l);\n    }\n  }\n  return r;\n}\nfunction _c(t, e) {\n  e === void 0 && (e = Math.sqrt(t.length));\n  for (var n = [], r = 0; r < e; ++r)\n    for (var s = 0; s < e; ++s)\n      n[s * e + r] = t[e * r + s];\n  return n;\n}\nfunction ti(t, e) {\n  e === void 0 && (e = Math.sqrt(t.length));\n  for (var n = [], r = t[e * e - 1], s = 0; s < e - 1; ++s)\n    n[s] = t[e * (e - 1) + s] / r;\n  return n[e - 1] = 0, n;\n}\nfunction Tc(t, e) {\n  for (var n = gt(e), r = 0; r < e - 1; ++r)\n    n[e * (e - 1) + r] = t[r] || 0;\n  return n;\n}\nfunction Ee(t, e) {\n  for (var n = t.slice(), r = t.length; r < e - 1; ++r)\n    n[r] = 0;\n  return n[e - 1] = 1, n;\n}\nfunction Ut(t, e, n) {\n  if (e === void 0 && (e = Math.sqrt(t.length)), e === n)\n    return t;\n  for (var r = gt(n), s = Math.min(e, n), o = 0; o < s - 1; ++o) {\n    for (var i = 0; i < s - 1; ++i)\n      r[o * n + i] = t[o * e + i];\n    r[(o + 1) * n - 1] = t[(o + 1) * e - 1], r[(n - 1) * n + o] = t[(e - 1) * e + o];\n  }\n  return r[n * n - 1] = t[e * e - 1], r;\n}\nfunction An(t) {\n  for (var e = [], n = 1; n < arguments.length; n++)\n    e[n - 1] = arguments[n];\n  var r = gt(t);\n  return e.forEach(function(s) {\n    r = dt(r, s, t);\n  }), r;\n}\nfunction dt(t, e, n) {\n  n === void 0 && (n = Math.sqrt(t.length));\n  var r = [], s = t.length / n, o = e.length / s;\n  if (s) {\n    if (!o)\n      return t;\n  } else return e;\n  for (var i = 0; i < n; ++i)\n    for (var a = 0; a < o; ++a) {\n      r[a * n + i] = 0;\n      for (var c = 0; c < s; ++c)\n        r[a * n + i] += t[c * n + i] * e[a * s + c];\n    }\n  return r;\n}\nfunction at(t, e) {\n  for (var n = Math.min(t.length, e.length), r = t.slice(), s = 0; s < n; ++s)\n    r[s] = r[s] + e[s];\n  return r;\n}\nfunction K(t, e) {\n  for (var n = Math.min(t.length, e.length), r = t.slice(), s = 0; s < n; ++s)\n    r[s] = r[s] - e[s];\n  return r;\n}\nfunction Oc(t, e) {\n  return e === void 0 && (e = t.length === 6), e ? [t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 1] : t;\n}\nfunction ei(t, e) {\n  return e === void 0 && (e = t.length === 9), e ? [t[0], t[1], t[3], t[4], t[6], t[7]] : t;\n}\nfunction _t(t, e, n) {\n  n === void 0 && (n = e.length);\n  var r = dt(t, e, n), s = r[n - 1];\n  return r.map(function(o) {\n    return o / s;\n  });\n}\nfunction wc(t, e) {\n  return dt(t, [1, 0, 0, 0, 0, Math.cos(e), Math.sin(e), 0, 0, -Math.sin(e), Math.cos(e), 0, 0, 0, 0, 1], 4);\n}\nfunction Ic(t, e) {\n  return dt(t, [Math.cos(e), 0, -Math.sin(e), 0, 0, 1, 0, 0, Math.sin(e), 0, Math.cos(e), 0, 0, 0, 0, 1], 4);\n}\nfunction Bc(t, e) {\n  return dt(t, hn(e, 4));\n}\nfunction Cn(t, e) {\n  var n = e[0], r = n === void 0 ? 1 : n, s = e[1], o = s === void 0 ? 1 : s, i = e[2], a = i === void 0 ? 1 : i;\n  return dt(t, [r, 0, 0, 0, 0, o, 0, 0, 0, 0, a, 0, 0, 0, 0, 1], 4);\n}\nfunction gn(t, e) {\n  return _t(hn(e, 3), Ee(t, 3));\n}\nfunction ir(t, e) {\n  var n = e[0], r = n === void 0 ? 0 : n, s = e[1], o = s === void 0 ? 0 : s, i = e[2], a = i === void 0 ? 0 : i;\n  return dt(t, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, r, o, a, 1], 4);\n}\nfunction Ys(t, e) {\n  return dt(t, e, 4);\n}\nfunction hn(t, e) {\n  var n = Math.cos(t), r = Math.sin(t), s = gt(e);\n  return s[0] = n, s[1] = r, s[e] = -r, s[e + 1] = n, s;\n}\nfunction gt(t) {\n  for (var e = t * t, n = [], r = 0; r < e; ++r)\n    n[r] = r % (t + 1) ? 0 : 1;\n  return n;\n}\nfunction rs(t, e) {\n  for (var n = gt(e), r = Math.min(t.length, e - 1), s = 0; s < r; ++s)\n    n[(e + 1) * s] = t[s];\n  return n;\n}\nfunction Ce(t, e) {\n  for (var n = gt(e), r = Math.min(t.length, e - 1), s = 0; s < r; ++s)\n    n[e * (e - 1) + s] = t[s];\n  return n;\n}\nfunction ss(t, e, n, r, s, o, i, a) {\n  var c = t[0], l = t[1], u = e[0], f = e[1], d = n[0], p = n[1], g = r[0], h = r[1], v = s[0], m = s[1], S = o[0], x = o[1], C = i[0], E = i[1], D = a[0], R = a[1], y = [c, 0, u, 0, d, 0, g, 0, l, 0, f, 0, p, 0, h, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, c, 0, u, 0, d, 0, g, 0, l, 0, f, 0, p, 0, h, 0, 1, 0, 1, 0, 1, 0, 1, -v * c, -m * c, -S * u, -x * u, -C * d, -E * d, -D * g, -R * g, -v * l, -m * l, -S * f, -x * f, -C * p, -E * p, -D * h, -R * h], M = Jt(y, 8);\n  if (!M.length)\n    return [];\n  var P = dt(M, [v, m, S, x, C, E, D, R], 8);\n  return P[8] = 1, Ut(_c(P), 3, 4);\n}\nvar Qe = function() {\n  return Qe = Object.assign || function(e) {\n    for (var n, r = 1, s = arguments.length; r < s; r++) {\n      n = arguments[r];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, Qe.apply(this, arguments);\n};\nfunction zc() {\n  return [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1\n  ];\n}\nfunction ln(t, e) {\n  return e === void 0 && (e = 0), we($e(t, e));\n}\nfunction Ac(t, e) {\n  var n = _t(t, [e[0], e[1] || 0, e[2] || 0, 1], 4), r = n[3] || 1;\n  return [\n    n[0] / r,\n    n[1] / r,\n    n[2] / r\n  ];\n}\nfunction we(t) {\n  var e = zc();\n  return t.forEach(function(n) {\n    var r = n.matrixFunction, s = n.functionValue;\n    r && (e = r(e, s));\n  }), e;\n}\nfunction $e(t, e) {\n  e === void 0 && (e = 0);\n  var n = Rt(t) ? t : ce(t);\n  return n.map(function(r) {\n    var s = Xo(r), o = s.prefix, i = s.value, a = null, c = o, l = \"\";\n    if (o === \"translate\" || o === \"translateX\" || o === \"translate3d\") {\n      var u = qt(e) ? Qe(Qe({}, e), { \"o%\": e[\"%\"] }) : {\n        \"%\": e,\n        \"o%\": e\n      }, f = xe(i).map(function(T, w) {\n        return w === 0 && \"x%\" in u ? u[\"%\"] = e[\"x%\"] : w === 1 && \"y%\" in u ? u[\"%\"] = e[\"y%\"] : u[\"%\"] = e[\"o%\"], ft(T, u);\n      }), d = f[0], p = f[1], g = p === void 0 ? 0 : p, h = f[2], v = h === void 0 ? 0 : h;\n      a = ir, l = [d, g, v];\n    } else if (o === \"translateY\") {\n      var m = qt(e) ? Qe({ \"%\": e[\"y%\"] }, e) : {\n        \"%\": e\n      }, g = ft(i, m);\n      a = ir, l = [0, g, 0];\n    } else if (o === \"translateZ\") {\n      var v = parseFloat(i);\n      a = ir, l = [0, 0, v];\n    } else if (o === \"scale\" || o === \"scale3d\") {\n      var S = xe(i).map(function(T) {\n        return parseFloat(T);\n      }), x = S[0], C = S[1], E = C === void 0 ? x : C, D = S[2], R = D === void 0 ? 1 : D;\n      a = Cn, l = [x, E, R];\n    } else if (o === \"scaleX\") {\n      var x = parseFloat(i);\n      a = Cn, l = [x, 1, 1];\n    } else if (o === \"scaleY\") {\n      var E = parseFloat(i);\n      a = Cn, l = [1, E, 1];\n    } else if (o === \"scaleZ\") {\n      var R = parseFloat(i);\n      a = Cn, l = [1, 1, R];\n    } else if (o === \"rotate\" || o === \"rotateZ\" || o === \"rotateX\" || o === \"rotateY\") {\n      var y = pn(i), M = y.unit, P = y.value, _ = M === \"rad\" ? P : P * Math.PI / 180;\n      o === \"rotate\" || o === \"rotateZ\" ? (c = \"rotateZ\", a = Bc) : o === \"rotateX\" ? a = wc : o === \"rotateY\" && (a = Ic), l = _;\n    } else if (o === \"matrix3d\")\n      a = Ys, l = xe(i).map(function(T) {\n        return parseFloat(T);\n      });\n    else if (o === \"matrix\") {\n      var O = xe(i).map(function(T) {\n        return parseFloat(T);\n      });\n      a = Ys, l = [\n        O[0],\n        O[1],\n        0,\n        0,\n        O[2],\n        O[3],\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        O[4],\n        O[5],\n        0,\n        1\n      ];\n    } else\n      c = \"\";\n    return {\n      name: o,\n      functionName: c,\n      value: i,\n      matrixFunction: a,\n      functionValue: l\n    };\n  });\n}\nfunction vn(t, e, n, r, s, o = \"draggable\") {\n  var l;\n  const i = ((l = e.gestos[o]) == null ? void 0 : l.move(n, t.inputEvent)) ?? {}, a = i.originalDatas || i.datas, c = a[o] || (a[o] = {});\n  return {\n    ...i,\n    isPinch: !!r,\n    parentEvent: !0,\n    datas: c,\n    originalDatas: t.originalDatas\n  };\n}\nclass Fe {\n  constructor(e = \"draggable\") {\n    X(this, \"prevX\", 0);\n    X(this, \"prevY\", 0);\n    X(this, \"startX\", 0);\n    X(this, \"startY\", 0);\n    X(this, \"isDrag\", !1);\n    X(this, \"isFlag\", !1);\n    X(this, \"datas\", {\n      draggable: {}\n    });\n    this.ableName = e, this.datas = {\n      [e]: {}\n    };\n  }\n  dragStart(e, n) {\n    this.isDrag = !1, this.isFlag = !1;\n    const r = n.originalDatas;\n    return this.datas = r, r[this.ableName] || (r[this.ableName] = {}), {\n      ...this.move(e, n.inputEvent),\n      type: \"dragstart\"\n    };\n  }\n  drag(e, n) {\n    return this.move([\n      e[0] - this.prevX,\n      e[1] - this.prevY\n    ], n);\n  }\n  move(e, n) {\n    let r, s, o = !1;\n    if (!this.isFlag)\n      this.prevX = e[0], this.prevY = e[1], this.startX = e[0], this.startY = e[1], r = e[0], s = e[1], this.isFlag = !0;\n    else {\n      const i = this.isDrag;\n      r = this.prevX + e[0], s = this.prevY + e[1], (e[0] || e[1]) && (this.isDrag = !0), !i && this.isDrag && (o = !0);\n    }\n    return this.prevX = r, this.prevY = s, {\n      type: \"drag\",\n      clientX: r,\n      clientY: s,\n      inputEvent: n,\n      isFirstDrag: o,\n      isDrag: this.isDrag,\n      distX: r - this.startX,\n      distY: s - this.startY,\n      deltaX: e[0],\n      deltaY: e[1],\n      datas: this.datas[this.ableName],\n      originalDatas: this.datas,\n      parentEvent: !0,\n      parentGesto: this\n    };\n  }\n}\nfunction ke(t, e, n, r) {\n  const o = t.length === 16 ? 4 : 3, i = Me(t, n, r, o);\n  let [[a, c], [l, u], [f, d], [p, g]] = i, [h, v] = ht(t, e, o);\n  const m = Math.min(a, l, f, p), S = Math.min(c, u, d, g), x = Math.max(a, l, f, p), C = Math.max(c, u, d, g);\n  a = a - m || 0, l = l - m || 0, f = f - m || 0, p = p - m || 0, c = c - S || 0, u = u - S || 0, d = d - S || 0, g = g - S || 0, h = h - m || 0, v = v - S || 0;\n  const E = t[0], D = t[o + 1], R = wt(E * D);\n  return {\n    left: m,\n    top: S,\n    right: x,\n    bottom: C,\n    origin: [h, v],\n    pos1: [a, c],\n    pos2: [l, u],\n    pos3: [f, d],\n    pos4: [p, g],\n    direction: R\n  };\n}\nfunction ni(t, e) {\n  const { clientX: n, clientY: r, datas: s } = e, {\n    moveableClientRect: o,\n    rootMatrix: i,\n    is3d: a,\n    pos1: c\n  } = t.state, { left: l, top: u } = o, f = a ? 4 : 3, [d, p] = K(We(i, [n - l, r - u], f), c), [g, h] = Qt({ datas: s, distX: d, distY: p });\n  return [g, h];\n}\nfunction Re(t, { datas: e }) {\n  const {\n    allMatrix: n,\n    beforeMatrix: r,\n    is3d: s,\n    left: o,\n    top: i,\n    origin: a,\n    offsetMatrix: c,\n    targetMatrix: l,\n    transformOrigin: u\n  } = t.state, f = s ? 4 : 3;\n  e.is3d = s, e.matrix = n, e.targetMatrix = l, e.beforeMatrix = r, e.offsetMatrix = c, e.transformOrigin = u, e.inverseMatrix = Jt(n, f), e.inverseBeforeMatrix = Jt(r, f), e.absoluteOrigin = Ee(at([o, i], a), f), e.startDragBeforeDist = _t(e.inverseBeforeMatrix, e.absoluteOrigin, f), e.startDragDist = _t(e.inverseMatrix, e.absoluteOrigin, f);\n}\nfunction Gc(t) {\n  return ke(t.datas.beforeTransform, [50, 50], 100, 100).direction;\n}\nfunction jn(t, e, n) {\n  const {\n    datas: r,\n    originalDatas: {\n      beforeRenderable: s\n    }\n  } = e, o = r.transformIndex, i = s.nextTransforms, a = i.length, c = s.nextTransformAppendedIndexes;\n  let l = -1;\n  o === -1 ? (n === \"translate\" ? l = 0 : n === \"rotate\" && (l = ne(i, (p) => p.match(/scale\\(/g))), l === -1 && (l = i.length), r.transformIndex = l) : kt(c, (p) => p.index === o && p.functionName === n) ? l = o : l = o + c.filter((p) => p.index < o).length;\n  const u = Su(i, t.state, l), f = u.targetFunction, d = n === \"rotate\" ? \"rotateZ\" : n;\n  r.beforeFunctionTexts = u.beforeFunctionTexts, r.afterFunctionTexts = u.afterFunctionTexts, r.beforeTransform = u.beforeFunctionMatrix, r.beforeTransform2 = u.beforeFunctionMatrix2, r.targetTansform = u.targetFunctionMatrix, r.afterTransform = u.afterFunctionMatrix, r.afterTransform2 = u.afterFunctionMatrix2, r.targetAllTransform = u.allFunctionMatrix, f.functionName === d ? (r.afterFunctionTexts.splice(0, 1), r.isAppendTransform = !1) : a > l && (r.isAppendTransform = !0, s.nextTransformAppendedIndexes = [...c, {\n    functionName: n,\n    index: l,\n    isAppend: !0\n  }]);\n}\nfunction Xn(t, e, n) {\n  return `${t.beforeFunctionTexts.join(\" \")} ${t.isAppendTransform ? n : e} ${t.afterFunctionTexts.join(\" \")}`;\n}\nfunction kc({ datas: t, distX: e, distY: n }) {\n  const [r, s] = si({ datas: t, distX: e, distY: n }), o = ri(t, Tc([r, s], 4));\n  return _t(o, Ee([0, 0, 0], 4), 4);\n}\nfunction ri(t, e, n) {\n  const {\n    beforeTransform: r,\n    afterTransform: s,\n    beforeTransform2: o,\n    afterTransform2: i,\n    targetAllTransform: a\n  } = t, c = n ? dt(a, e, 4) : dt(e, a, 4), l = dt(Jt(n ? o : r, 4), c, 4);\n  return dt(l, Jt(n ? i : s, 4), 4);\n}\nfunction si({ datas: t, distX: e, distY: n }) {\n  const {\n    inverseBeforeMatrix: r,\n    is3d: s,\n    startDragBeforeDist: o,\n    absoluteOrigin: i\n  } = t, a = s ? 4 : 3;\n  return K(\n    _t(\n      r,\n      at(i, [e, n]),\n      a\n    ),\n    o\n  );\n}\nfunction Qt({ datas: t, distX: e, distY: n }, r) {\n  const {\n    inverseBeforeMatrix: s,\n    inverseMatrix: o,\n    is3d: i,\n    startDragBeforeDist: a,\n    startDragDist: c,\n    absoluteOrigin: l\n  } = t, u = i ? 4 : 3;\n  return K(\n    _t(\n      r ? s : o,\n      at(l, [e, n]),\n      u\n    ),\n    r ? a : c\n  );\n}\nfunction $c({ datas: t, distX: e, distY: n }, r) {\n  const {\n    beforeMatrix: s,\n    matrix: o,\n    is3d: i,\n    startDragBeforeDist: a,\n    startDragDist: c,\n    absoluteOrigin: l\n  } = t, u = i ? 4 : 3;\n  return K(\n    _t(\n      o,\n      at(c, [e, n]),\n      u\n    ),\n    l\n  );\n}\nfunction Fc(t, e, n, r = e, s = n, o = [0, 0]) {\n  return t ? t.map((i, a) => {\n    const { value: c, unit: l } = pn(i), u = a ? s : r, f = a ? n : e;\n    if (i === \"%\" || isNaN(c)) {\n      const d = u ? o[a] / u : 0;\n      return f * d;\n    } else if (l !== \"%\")\n      return c;\n    return f * c / 100;\n  }) : o;\n}\nfunction oi(t) {\n  const e = [];\n  return t[1] >= 0 && (t[0] >= 0 && e.push(3), t[0] <= 0 && e.push(2)), t[1] <= 0 && (t[0] >= 0 && e.push(1), t[0] <= 0 && e.push(0)), e;\n}\nfunction Lc(t, e) {\n  return oi(e).map((n) => t[n]);\n}\nfunction ar(t, e) {\n  const n = (e + 1) / 2;\n  return [\n    zn(t[0][0], t[1][0], n, 1 - n),\n    zn(t[0][1], t[1][1], n, 1 - n)\n  ];\n}\nfunction yt(t, e) {\n  const n = ar([t[0], t[1]], e[0]), r = ar([t[2], t[3]], e[0]);\n  return ar([n, r], e[1]);\n}\nfunction Nc(t, e, n, r, s, o) {\n  const i = Me(e, n, r, s), a = yt(i, o), c = t[0] - a[0], l = t[1] - a[1];\n  return [c, l];\n}\nfunction mn(t, e, n, r) {\n  return dt(\n    t,\n    en(e, r, n),\n    r\n  );\n}\nfunction Wc(t, e, n, r) {\n  const {\n    transformOrigin: s,\n    offsetMatrix: o,\n    is3d: i\n  } = t, a = i ? 4 : 3;\n  let c;\n  if (re(n)) {\n    const {\n      beforeTransform: l,\n      afterTransform: u\n    } = e;\n    r ? c = Ut(ln(n), 4, a) : c = Ut(\n      dt(dt(l, ln([n]), 4), u, 4),\n      4,\n      a\n    );\n  } else\n    c = n;\n  return mn(\n    o,\n    c,\n    s,\n    a\n  );\n}\nfunction Yc(t, e) {\n  const {\n    transformOrigin: n,\n    offsetMatrix: r,\n    is3d: s,\n    targetMatrix: o,\n    targetAllTransform: i\n  } = t, a = s ? 4 : 3;\n  return mn(\n    r,\n    dt(i || o, rs(e, a), a),\n    n,\n    a\n  );\n}\nfunction Hn(t, e) {\n  const n = je(e);\n  return {\n    setTransform: (r, s = -1) => {\n      n.startTransforms = Rt(r) ? r : ce(r), Rr(t, e, s);\n    },\n    setTransformIndex: (r) => {\n      Rr(t, e, r);\n    }\n  };\n}\nfunction qn(t, e, n) {\n  const s = je(e).startTransforms;\n  Rr(t, e, ne(s, (o) => o.indexOf(`${n}(`) === 0));\n}\nfunction Rr(t, e, n) {\n  const r = je(e), s = e.datas;\n  if (s.transformIndex = n, n === -1)\n    return;\n  const o = r.startTransforms[n];\n  if (!o)\n    return;\n  const i = t.state, a = $e([o], {\n    \"x%\": (c) => c / 100 * i.offsetWidth,\n    \"y%\": (c) => c / 100 * i.offsetHeight\n  });\n  s.startValue = a[0].functionValue;\n}\nfunction os(t, e) {\n  const n = je(t);\n  n.nextTransforms = ce(e);\n}\nfunction je(t) {\n  return t.originalDatas.beforeRenderable;\n}\nfunction Gn(t) {\n  const {\n    originalDatas: {\n      beforeRenderable: e\n    }\n  } = t;\n  return e.nextTransforms;\n}\nfunction Dn(t) {\n  return (Gn(t) || []).join(\" \");\n}\nfunction bn(t) {\n  return je(t).nextStyle;\n}\nfunction ii(t, e, n, r, s) {\n  os(s, e);\n  const o = Ot.drag(\n    t,\n    vn(s, t.state, n, r)\n  ), i = o ? o.transform : e;\n  return {\n    transform: e,\n    drag: o,\n    ...It({\n      transform: i\n    }, s),\n    afterTransform: i\n  };\n}\nfunction is(t, e, n, r, s, o) {\n  const i = Wc(t.state, s, e, o);\n  return Xc(\n    t,\n    n,\n    r,\n    i\n  );\n}\nfunction ai(t, e, n, r, s, o, i) {\n  const a = is(\n    t,\n    e,\n    n,\n    s,\n    o,\n    i\n  ), c = t.state, {\n    left: l,\n    top: u\n  } = c, f = t.props.groupable, d = f ? l : 0, p = f ? u : 0, g = K(r, a);\n  return K(g, [d, p]);\n}\nfunction Vc(t, e, n, r, s, o, i) {\n  return ai(\n    t,\n    e,\n    n,\n    r,\n    s,\n    o,\n    i\n  );\n}\nfunction jc(t, e, n) {\n  return [\n    e ? -1 + t[0] / (e / 2) : 0,\n    n ? -1 + t[1] / (n / 2) : 0\n  ];\n}\nfunction Xc(t, e, n, r = t.state.allMatrix) {\n  const {\n    width: s,\n    height: o,\n    is3d: i\n  } = t.state, a = i ? 4 : 3, c = [\n    s / 2 * (1 + e[0]) + n[0],\n    o / 2 * (1 + e[1]) + n[1]\n  ];\n  return ht(r, c, a);\n}\nfunction Hc(t, e, n) {\n  const r = n.fixedDirection, s = n.fixedPosition, o = n.fixedOffset;\n  return ai(\n    t,\n    `rotate(${e}deg)`,\n    r,\n    s,\n    o,\n    n\n  );\n}\nfunction qc(t, e, n, r, s, o) {\n  const {\n    groupable: i\n  } = t.props, a = t.state, {\n    transformOrigin: c,\n    offsetMatrix: l,\n    is3d: u,\n    width: f,\n    height: d,\n    left: p,\n    top: g\n  } = a, h = o.fixedDirection, v = o.nextTargetMatrix || a.targetMatrix, m = u ? 4 : 3, S = Fc(\n    s,\n    e,\n    n,\n    f,\n    d,\n    c\n  ), x = i ? p : 0, C = i ? g : 0, E = mn(l, v, S, m), D = Nc(r, E, e, n, m, h);\n  return K(D, [x, C]);\n}\nfunction Uc(t, e) {\n  return yt(jt(t.state), e);\n}\nfunction Kc(t, e) {\n  const n = t.targetGesto, r = t.controlGesto;\n  let s;\n  return n != null && n.isFlag() && (s = n.getEventData()[e]), !s && (r != null && r.isFlag()) && (s = r.getEventData()[e]), s || {};\n}\nfunction Zc(t) {\n  if (t && t.getRootNode) {\n    const e = t.getRootNode();\n    if (e.nodeType === 11)\n      return e;\n  }\n}\nfunction Jc(t) {\n  const e = t(\"scale\"), n = t(\"rotate\"), r = t(\"translate\"), s = [];\n  return r && r !== \"0px\" && r !== \"none\" && s.push(`translate(${r.split(/\\s+/).join(\",\")})`), n && n !== \"1\" && n !== \"none\" && s.push(`rotate(${n})`), e && e !== \"1\" && e !== \"none\" && s.push(`scale(${e.split(/\\s+/).join(\",\")})`), s;\n}\nfunction ci(t, e, n) {\n  let r = t;\n  const s = [], o = es(t) || fe(t);\n  let i = !n && t === e || t === o, a = i, c = !1, l = 3, u, f, d, p = !1, g = fn(e, e, !0).offsetParent, h = 1;\n  for (; r && !a; ) {\n    a = i;\n    const v = Gt(r), m = v(\"position\"), S = zi(r), x = m === \"fixed\", C = Jc(v);\n    let E = Oc(iu(S)), D, R = !1, y = !1, M = 0, P = 0, _ = 0, O = 0, T = {\n      hasTransform: !1,\n      fixedContainer: null\n    };\n    x && (p = !0, T = fu(r), g = T.fixedContainer);\n    const w = E.length;\n    !c && (w === 16 || C.length) && (c = !0, l = 4, Br(s), d && (d = Ut(d, 3, 4))), c && w === 9 && (E = Ut(E, 3, 4));\n    const {\n      tagName: k,\n      hasOffset: I,\n      isSVG: $,\n      origin: G,\n      targetOrigin: L,\n      offset: z\n    } = uu(r, t);\n    let [\n      N,\n      Z\n    ] = z;\n    k === \"svg\" && !r.ownerSVGElement && d && (s.push({\n      type: \"target\",\n      target: r,\n      matrix: du(r, l)\n    }), s.push({\n      type: \"offset\",\n      target: r,\n      matrix: gt(l)\n    }));\n    const Y = parseFloat(v(\"zoom\")) || 1;\n    if (x)\n      D = T.fixedContainer, R = !0;\n    else {\n      const W = fn(r, e, !1, !0, v), J = W.offsetZoom;\n      if (D = W.offsetParent, R = W.isEnd, y = W.isStatic, h *= J, (W.isCustomElement || J !== 1) && y)\n        N -= D.offsetLeft, Z -= D.offsetTop;\n      else if ((nc || ec) && W.parentSlotElement) {\n        let F = D, H = 0, nt = 0;\n        for (; F && Zc(F); )\n          H += F.offsetLeft, nt += F.offsetTop, F = F.offsetParent;\n        N -= H, Z -= nt;\n      }\n    }\n    if ($o && !rc && I && !$ && y && (m === \"relative\" || m === \"static\") && (N -= D.offsetLeft, Z -= D.offsetTop, i = i || R), x)\n      I && T.hasTransform && (_ = D.clientLeft, O = D.clientTop);\n    else if (I && g !== D && (M = D.clientLeft, P = D.clientTop), I && D === o) {\n      const W = Ai(r, !1);\n      N += W[0], Z += W[1];\n    }\n    if (s.push({\n      type: \"target\",\n      target: r,\n      matrix: en(E, l, G)\n    }), C.length && (s.push({\n      type: \"offset\",\n      target: r,\n      matrix: gt(l)\n    }), s.push({\n      type: \"target\",\n      target: r,\n      matrix: en(ln(C), l, G)\n    })), I) {\n      const W = r === t, J = W ? 0 : r.scrollLeft, q = W ? 0 : r.scrollTop;\n      s.push({\n        type: \"offset\",\n        target: r,\n        matrix: Ce([\n          N - J + M - _,\n          Z - q + P - O\n        ], l)\n      });\n    } else\n      s.push({\n        type: \"offset\",\n        target: r,\n        origin: G\n      });\n    if (Y !== 1 && s.push({\n      type: \"zoom\",\n      target: r,\n      matrix: en(rs([Y, Y], l), l, [0, 0])\n    }), d || (d = E), u || (u = G), f || (f = L), a || x)\n      break;\n    r = D, i = R, (!n || r === o) && (a = i);\n  }\n  return d || (d = gt(l)), u || (u = [0, 0]), f || (f = [0, 0]), {\n    zoom: h,\n    offsetContainer: g,\n    matrixes: s,\n    targetMatrix: d,\n    transformOrigin: u,\n    targetOrigin: f,\n    is3d: c,\n    hasFixed: p\n  };\n}\nlet ge = null, he = null, Ie = null;\nfunction Le(t) {\n  t ? (window.Map && (ge = /* @__PURE__ */ new Map(), he = /* @__PURE__ */ new Map()), Ie = []) : (ge = null, Ie = null, he = null);\n}\nfunction Qc(t) {\n  const e = he == null ? void 0 : he.get(t);\n  if (e)\n    return e;\n  const n = nn(t, !0);\n  return he && he.set(t, n), n;\n}\nfunction tl(t, e) {\n  if (Ie) {\n    const r = kt(Ie, (s) => s[0][0] == t && s[0][1] == e);\n    if (r)\n      return r[1];\n  }\n  const n = ci(t, e, !0);\n  return Ie && Ie.push([[t, e], n]), n;\n}\nfunction Gt(t) {\n  let e = ge == null ? void 0 : ge.get(t);\n  if (!e) {\n    const s = ae(t).getComputedStyle(t);\n    if (!ge)\n      return (o) => s[o];\n    e = {\n      style: s,\n      cached: {}\n    }, ge.set(t, e);\n  }\n  const n = e.cached, r = e.style;\n  return (s) => (s in n || (n[s] = r[s]), n[s]);\n}\nvar Mr = { exports: {} }, qe = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Vs;\nfunction el() {\n  if (Vs) return qe;\n  Vs = 1;\n  var t = react__WEBPACK_IMPORTED_MODULE_0__, e = Symbol.for(\"react.element\"), n = Symbol.for(\"react.fragment\"), r = Object.prototype.hasOwnProperty, s = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, o = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function i(a, c, l) {\n    var u, f = {}, d = null, p = null;\n    l !== void 0 && (d = \"\" + l), c.key !== void 0 && (d = \"\" + c.key), c.ref !== void 0 && (p = c.ref);\n    for (u in c) r.call(c, u) && !o.hasOwnProperty(u) && (f[u] = c[u]);\n    if (a && a.defaultProps) for (u in c = a.defaultProps, c) f[u] === void 0 && (f[u] = c[u]);\n    return { $$typeof: e, type: a, key: d, ref: p, props: f, _owner: s.current };\n  }\n  return qe.Fragment = n, qe.jsx = i, qe.jsxs = i, qe;\n}\nvar Ue = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar js;\nfunction nl() {\n  return js || (js = 1,  true && function() {\n    var t = react__WEBPACK_IMPORTED_MODULE_0__, e = Symbol.for(\"react.element\"), n = Symbol.for(\"react.portal\"), r = Symbol.for(\"react.fragment\"), s = Symbol.for(\"react.strict_mode\"), o = Symbol.for(\"react.profiler\"), i = Symbol.for(\"react.provider\"), a = Symbol.for(\"react.context\"), c = Symbol.for(\"react.forward_ref\"), l = Symbol.for(\"react.suspense\"), u = Symbol.for(\"react.suspense_list\"), f = Symbol.for(\"react.memo\"), d = Symbol.for(\"react.lazy\"), p = Symbol.for(\"react.offscreen\"), g = Symbol.iterator, h = \"@@iterator\";\n    function v(b) {\n      if (b === null || typeof b != \"object\")\n        return null;\n      var A = g && b[g] || b[h];\n      return typeof A == \"function\" ? A : null;\n    }\n    var m = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function S(b) {\n      {\n        for (var A = arguments.length, V = new Array(A > 1 ? A - 1 : 0), Q = 1; Q < A; Q++)\n          V[Q - 1] = arguments[Q];\n        x(\"error\", b, V);\n      }\n    }\n    function x(b, A, V) {\n      {\n        var Q = m.ReactDebugCurrentFrame, ct = Q.getStackAddendum();\n        ct !== \"\" && (A += \"%s\", V = V.concat([ct]));\n        var pt = V.map(function(ot) {\n          return String(ot);\n        });\n        pt.unshift(\"Warning: \" + A), Function.prototype.apply.call(console[b], console, pt);\n      }\n    }\n    var C = !1, E = !1, D = !1, R = !1, y = !1, M;\n    M = Symbol.for(\"react.module.reference\");\n    function P(b) {\n      return !!(typeof b == \"string\" || typeof b == \"function\" || b === r || b === o || y || b === s || b === l || b === u || R || b === p || C || E || D || typeof b == \"object\" && b !== null && (b.$$typeof === d || b.$$typeof === f || b.$$typeof === i || b.$$typeof === a || b.$$typeof === c || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      b.$$typeof === M || b.getModuleId !== void 0));\n    }\n    function _(b, A, V) {\n      var Q = b.displayName;\n      if (Q)\n        return Q;\n      var ct = A.displayName || A.name || \"\";\n      return ct !== \"\" ? V + \"(\" + ct + \")\" : V;\n    }\n    function O(b) {\n      return b.displayName || \"Context\";\n    }\n    function T(b) {\n      if (b == null)\n        return null;\n      if (typeof b.tag == \"number\" && S(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof b == \"function\")\n        return b.displayName || b.name || null;\n      if (typeof b == \"string\")\n        return b;\n      switch (b) {\n        case r:\n          return \"Fragment\";\n        case n:\n          return \"Portal\";\n        case o:\n          return \"Profiler\";\n        case s:\n          return \"StrictMode\";\n        case l:\n          return \"Suspense\";\n        case u:\n          return \"SuspenseList\";\n      }\n      if (typeof b == \"object\")\n        switch (b.$$typeof) {\n          case a:\n            var A = b;\n            return O(A) + \".Consumer\";\n          case i:\n            var V = b;\n            return O(V._context) + \".Provider\";\n          case c:\n            return _(b, b.render, \"ForwardRef\");\n          case f:\n            var Q = b.displayName || null;\n            return Q !== null ? Q : T(b.type) || \"Memo\";\n          case d: {\n            var ct = b, pt = ct._payload, ot = ct._init;\n            try {\n              return T(ot(pt));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var w = Object.assign, k = 0, I, $, G, L, z, N, Z;\n    function Y() {\n    }\n    Y.__reactDisabledLog = !0;\n    function W() {\n      {\n        if (k === 0) {\n          I = console.log, $ = console.info, G = console.warn, L = console.error, z = console.group, N = console.groupCollapsed, Z = console.groupEnd;\n          var b = {\n            configurable: !0,\n            enumerable: !0,\n            value: Y,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: b,\n            log: b,\n            warn: b,\n            error: b,\n            group: b,\n            groupCollapsed: b,\n            groupEnd: b\n          });\n        }\n        k++;\n      }\n    }\n    function J() {\n      {\n        if (k--, k === 0) {\n          var b = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: w({}, b, {\n              value: I\n            }),\n            info: w({}, b, {\n              value: $\n            }),\n            warn: w({}, b, {\n              value: G\n            }),\n            error: w({}, b, {\n              value: L\n            }),\n            group: w({}, b, {\n              value: z\n            }),\n            groupCollapsed: w({}, b, {\n              value: N\n            }),\n            groupEnd: w({}, b, {\n              value: Z\n            })\n          });\n        }\n        k < 0 && S(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var q = m.ReactCurrentDispatcher, F;\n    function H(b, A, V) {\n      {\n        if (F === void 0)\n          try {\n            throw Error();\n          } catch (ct) {\n            var Q = ct.stack.trim().match(/\\n( *(at )?)/);\n            F = Q && Q[1] || \"\";\n          }\n        return `\n` + F + b;\n      }\n    }\n    var nt = !1, lt;\n    {\n      var vt = typeof WeakMap == \"function\" ? WeakMap : Map;\n      lt = new vt();\n    }\n    function st(b, A) {\n      if (!b || nt)\n        return \"\";\n      {\n        var V = lt.get(b);\n        if (V !== void 0)\n          return V;\n      }\n      var Q;\n      nt = !0;\n      var ct = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var pt;\n      pt = q.current, q.current = null, W();\n      try {\n        if (A) {\n          var ot = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(ot.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(ot, []);\n            } catch (zt) {\n              Q = zt;\n            }\n            Reflect.construct(b, [], ot);\n          } else {\n            try {\n              ot.call();\n            } catch (zt) {\n              Q = zt;\n            }\n            b.call(ot.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (zt) {\n            Q = zt;\n          }\n          b();\n        }\n      } catch (zt) {\n        if (zt && Q && typeof zt.stack == \"string\") {\n          for (var rt = zt.stack.split(`\n`), Tt = Q.stack.split(`\n`), mt = rt.length - 1, Et = Tt.length - 1; mt >= 1 && Et >= 0 && rt[mt] !== Tt[Et]; )\n            Et--;\n          for (; mt >= 1 && Et >= 0; mt--, Et--)\n            if (rt[mt] !== Tt[Et]) {\n              if (mt !== 1 || Et !== 1)\n                do\n                  if (mt--, Et--, Et < 0 || rt[mt] !== Tt[Et]) {\n                    var Nt = `\n` + rt[mt].replace(\" at new \", \" at \");\n                    return b.displayName && Nt.includes(\"<anonymous>\") && (Nt = Nt.replace(\"<anonymous>\", b.displayName)), typeof b == \"function\" && lt.set(b, Nt), Nt;\n                  }\n                while (mt >= 1 && Et >= 0);\n              break;\n            }\n        }\n      } finally {\n        nt = !1, q.current = pt, J(), Error.prepareStackTrace = ct;\n      }\n      var Te = b ? b.displayName || b.name : \"\", pe = Te ? H(Te) : \"\";\n      return typeof b == \"function\" && lt.set(b, pe), pe;\n    }\n    function Ft(b, A, V) {\n      return st(b, !1);\n    }\n    function Lt(b) {\n      var A = b.prototype;\n      return !!(A && A.isReactComponent);\n    }\n    function ut(b, A, V) {\n      if (b == null)\n        return \"\";\n      if (typeof b == \"function\")\n        return st(b, Lt(b));\n      if (typeof b == \"string\")\n        return H(b);\n      switch (b) {\n        case l:\n          return H(\"Suspense\");\n        case u:\n          return H(\"SuspenseList\");\n      }\n      if (typeof b == \"object\")\n        switch (b.$$typeof) {\n          case c:\n            return Ft(b.render);\n          case f:\n            return ut(b.type, A, V);\n          case d: {\n            var Q = b, ct = Q._payload, pt = Q._init;\n            try {\n              return ut(pt(ct), A, V);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var St = Object.prototype.hasOwnProperty, Kt = {}, de = m.ReactDebugCurrentFrame;\n    function Pe(b) {\n      if (b) {\n        var A = b._owner, V = ut(b.type, b._source, A ? A.type : null);\n        de.setExtraStackFrame(V);\n      } else\n        de.setExtraStackFrame(null);\n    }\n    function va(b, A, V, Q, ct) {\n      {\n        var pt = Function.call.bind(St);\n        for (var ot in b)\n          if (pt(b, ot)) {\n            var rt = void 0;\n            try {\n              if (typeof b[ot] != \"function\") {\n                var Tt = Error((Q || \"React class\") + \": \" + V + \" type `\" + ot + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof b[ot] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw Tt.name = \"Invariant Violation\", Tt;\n              }\n              rt = b[ot](A, ot, Q, V, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (mt) {\n              rt = mt;\n            }\n            rt && !(rt instanceof Error) && (Pe(ct), S(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", Q || \"React class\", V, ot, typeof rt), Pe(null)), rt instanceof Error && !(rt.message in Kt) && (Kt[rt.message] = !0, Pe(ct), S(\"Failed %s type: %s\", V, rt.message), Pe(null));\n          }\n      }\n    }\n    var ma = Array.isArray;\n    function tr(b) {\n      return ma(b);\n    }\n    function xa(b) {\n      {\n        var A = typeof Symbol == \"function\" && Symbol.toStringTag, V = A && b[Symbol.toStringTag] || b.constructor.name || \"Object\";\n        return V;\n      }\n    }\n    function Sa(b) {\n      try {\n        return _s(b), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function _s(b) {\n      return \"\" + b;\n    }\n    function Ts(b) {\n      if (Sa(b))\n        return S(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", xa(b)), _s(b);\n    }\n    var He = m.ReactCurrentOwner, Ea = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Os, ws, er;\n    er = {};\n    function Ca(b) {\n      if (St.call(b, \"ref\")) {\n        var A = Object.getOwnPropertyDescriptor(b, \"ref\").get;\n        if (A && A.isReactWarning)\n          return !1;\n      }\n      return b.ref !== void 0;\n    }\n    function Da(b) {\n      if (St.call(b, \"key\")) {\n        var A = Object.getOwnPropertyDescriptor(b, \"key\").get;\n        if (A && A.isReactWarning)\n          return !1;\n      }\n      return b.key !== void 0;\n    }\n    function ba(b, A) {\n      if (typeof b.ref == \"string\" && He.current && A && He.current.stateNode !== A) {\n        var V = T(He.current.type);\n        er[V] || (S('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', T(He.current.type), b.ref), er[V] = !0);\n      }\n    }\n    function ya(b, A) {\n      {\n        var V = function() {\n          Os || (Os = !0, S(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", A));\n        };\n        V.isReactWarning = !0, Object.defineProperty(b, \"key\", {\n          get: V,\n          configurable: !0\n        });\n      }\n    }\n    function Ra(b, A) {\n      {\n        var V = function() {\n          ws || (ws = !0, S(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", A));\n        };\n        V.isReactWarning = !0, Object.defineProperty(b, \"ref\", {\n          get: V,\n          configurable: !0\n        });\n      }\n    }\n    var Ma = function(b, A, V, Q, ct, pt, ot) {\n      var rt = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: e,\n        // Built-in properties that belong on the element\n        type: b,\n        key: A,\n        ref: V,\n        props: ot,\n        // Record the component responsible for creating this element.\n        _owner: pt\n      };\n      return rt._store = {}, Object.defineProperty(rt._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(rt, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: Q\n      }), Object.defineProperty(rt, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: ct\n      }), Object.freeze && (Object.freeze(rt.props), Object.freeze(rt)), rt;\n    };\n    function Pa(b, A, V, Q, ct) {\n      {\n        var pt, ot = {}, rt = null, Tt = null;\n        V !== void 0 && (Ts(V), rt = \"\" + V), Da(A) && (Ts(A.key), rt = \"\" + A.key), Ca(A) && (Tt = A.ref, ba(A, ct));\n        for (pt in A)\n          St.call(A, pt) && !Ea.hasOwnProperty(pt) && (ot[pt] = A[pt]);\n        if (b && b.defaultProps) {\n          var mt = b.defaultProps;\n          for (pt in mt)\n            ot[pt] === void 0 && (ot[pt] = mt[pt]);\n        }\n        if (rt || Tt) {\n          var Et = typeof b == \"function\" ? b.displayName || b.name || \"Unknown\" : b;\n          rt && ya(ot, Et), Tt && Ra(ot, Et);\n        }\n        return Ma(b, rt, Tt, ct, Q, He.current, ot);\n      }\n    }\n    var nr = m.ReactCurrentOwner, Is = m.ReactDebugCurrentFrame;\n    function _e(b) {\n      if (b) {\n        var A = b._owner, V = ut(b.type, b._source, A ? A.type : null);\n        Is.setExtraStackFrame(V);\n      } else\n        Is.setExtraStackFrame(null);\n    }\n    var rr;\n    rr = !1;\n    function sr(b) {\n      return typeof b == \"object\" && b !== null && b.$$typeof === e;\n    }\n    function Bs() {\n      {\n        if (nr.current) {\n          var b = T(nr.current.type);\n          if (b)\n            return `\n\nCheck the render method of \\`` + b + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function _a(b) {\n      return \"\";\n    }\n    var zs = {};\n    function Ta(b) {\n      {\n        var A = Bs();\n        if (!A) {\n          var V = typeof b == \"string\" ? b : b.displayName || b.name;\n          V && (A = `\n\nCheck the top-level render call using <` + V + \">.\");\n        }\n        return A;\n      }\n    }\n    function As(b, A) {\n      {\n        if (!b._store || b._store.validated || b.key != null)\n          return;\n        b._store.validated = !0;\n        var V = Ta(A);\n        if (zs[V])\n          return;\n        zs[V] = !0;\n        var Q = \"\";\n        b && b._owner && b._owner !== nr.current && (Q = \" It was passed a child from \" + T(b._owner.type) + \".\"), _e(b), S('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', V, Q), _e(null);\n      }\n    }\n    function Gs(b, A) {\n      {\n        if (typeof b != \"object\")\n          return;\n        if (tr(b))\n          for (var V = 0; V < b.length; V++) {\n            var Q = b[V];\n            sr(Q) && As(Q, A);\n          }\n        else if (sr(b))\n          b._store && (b._store.validated = !0);\n        else if (b) {\n          var ct = v(b);\n          if (typeof ct == \"function\" && ct !== b.entries)\n            for (var pt = ct.call(b), ot; !(ot = pt.next()).done; )\n              sr(ot.value) && As(ot.value, A);\n        }\n      }\n    }\n    function Oa(b) {\n      {\n        var A = b.type;\n        if (A == null || typeof A == \"string\")\n          return;\n        var V;\n        if (typeof A == \"function\")\n          V = A.propTypes;\n        else if (typeof A == \"object\" && (A.$$typeof === c || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        A.$$typeof === f))\n          V = A.propTypes;\n        else\n          return;\n        if (V) {\n          var Q = T(A);\n          va(V, b.props, \"prop\", Q, b);\n        } else if (A.PropTypes !== void 0 && !rr) {\n          rr = !0;\n          var ct = T(A);\n          S(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", ct || \"Unknown\");\n        }\n        typeof A.getDefaultProps == \"function\" && !A.getDefaultProps.isReactClassApproved && S(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function wa(b) {\n      {\n        for (var A = Object.keys(b.props), V = 0; V < A.length; V++) {\n          var Q = A[V];\n          if (Q !== \"children\" && Q !== \"key\") {\n            _e(b), S(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", Q), _e(null);\n            break;\n          }\n        }\n        b.ref !== null && (_e(b), S(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), _e(null));\n      }\n    }\n    var ks = {};\n    function $s(b, A, V, Q, ct, pt) {\n      {\n        var ot = P(b);\n        if (!ot) {\n          var rt = \"\";\n          (b === void 0 || typeof b == \"object\" && b !== null && Object.keys(b).length === 0) && (rt += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var Tt = _a();\n          Tt ? rt += Tt : rt += Bs();\n          var mt;\n          b === null ? mt = \"null\" : tr(b) ? mt = \"array\" : b !== void 0 && b.$$typeof === e ? (mt = \"<\" + (T(b.type) || \"Unknown\") + \" />\", rt = \" Did you accidentally export a JSX literal instead of a component?\") : mt = typeof b, S(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", mt, rt);\n        }\n        var Et = Pa(b, A, V, ct, pt);\n        if (Et == null)\n          return Et;\n        if (ot) {\n          var Nt = A.children;\n          if (Nt !== void 0)\n            if (Q)\n              if (tr(Nt)) {\n                for (var Te = 0; Te < Nt.length; Te++)\n                  Gs(Nt[Te], b);\n                Object.freeze && Object.freeze(Nt);\n              } else\n                S(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              Gs(Nt, b);\n        }\n        if (St.call(A, \"key\")) {\n          var pe = T(b), zt = Object.keys(A).filter(function(ka) {\n            return ka !== \"key\";\n          }), or = zt.length > 0 ? \"{key: someKey, \" + zt.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n          if (!ks[pe + or]) {\n            var Ga = zt.length > 0 ? \"{\" + zt.join(\": ..., \") + \": ...}\" : \"{}\";\n            S(`A props object containing a \"key\" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />`, or, pe, Ga, pe), ks[pe + or] = !0;\n          }\n        }\n        return b === r ? wa(Et) : Oa(Et), Et;\n      }\n    }\n    function Ia(b, A, V) {\n      return $s(b, A, V, !0);\n    }\n    function Ba(b, A, V) {\n      return $s(b, A, V, !1);\n    }\n    var za = Ba, Aa = Ia;\n    Ue.Fragment = r, Ue.jsx = za, Ue.jsxs = Aa;\n  }()), Ue;\n}\n false ? 0 : Mr.exports = nl();\nvar it = Mr.exports;\nfunction Ht(t, e, n) {\n  const r = n.originalDatas;\n  r.groupable = r.groupable || {};\n  const s = r.groupable;\n  s.childDatas = s.childDatas || [];\n  const o = s.childDatas;\n  return t.moveables.map((i, a) => (o[a] = o[a] || {}, o[a][e] = o[a][e] || {}, {\n    ...n,\n    isRequestChild: !0,\n    datas: o[a][e],\n    originalDatas: o[a]\n  }));\n}\nfunction cr(t, e, n, r, s, o, i) {\n  const a = !!n.match(/Start$/g), c = !!n.match(/End$/g), l = s.isPinch, u = s.datas, f = Ht(t, e.name, s), d = t.moveables, p = [], g = f.map((h, v) => {\n    const m = d[v], S = m.state, x = S.gestos;\n    let C = h;\n    if (a)\n      C = new Fe(i).dragStart(r, h), p.push(C);\n    else {\n      if (x[i] || (x[i] = u.childGestos[v]), !x[i])\n        return;\n      C = vn(h, S, r, l, o, i), p.push(C);\n    }\n    const E = e[n](m, { ...C, parentFlag: !0 });\n    return c && (x[i] = null), E;\n  });\n  return a && (u.childGestos = d.map((h) => h.state.gestos[i])), {\n    eventParams: g,\n    childEvents: p\n  };\n}\nfunction ee(t, e, n, r, s = (i, a) => a, o) {\n  const i = !!n.match(/End$/g), a = Ht(t, e.name, r), c = t.moveables;\n  return a.map((u, f) => {\n    const d = c[f];\n    let p = u;\n    p = s(d, u);\n    const g = e[n](d, { ...p, parentFlag: !0 });\n    return g && o && o(d, u, g, f), i && (d.state.gestos = {}), g;\n  });\n}\nfunction kn(t, e, n, r) {\n  const s = n.fixedDirection, o = n.fixedPosition, i = r.datas.startPositions || jt(e.state), a = yt(i, s), [c, l] = _t(\n    hn(-t.rotation / 180 * Math.PI, 3),\n    [a[0] - o[0], a[1] - o[1], 1],\n    3\n  );\n  return r.datas.originalX = c, r.datas.originalY = l, r;\n}\nfunction li(t, e, n, r) {\n  const { renderPoses: s, rotation: o, direction: i } = t.getState(), { zoom: a } = De(t.props, e), c = tn(o / Math.PI * 180), l = {}, u = t.renderState;\n  u.renderDirectionMap || (u.renderDirectionMap = {});\n  const f = u.renderDirectionMap;\n  n.forEach(({ dir: p }) => {\n    l[p] = !0;\n  });\n  const d = wt(i);\n  return n.map(({ data: p, classNames: g, dir: h }) => {\n    const v = qr[h];\n    if (!v || !l[h])\n      return null;\n    f[h] = !0;\n    const m = (tt(c, 15) + d * Wo[h] + 720) % 180, S = {};\n    return Ve(p).forEach((x) => {\n      S[`data-${x}`] = p[x];\n    }), /* @__PURE__ */ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\n      \"div\",\n      {\n        className: U(\"control\", \"direction\", h, e, ...g),\n        \"data-rotation\": m,\n        \"data-direction\": h,\n        ...S,\n        key: `direction-${h}`,\n        style: Nn(\n          o,\n          a,\n          ...v.map((x) => s[x])\n        )\n      }\n    );\n  });\n}\nfunction ui(t, e, n, r) {\n  const {\n    renderDirections: s = e,\n    displayAroundControls: o\n  } = De(t.props, n);\n  if (!s)\n    return [];\n  const i = s === !0 ? Xr : s;\n  return [\n    ...o ? gi(t, r, n, i) : [],\n    ...li(\n      t,\n      n,\n      i.map((a) => ({\n        data: {},\n        classNames: [],\n        dir: a\n      }))\n    )\n  ];\n}\nfunction un(t, e, n, r, s, o, ...i) {\n  const a = xt(n, r), c = e ? tt(a / Math.PI * 180, 15) % 180 : -1;\n  return /* @__PURE__ */ it.jsx(\n    \"div\",\n    {\n      className: U(\n        \"line\",\n        \"direction\",\n        e ? \"edge\" : \"\",\n        e,\n        ...i\n      ),\n      \"data-rotation\": c,\n      \"data-line-key\": o,\n      \"data-direction\": e,\n      style: Je(n, r, s, a)\n    },\n    `line-${o}`\n  );\n}\nfunction fi(t, e, n, r, s) {\n  return (n === !0 ? Ua : n).map((i, a) => {\n    const [c, l] = qr[i];\n    if (l != null)\n      return un(\n        t,\n        i,\n        r[c],\n        r[l],\n        s,\n        `${e}Edge${a}`,\n        e\n      );\n  }).filter(Boolean);\n}\nfunction di(t) {\n  return (e, n) => {\n    const r = De(e.props, t).edge;\n    return r && (r === !0 || r.length) ? [\n      ...fi(\n        n,\n        t,\n        r,\n        e.getState().renderPoses,\n        e.props.zoom\n      ),\n      ...rl(e, t, n)\n    ] : pi(e, t, n);\n  };\n}\nfunction pi(t, e, n) {\n  return ui(t, Xr, e, n);\n}\nfunction rl(t, e, n) {\n  return ui(\n    t,\n    [\"nw\", \"ne\", \"sw\", \"se\"],\n    e,\n    n\n  );\n}\nfunction gi(t, e, n, r) {\n  const s = t.renderState;\n  s.renderDirectionMap || (s.renderDirectionMap = {});\n  const { renderPoses: o, rotation: i, direction: a } = t.getState(), c = s.renderDirectionMap, { zoom: l } = t.props, u = wt(a), f = i / Math.PI * 180;\n  return (r || Ve(c)).map((d) => {\n    const p = qr[d];\n    if (!p)\n      return null;\n    const g = (tt(f, 15) + u * Wo[d] + 720) % 180, h = [\"around-control\"];\n    return n && h.push(\"direction\", n), /* @__PURE__ */ it.jsx(\n      \"div\",\n      {\n        className: U(...h),\n        \"data-rotation\": g,\n        \"data-direction\": d,\n        style: Nn(\n          i,\n          l,\n          ...p.map((v) => o[v])\n        )\n      },\n      `direction-around-${d}`\n    );\n  });\n}\nfunction as(t, e, n) {\n  const {\n    position: r = \"client\",\n    left: s = -1 / 0,\n    top: o = -1 / 0,\n    right: i = 1 / 0,\n    bottom: a = 1 / 0\n  } = t || {}, c = {\n    position: r,\n    left: s,\n    top: o,\n    right: i,\n    bottom: a\n  };\n  return {\n    vertical: Xs(c, e, !0),\n    horizontal: Xs(c, n, !1)\n  };\n}\nfunction Un(t, e) {\n  const {\n    containerClientRect: {\n      clientHeight: n,\n      clientWidth: r,\n      clientLeft: s,\n      clientTop: o\n    },\n    snapOffset: {\n      left: i,\n      top: a,\n      right: c,\n      bottom: l\n    }\n  } = t.state, u = e || t.props.bounds || {}, d = (u.position || \"client\") === \"css\", {\n    left: p = -1 / 0,\n    top: g = -1 / 0\n  } = u;\n  let {\n    right: h = d ? -1 / 0 : 1 / 0,\n    bottom: v = d ? -1 / 0 : 1 / 0\n  } = u;\n  return d && (h = r + c - i - h, v = n + l - a - v), {\n    left: p + i - s,\n    right: h + i - s,\n    top: g + a - o,\n    bottom: v + a - o\n  };\n}\nfunction sl(t, e, n) {\n  const {\n    left: r,\n    top: s,\n    right: o,\n    bottom: i\n  } = Un(t), [a, c] = n;\n  let [l, u] = K(n, e);\n  B(l) < Bt && (l = 0), B(u) < Bt && (u = 0);\n  const f = u > 0, d = l > 0, p = {\n    isBound: !1,\n    offset: 0,\n    pos: 0\n  }, g = {\n    isBound: !1,\n    offset: 0,\n    pos: 0\n  };\n  if (l === 0 && u === 0)\n    return {\n      vertical: p,\n      horizontal: g\n    };\n  if (l === 0)\n    f ? i < c && (g.pos = i, g.offset = c - i) : s > c && (g.pos = s, g.offset = c - s);\n  else if (u === 0)\n    d ? o < a && (p.pos = o, p.offset = a - o) : r > a && (p.pos = r, p.offset = a - r);\n  else {\n    const h = u / l, v = n[1] - h * a;\n    let m = 0, S = 0, x = !1;\n    d && o <= a ? (m = h * o + v, S = o, x = !0) : !d && a <= r && (m = h * r + v, S = r, x = !0), x && (m < s || m > i) && (x = !1), x || (f && i <= c ? (m = i, S = (m - v) / h, x = !0) : !f && c <= s && (m = s, S = (m - v) / h, x = !0)), x && (p.isBound = !0, p.pos = S, p.offset = a - S, g.isBound = !0, g.pos = m, g.offset = c - m);\n  }\n  return {\n    vertical: p,\n    horizontal: g\n  };\n}\nfunction Xs(t, e, n) {\n  const r = t[n ? \"left\" : \"top\"], s = t[n ? \"right\" : \"bottom\"], o = Math.min(...e), i = Math.max(...e), a = [];\n  return r + 1 > o && a.push({\n    direction: \"start\",\n    isBound: !0,\n    offset: o - r,\n    pos: r\n  }), s - 1 < i && a.push({\n    direction: \"end\",\n    isBound: !0,\n    offset: i - s,\n    pos: s\n  }), a.length || a.push({\n    isBound: !1,\n    offset: 0,\n    pos: 0\n  }), a.sort((c, l) => B(l.offset) - B(c.offset));\n}\nfunction Hs(t, e, n) {\n  return (n ? t.map((s) => gn(s, n)) : t).some((s) => s[0] < e.left && B(s[0] - e.left) > 0.1 || s[0] > e.right && B(s[0] - e.right) > 0.1 || s[1] < e.top && B(s[1] - e.top) > 0.1 || s[1] > e.bottom && B(s[1] - e.bottom) > 0.1);\n}\nfunction ol(t, e, n) {\n  const r = Vt(t), s = Math.sqrt(r * r - e * e) || 0;\n  return [s, -s].sort((o, i) => B(o - t[n ? 0 : 1]) - B(i - t[n ? 0 : 1])).map((o) => xt([0, 0], n ? [o, e] : [e, o]));\n}\nfunction il(t, e, n, r, s) {\n  if (!t.props.bounds)\n    return [];\n  const o = s * Math.PI / 180, {\n    left: i,\n    top: a,\n    right: c,\n    bottom: l\n  } = Un(t), u = i - r[0], f = c - r[0], d = a - r[1], p = l - r[1], g = {\n    left: u,\n    top: d,\n    right: f,\n    bottom: p\n  };\n  if (!Hs(n, g, 0))\n    return [];\n  const h = [];\n  return [\n    [u, 0],\n    [f, 0],\n    [d, 1],\n    [p, 1]\n  ].forEach(([v, m]) => {\n    n.forEach((S) => {\n      const x = xt([0, 0], S);\n      h.push(...ol(S, v, m).map((C) => o + C - x).filter((C) => !Hs(e, g, C)).map((C) => tt(C * 180 / Math.PI, Bt)));\n    });\n  }), h;\n}\nconst al = [\"left\", \"right\", \"center\"], cl = [\"top\", \"bottom\", \"middle\"], qs = {\n  left: \"start\",\n  right: \"end\",\n  center: \"center\",\n  top: \"start\",\n  bottom: \"end\",\n  middle: \"center\"\n}, le = {\n  start: \"left\",\n  end: \"right\",\n  center: \"center\"\n}, ue = {\n  start: \"top\",\n  end: \"bottom\",\n  center: \"middle\"\n};\nfunction Be() {\n  return {\n    left: !1,\n    top: !1,\n    right: !1,\n    bottom: !1\n  };\n}\nfunction Xe(t, e) {\n  const {\n    props: {\n      snappable: n,\n      bounds: r,\n      innerBounds: s,\n      verticalGuidelines: o,\n      horizontalGuidelines: i,\n      snapGridWidth: a,\n      snapGridHeight: c\n    },\n    state: { guidelines: l, enableSnap: u }\n  } = t;\n  return !n || !u || e && n !== !0 && n.indexOf(e) < 0 ? !1 : !!(a || c || r || s || l && l.length || o && o.length || i && i.length);\n}\nfunction cs(t) {\n  return t === !1 ? {} : t === !0 || !t ? { left: !0, right: !0, top: !0, bottom: !0 } : t;\n}\nfunction ll(t, e) {\n  const n = cs(t), r = {};\n  for (const s in n)\n    s in e && n[s] && (r[s] = e[s]);\n  return r;\n}\nfunction ls(t, e) {\n  const n = ll(t, e), r = cl.filter((o) => o in n), s = al.filter((o) => o in n);\n  return {\n    horizontalNames: r,\n    verticalNames: s,\n    horizontal: r.map((o) => n[o]),\n    vertical: s.map((o) => n[o])\n  };\n}\nfunction ul(t, e, n) {\n  const r = ht(\n    t,\n    [e.clientLeft, e.clientTop],\n    n\n  );\n  return [\n    e.left + r[0],\n    e.top + r[1]\n  ];\n}\nfunction fl([t, e]) {\n  let n = e[0] - t[0], r = e[1] - t[1];\n  Math.abs(n) < Dt && (n = 0), Math.abs(r) < Dt && (r = 0);\n  let s = 0, o = 0, i = 0;\n  return n ? r ? (s = -r / n, o = 1, i = s * t[0] - t[1]) : (o = 1, i = -t[1]) : (s = -1, i = t[0]), [s, o, i].map((a) => tt(a, Dt));\n}\nconst hi = \"snapRotationThreshold\", vi = \"snapRotationDegrees\", mi = \"snapHorizontalThreshold\", xi = \"snapVerticalThreshold\";\nfunction Kn(t, e, n, r = [], s = [], o, i) {\n  var f;\n  const a = t.props, c = ((f = t.state.snapThresholdInfo) == null ? void 0 : f.multiples) || [1, 1], l = lo(\n    i,\n    a[mi],\n    5\n  ), u = lo(\n    o,\n    a[xi],\n    5\n  );\n  return Si(\n    t.state.guidelines,\n    e,\n    n,\n    r,\n    s,\n    l,\n    u,\n    c\n  );\n}\nfunction Si(t, e, n, r, s, o, i, a) {\n  return {\n    vertical: Ks(t, \"vertical\", e, i * a[0], r),\n    horizontal: Ks(t, \"horizontal\", n, o * a[1], s)\n  };\n}\nfunction dl(t, e, n) {\n  const [r, s] = n, [o, i] = e;\n  let [a, c] = K(n, e);\n  const l = c > 0, u = a > 0;\n  a = Wn(a), c = Wn(c);\n  const f = {\n    isSnap: !1,\n    offset: 0,\n    pos: 0\n  }, d = {\n    isSnap: !1,\n    offset: 0,\n    pos: 0\n  };\n  if (a === 0 && c === 0)\n    return {\n      vertical: f,\n      horizontal: d\n    };\n  const {\n    vertical: p,\n    horizontal: g\n  } = Kn(\n    t,\n    a ? [r] : [],\n    c ? [s] : [],\n    [],\n    [],\n    void 0,\n    void 0\n  );\n  p.posInfos.filter(({ pos: E }) => u ? E >= o : E <= o), g.posInfos.filter(({ pos: E }) => l ? E >= i : E <= i), p.isSnap = p.posInfos.length > 0, g.isSnap = g.posInfos.length > 0;\n  const {\n    isSnap: h,\n    guideline: v\n  } = Pr(p), {\n    isSnap: m,\n    guideline: S\n  } = Pr(g), x = m ? S.pos[1] : 0, C = h ? v.pos[0] : 0;\n  if (a === 0)\n    m && (d.isSnap = !0, d.pos = S.pos[1], d.offset = s - d.pos);\n  else if (c === 0)\n    h && (f.isSnap = !0, f.pos = C, f.offset = r - C);\n  else {\n    const E = c / a, D = n[1] - E * r;\n    let R = 0, y = 0, M = !1;\n    h ? (y = C, R = E * y + D, M = !0) : m && (R = x, y = (R - D) / E, M = !0), M && (f.isSnap = !0, f.pos = y, f.offset = r - y, d.isSnap = !0, d.pos = R, d.offset = s - R);\n  }\n  return {\n    vertical: f,\n    horizontal: d\n  };\n}\nfunction oe(t) {\n  let e = \"\";\n  return t === -1 || t === \"top\" || t === \"left\" ? e = \"start\" : t === 0 || t === \"center\" || t === \"middle\" ? e = \"center\" : (t === 1 || t === \"right\" || t === \"bottom\") && (e = \"end\"), e;\n}\nfunction Us(t, e, n, r) {\n  const s = ls(t.props.snapDirections, e), o = Kn(\n    t,\n    s.vertical,\n    s.horizontal,\n    s.verticalNames.map((c) => oe(c)),\n    s.horizontalNames.map((c) => oe(c)),\n    n,\n    r\n  ), i = oe(s.horizontalNames[o.horizontal.index]), a = oe(s.verticalNames[o.vertical.index]);\n  return {\n    vertical: {\n      ...o.vertical,\n      direction: a\n    },\n    horizontal: {\n      ...o.horizontal,\n      direction: i\n    }\n  };\n}\nfunction Pr(t) {\n  const e = t.isSnap;\n  if (!e)\n    return {\n      isSnap: !1,\n      offset: 0,\n      dist: -1,\n      pos: 0,\n      guideline: null\n    };\n  const n = t.posInfos[0], r = n.guidelineInfos[0], s = r.offset, o = r.dist, i = r.guideline;\n  return {\n    isSnap: e,\n    offset: s,\n    dist: o,\n    pos: n.pos,\n    guideline: i\n  };\n}\nfunction Ks(t, e, n, r, s = []) {\n  var l;\n  if (!t || !t.length)\n    return {\n      isSnap: !1,\n      index: -1,\n      direction: \"\",\n      posInfos: []\n    };\n  const i = e === \"vertical\" ? 0 : 1, a = n.map((u, f) => {\n    const d = s[f] || \"\", p = t.map((g) => {\n      const { pos: h } = g, v = u - h[i];\n      return {\n        offset: v,\n        dist: B(v),\n        guideline: g,\n        direction: d\n      };\n    }).filter(({ guideline: g, dist: h }) => {\n      const { type: v } = g;\n      return !(v !== e || h > r);\n    }).sort(\n      (g, h) => g.dist - h.dist\n    );\n    return {\n      pos: u,\n      index: f,\n      guidelineInfos: p,\n      direction: d\n    };\n  }).filter((u) => u.guidelineInfos.length > 0).sort((u, f) => u.guidelineInfos[0].dist - f.guidelineInfos[0].dist), c = a.length > 0;\n  return {\n    isSnap: c,\n    index: c ? a[0].index : -1,\n    direction: ((l = a[0]) == null ? void 0 : l.direction) ?? \"\",\n    posInfos: a\n  };\n}\nfunction pl(t, e, n, r, s) {\n  let o = [];\n  n[0] && n[1] ? o = [\n    n,\n    [-n[0], n[1]],\n    [n[0], -n[1]]\n  ] : !n[0] && !n[1] ? [\n    [-1, -1],\n    [1, -1],\n    [1, 1],\n    [-1, 1]\n  ].forEach((d, p, g) => {\n    const h = g[p + 1] || g[0];\n    o.push(d), o.push([\n      (d[0] + h[0]) / 2,\n      (d[1] + h[1]) / 2\n    ]);\n  }) : t.props.keepRatio ? o.push(\n    [-1, -1],\n    [-1, 1],\n    [1, -1],\n    [1, 1],\n    n\n  ) : (o.push(...Lc([\n    [-1, -1],\n    [1, -1],\n    [-1, -1],\n    [1, 1]\n  ], n)), o.length > 1 && o.push([\n    (o[0][0] + o[1][0]) / 2,\n    (o[0][1] + o[1][1]) / 2\n  ]));\n  const i = o.map((d) => yt(e, d)), a = i.map((d) => d[0]), c = i.map((d) => d[1]), l = Kn(\n    t,\n    a,\n    c,\n    o.map((d) => oe(d[0])),\n    o.map((d) => oe(d[1])),\n    r,\n    s\n  ), u = oe(o.map((d) => d[0])[l.vertical.index]), f = oe(o.map((d) => d[1])[l.horizontal.index]);\n  return {\n    vertical: {\n      ...l.vertical,\n      direction: u\n    },\n    horizontal: {\n      ...l.horizontal,\n      direction: f\n    }\n  };\n}\nfunction Ei(t, e) {\n  const n = B(t.offset), r = B(e.offset);\n  return t.isBound && e.isBound ? r - n : t.isBound ? -1 : e.isBound ? 1 : t.isSnap && e.isSnap ? r - n : t.isSnap ? -1 : e.isSnap || n < Bt ? 1 : r < Bt ? -1 : n - r;\n}\nfunction $n(t, e) {\n  return t.slice().sort((n, r) => {\n    const s = n.sign[e], o = r.sign[e], i = n.offset[e], a = r.offset[e];\n    if (s) {\n      if (!o)\n        return -1;\n    } else return 1;\n    return Ei(\n      { isBound: n.isBound, isSnap: n.isSnap, offset: i },\n      { isBound: r.isBound, isSnap: r.isSnap, offset: a }\n    );\n  })[0];\n}\nfunction gl(t, e, n) {\n  const r = [];\n  if (n)\n    B(e[0]) !== 1 || B(e[1]) !== 1 ? r.push(\n      [e, [-1, -1]],\n      [e, [-1, 1]],\n      [e, [1, -1]],\n      [e, [1, 1]]\n    ) : r.push(\n      [e, [t[0], -t[1]]],\n      [e, [-t[0], t[1]]]\n    ), r.push([e, t]);\n  else if (t[0] && t[1] || !t[0] && !t[1]) {\n    const s = t[0] ? t : [1, 1];\n    [1, -1].forEach((o) => {\n      [1, -1].forEach((i) => {\n        const a = [o * s[0], i * s[1]];\n        e[0] === a[0] && e[1] === a[1] || r.push([e, a]);\n      });\n    });\n  } else t[0] ? (B(e[0]) === 1 ? [1] : [1, -1]).forEach((o) => {\n    r.push(\n      [\n        [e[0], -1],\n        [o * t[0], -1]\n      ],\n      [\n        [e[0], 0],\n        [o * t[0], 0]\n      ],\n      [\n        [e[0], 1],\n        [o * t[0], 1]\n      ]\n    );\n  }) : t[1] && (B(e[1]) === 1 ? [1] : [1, -1]).forEach((o) => {\n    r.push(\n      [\n        [-1, e[1]],\n        [-1, o * t[1]]\n      ],\n      [\n        [0, e[1]],\n        [0, o * t[1]]\n      ],\n      [\n        [1, e[1]],\n        [1, o * t[1]]\n      ]\n    );\n  });\n  return r;\n}\nfunction Ci(t, e) {\n  const n = yr([e[0][0], e[1][0]]), r = yr([e[0][1], e[1][1]]);\n  return {\n    vertical: n <= t[0],\n    horizontal: r <= t[1]\n  };\n}\nfunction us(t, [e, n]) {\n  let r = n[0] - e[0], s = n[1] - e[1];\n  B(r) < Bt && (r = 0), B(s) < Bt && (s = 0);\n  let o, i;\n  return r ? s ? (o = s / r * (t[0] - e[0]) + e[1], i = t[1]) : (o = e[1], i = t[1]) : (o = e[0], i = t[0]), o - i;\n}\nfunction Di(t, e, n, r = Bt) {\n  return t.every((s) => {\n    const o = us(s, e);\n    return o <= 0 === n || B(o) <= r;\n  });\n}\nfunction Zs(t, e, n, r, s = 0) {\n  return r && e - s <= t || !r && t <= n + s ? {\n    isBound: !0,\n    offset: r ? e - t : n - t\n  } : {\n    isBound: !1,\n    offset: 0\n  };\n}\nfunction hl(t, { line: e, centerSign: n, verticalSign: r, horizontalSign: s, lineConstants: o }) {\n  const i = t.props.innerBounds;\n  if (!i)\n    return {\n      isAllBound: !1,\n      isBound: !1,\n      isVerticalBound: !1,\n      isHorizontalBound: !1,\n      offset: [0, 0]\n    };\n  const { left: a, top: c, width: l, height: u } = i, f = [[a, c], [a, c + u]], d = [[a, c], [a + l, c]], p = [[a + l, c], [a + l, c + u]], g = [[a, c + u], [a + l, c + u]];\n  if (Di([\n    [a, c],\n    [a + l, c],\n    [a, c + u],\n    [a + l, c + u]\n  ], e, n))\n    return {\n      isAllBound: !1,\n      isBound: !1,\n      isVerticalBound: !1,\n      isHorizontalBound: !1,\n      offset: [0, 0]\n    };\n  const h = ie(e, o, d, r), v = ie(e, o, g, r), m = ie(e, o, f, s), S = ie(e, o, p, s), x = h.isBound && v.isBound, C = h.isBound || v.isBound, E = m.isBound && S.isBound, D = m.isBound || S.isBound, R = Ne(h.offset, v.offset), y = Ne(m.offset, S.offset);\n  let M = [0, 0], P = !1, _ = !1;\n  return B(y) < B(R) ? (M = [R, 0], P = C, _ = x) : (M = [0, y], P = D, _ = E), {\n    isAllBound: _,\n    isVerticalBound: C,\n    isHorizontalBound: D,\n    isBound: P,\n    offset: M\n  };\n}\nfunction ie(t, [e, n], r, s, o, i) {\n  const a = t[0], c = r[0], l = r[1], u = Wn(l[1] - c[1]), f = Wn(l[0] - c[0]), d = n, p = e, g = -e / n;\n  if (f) {\n    if (!u) {\n      if (i && !d)\n        return {\n          isBound: !1,\n          offset: 0\n        };\n      if (p) {\n        const h = (c[1] - a[1]) / g + a[0];\n        return Zs(h, c[0], l[0], s, o);\n      } else {\n        const h = c[1] - a[1], v = B(h) <= (o || 0);\n        return {\n          isBound: v,\n          offset: v ? h : 0\n        };\n      }\n    }\n  } else {\n    if (i && !p)\n      return {\n        isBound: !1,\n        offset: 0\n      };\n    if (d) {\n      const h = g * (c[0] - a[0]) + a[1];\n      return Zs(h, c[1], l[1], s, o);\n    } else {\n      const h = c[0] - a[0], v = B(h) <= (o || 0);\n      return {\n        isBound: v,\n        offset: v ? h : 0\n      };\n    }\n  }\n  return {\n    isBound: !1,\n    offset: 0\n  };\n}\nfunction bi(t, e, n) {\n  return e.map((r) => {\n    const {\n      isBound: s,\n      offset: o,\n      isVerticalBound: i,\n      isHorizontalBound: a\n    } = hl(t, r), c = r.multiple, l = Qt({\n      datas: n,\n      distX: o[0],\n      distY: o[1]\n    }).map((u, f) => u * (c[f] ? 2 / c[f] : 0));\n    return {\n      sign: c,\n      isBound: s,\n      isVerticalBound: i,\n      isHorizontalBound: a,\n      isSnap: !1,\n      offset: l\n    };\n  });\n}\nfunction vl(t, e, n) {\n  const r = fs(t, e, [0, 0], !1).map((f) => ({\n    ...f,\n    multiple: f.multiple.map((d) => B(d) * 2)\n  })), s = bi(t, r, n), o = $n(s, 0), i = $n(s, 1);\n  let a = 0, c = 0;\n  const l = o.isVerticalBound || i.isVerticalBound, u = o.isHorizontalBound || i.isHorizontalBound;\n  return (l || u) && ([a, c] = $c({\n    datas: n,\n    distX: -o.offset[0],\n    distY: -i.offset[1]\n  })), {\n    vertical: {\n      isBound: l,\n      offset: a\n    },\n    horizontal: {\n      isBound: u,\n      offset: c\n    }\n  };\n}\nfunction ml(t, e) {\n  const n = [], r = t[0], s = t[1];\n  return r && s ? n.push(\n    [[0, s * 2], t, [-r, s]],\n    [[r * 2, 0], t, [r, -s]]\n  ) : r ? (n.push(\n    [[r * 2, 0], [r, 1], [r, -1]]\n  ), e && n.push(\n    [[0, -1], [r, -1], [-r, -1]],\n    [[0, 1], [r, 1], [-r, 1]]\n  )) : s ? (n.push(\n    [[0, s * 2], [1, s], [-1, s]]\n  ), e && n.push(\n    [[-1, 0], [-1, s], [-1, -s]],\n    [[1, 0], [1, s], [1, -s]]\n  )) : n.push(\n    [[-1, 0], [-1, -1], [-1, 1]],\n    [[1, 0], [1, -1], [1, 1]],\n    [[0, -1], [-1, -1], [1, -1]],\n    [[0, 1], [-1, 1], [1, 1]]\n  ), n;\n}\nfunction fs(t, e, n, r) {\n  const {\n    allMatrix: s,\n    is3d: o\n  } = t.state, i = Me(s, 100, 100, o ? 4 : 3), a = yt(i, [0, 0]);\n  return ml(n, r).map(([c, l, u]) => {\n    const f = [\n      yt(i, l),\n      yt(i, u)\n    ], d = fl(f), {\n      vertical: p,\n      horizontal: g\n    } = Ci(a, f), h = us(a, f) <= 0;\n    return {\n      multiple: c,\n      centerSign: h,\n      verticalSign: p,\n      horizontalSign: g,\n      lineConstants: d,\n      line: [\n        yt(e, l),\n        yt(e, u)\n      ]\n    };\n  });\n}\nfunction Js(t, e, n, r) {\n  const s = r ? t.map((o) => gn(o, r)) : t;\n  return [\n    [s[0], s[1]],\n    [s[1], s[3]],\n    [s[3], s[2]],\n    [s[2], s[0]]\n  ].some((o) => {\n    const i = us(n, o) <= 0;\n    return !Di(e, o, i);\n  });\n}\nfunction xl([t, e]) {\n  const n = e[0] - t[0], r = e[1] - t[1];\n  if (!n)\n    return B(t[0]);\n  if (!r)\n    return B(t[1]);\n  const s = r / n;\n  return B((-s * t[0] + t[1]) / Math.sqrt(Math.pow(s, 2) + 1));\n}\nfunction Sl([t, e]) {\n  const n = e[0] - t[0], r = e[1] - t[1];\n  if (!n)\n    return [t[0], 0];\n  if (!r)\n    return [0, t[1]];\n  const s = r / n, o = -s * t[0] + t[1];\n  return [\n    -o / (s + 1 / s),\n    o / (s * s + 1)\n  ];\n}\nfunction El(t, e, n, r, s) {\n  const o = t.props.innerBounds, i = s * Math.PI / 180;\n  if (!o)\n    return [];\n  const {\n    left: a,\n    top: c,\n    width: l,\n    height: u\n  } = o, f = a - r[0], d = a + l - r[0], p = c - r[1], g = c + u - r[1], h = [\n    [f, p],\n    [d, p],\n    [f, g],\n    [d, g]\n  ], v = yt(n, [0, 0]);\n  if (!Js(n, h, v, 0))\n    return [];\n  const m = [], S = h.map((x) => [\n    Vt(x),\n    xt([0, 0], x)\n  ]);\n  return [\n    [n[0], n[1]],\n    [n[1], n[3]],\n    [n[3], n[2]],\n    [n[2], n[0]]\n  ].forEach((x) => {\n    const C = xt([0, 0], Sl(x)), E = xl(x);\n    m.push(...S.filter(([D]) => D && E <= D).map(([D, R]) => {\n      const y = Math.acos(D ? E / D : 0), M = R + y, P = R - y;\n      return [\n        i + M - C,\n        i + P - C\n      ];\n    }).reduce((D, R) => (D.push(...R), D), []).filter((D) => !Js(e, h, v, D)).map((D) => tt(D * 180 / Math.PI, Bt)));\n  }), m;\n}\nfunction Cl(t) {\n  const e = t.props.innerBounds, n = Be();\n  if (!e)\n    return {\n      boundMap: n,\n      vertical: [],\n      horizontal: []\n    };\n  const {\n    pos1: r,\n    pos2: s,\n    pos3: o,\n    pos4: i\n  } = t.getRect(), a = [r, s, o, i], c = yt(a, [0, 0]), { left: l, top: u, width: f, height: d } = e, p = [[l, u], [l, u + d]], g = [[l, u], [l + f, u]], h = [[l + f, u], [l + f, u + d]], v = [[l, u + d], [l + f, u + d]], m = fs(t, a, [0, 0], !1), S = [], x = [];\n  return m.forEach((C) => {\n    const { line: E, lineConstants: D } = C, {\n      horizontal: R,\n      vertical: y\n    } = Ci(c, E), M = ie(E, D, g, y, 1, !0), P = ie(E, D, v, y, 1, !0), _ = ie(E, D, p, R, 1, !0), O = ie(E, D, h, R, 1, !0);\n    M.isBound && !n.top && (S.push(u), n.top = !0), P.isBound && !n.bottom && (S.push(u + d), n.bottom = !0), _.isBound && !n.left && (x.push(l), n.left = !0), O.isBound && !n.right && (x.push(l + f), n.right = !0);\n  }), {\n    boundMap: n,\n    horizontal: S,\n    vertical: x\n  };\n}\nfunction Dl(t, e, n, r) {\n  let s = e[0] - t[0], o = e[1] - t[1];\n  if (B(s) < Dt && (s = 0), B(o) < Dt && (o = 0), !s)\n    return r ? [0, 0] : [0, n];\n  if (!o)\n    return r ? [n, 0] : [0, 0];\n  const i = o / s, a = t[1] - i * t[0];\n  if (r) {\n    const c = i * (e[0] + n) + a;\n    return [n, c - e[1]];\n  } else\n    return [(e[1] + n - a) / i - e[0], n];\n}\nfunction _r(t, e, n, r, s) {\n  const o = Dl(t, e, n, r);\n  if (!o)\n    return {\n      isOutside: !1,\n      offset: [0, 0]\n    };\n  const i = te(t, e), a = te(o, t), c = te(o, e), l = a > i || c > i, [u, f] = Qt({\n    datas: s,\n    distX: o[0],\n    distY: o[1]\n  });\n  return {\n    offset: [u, f],\n    isOutside: l\n  };\n}\nfunction Fn(t, e) {\n  return t.isBound ? t.offset : e.isSnap ? Pr(e).offset : 0;\n}\nfunction bl(t, [e, n], [r, s], [o, i], [a, c]) {\n  let l = -a, u = -c;\n  if (t && e && n) {\n    l = 0, u = 0;\n    const f = [];\n    if (r && s ? f.push([0, c], [a, 0]) : r ? f.push([a, 0]) : s ? f.push([0, c]) : o && i ? f.push([0, c], [a, 0]) : o ? f.push([a, 0]) : i && f.push([0, c]), f.length) {\n      f.sort((p, g) => Vt(K([e, n], p)) - Vt(K([e, n], g)));\n      const d = f[0];\n      if (d[0] && B(e) > Dt)\n        l = -d[0], u = n * B(e + l) / B(e) - n;\n      else if (d[1] && B(n) > Dt) {\n        const p = n;\n        u = -d[1], l = e * B(n + u) / B(p) - e;\n      }\n      if (t && s && r)\n        if (B(l) > Dt && B(l) < B(a)) {\n          const p = B(a) / B(l);\n          l *= p, u *= p;\n        } else if (B(u) > Dt && B(u) < B(c)) {\n          const p = B(c) / B(u);\n          l *= p, u *= p;\n        } else\n          l = Ne(-a, l), u = Ne(-c, u);\n    }\n  } else\n    l = e || r ? -a : 0, u = n || s ? -c : 0;\n  return [l, u];\n}\nfunction yl(t, e, n, r, s, o) {\n  if (!Xe(t, \"draggable\"))\n    return [\n      {\n        isSnap: !1,\n        isBound: !1,\n        offset: 0\n      },\n      {\n        isSnap: !1,\n        isBound: !1,\n        offset: 0\n      }\n    ];\n  const i = hs(o.absolutePoses, [e, n]), { left: a, right: c, top: l, bottom: u } = Yt(i), f = {\n    horizontal: i.map((P) => P[1]),\n    vertical: i.map((P) => P[0])\n  }, d = cs(t.props.snapDirections), p = ls(d, {\n    left: a,\n    right: c,\n    top: l,\n    bottom: u,\n    center: (a + c) / 2,\n    middle: (l + u) / 2\n  }), {\n    vertical: g,\n    horizontal: h\n  } = Zn(t, s, p, f), {\n    vertical: v,\n    horizontal: m\n  } = vl(t, i, o), S = g.isSnap, x = h.isSnap, C = g.isBound || v.isBound, E = h.isBound || m.isBound, D = Ne(\n    g.offset,\n    v.offset\n  ), R = Ne(\n    h.offset,\n    m.offset\n  ), [y, M] = bl(\n    r,\n    [e, n],\n    [C, E],\n    [S, x],\n    [D, R]\n  );\n  return [\n    {\n      isBound: C,\n      isSnap: S,\n      offset: y\n    },\n    {\n      isBound: E,\n      isSnap: x,\n      offset: M\n    }\n  ];\n}\nfunction Zn(t, e, n, r = n) {\n  const {\n    horizontal: s,\n    vertical: o\n  } = as(\n    Un(t),\n    r.vertical,\n    r.horizontal\n  ), {\n    horizontal: i,\n    vertical: a\n  } = e ? {\n    horizontal: { isSnap: !1, index: -1 },\n    vertical: { isSnap: !1, index: -1 }\n  } : Kn(\n    t,\n    n.vertical,\n    n.horizontal,\n    void 0,\n    void 0,\n    void 0,\n    void 0\n  ), c = Fn(\n    s[0],\n    i\n  ), l = Fn(\n    o[0],\n    a\n  ), u = B(c), f = B(l);\n  return {\n    horizontal: {\n      isBound: s[0].isBound,\n      isSnap: i.isSnap,\n      snapIndex: i.index,\n      offset: c,\n      dist: u,\n      bounds: s,\n      snap: i\n    },\n    vertical: {\n      isBound: o[0].isBound,\n      isSnap: a.isSnap,\n      snapIndex: a.index,\n      offset: l,\n      dist: f,\n      bounds: o,\n      snap: a\n    }\n  };\n}\nfunction Qs(t, e, n, r, s, o, i = [1, 1]) {\n  const {\n    horizontal: a,\n    vertical: c\n  } = as(e, n, r), {\n    horizontal: l,\n    vertical: u\n  } = Si(\n    t,\n    n,\n    r,\n    [],\n    [],\n    s,\n    o,\n    i\n  ), f = Fn(\n    a[0],\n    l\n  ), d = Fn(\n    c[0],\n    u\n  ), p = B(f), g = B(d);\n  return {\n    horizontal: {\n      isBound: a[0].isBound,\n      isSnap: l.isSnap,\n      snapIndex: l.index,\n      offset: f,\n      dist: p,\n      bounds: a,\n      snap: l\n    },\n    vertical: {\n      isBound: c[0].isBound,\n      isSnap: u.isSnap,\n      snapIndex: u.index,\n      offset: d,\n      dist: g,\n      bounds: c,\n      snap: u\n    }\n  };\n}\nfunction Rl(t, e, n, r) {\n  const s = xt(t, e) / Math.PI * 180, {\n    vertical: {\n      isBound: o,\n      isSnap: i,\n      dist: a\n    },\n    horizontal: {\n      isBound: c,\n      isSnap: l,\n      dist: u\n    }\n  } = n, f = s % 180, d = f < 3 || f > 177, p = f > 87 && f < 93;\n  return u < a && (o || i && !p && (!r || !d)) ? \"vertical\" : c || l && !d && (!r || !p) ? \"horizontal\" : \"\";\n}\nfunction Ml(t, e, n, r, s, o) {\n  return n.map(([i, a]) => {\n    const c = yt(e, i), l = yt(e, a), u = r ? Pl(\n      t,\n      c,\n      l,\n      s\n    ) : Zn(t, s, {\n      vertical: [l[0]],\n      horizontal: [l[1]]\n    }), {\n      horizontal: {\n        // dist: otherHorizontalDist,\n        offset: f,\n        isBound: d,\n        isSnap: p\n      },\n      vertical: {\n        // dist: otherVerticalDist,\n        offset: g,\n        isBound: h,\n        isSnap: v\n      }\n    } = u, m = K(a, i);\n    if (!g && !f)\n      return {\n        isBound: h || d,\n        isSnap: v || p,\n        sign: m,\n        offset: [0, 0]\n      };\n    const S = Rl(\n      c,\n      l,\n      u,\n      r\n    );\n    if (!S)\n      return {\n        sign: m,\n        isBound: !1,\n        isSnap: !1,\n        offset: [0, 0]\n      };\n    const x = S === \"vertical\";\n    let C = [0, 0];\n    return !r && B(a[0]) === 1 && B(a[1]) === 1 && i[0] !== a[0] && i[1] !== a[1] ? C = Qt({\n      datas: o,\n      distX: -g,\n      distY: -f\n    }) : C = _r(\n      c,\n      l,\n      -(x ? g : f),\n      x,\n      o\n    ).offset, C = C.map((E, D) => E * (m[D] ? 2 / m[D] : 0)), {\n      sign: m,\n      isBound: x ? h : d,\n      isSnap: x ? v : p,\n      offset: C\n    };\n  });\n}\nfunction to(t, e) {\n  return t.isBound ? t.offset : e.isSnap ? e.offset : 0;\n}\nfunction Pl(t, e, n, r) {\n  const {\n    horizontal: s,\n    vertical: o\n  } = sl(t, e, n), {\n    horizontal: i,\n    vertical: a\n  } = r ? {\n    horizontal: { isSnap: !1 },\n    vertical: { isSnap: !1 }\n  } : dl(t, e, n), c = to(\n    s,\n    i\n  ), l = to(\n    o,\n    a\n  ), u = B(c), f = B(l);\n  return {\n    horizontal: {\n      isBound: s.isBound,\n      isSnap: i.isSnap,\n      offset: c,\n      dist: u\n    },\n    vertical: {\n      isBound: o.isBound,\n      isSnap: a.isSnap,\n      offset: l,\n      dist: f\n    }\n  };\n}\nfunction _l(t, e, n, r, s) {\n  const o = [-n[0], -n[1]], { width: i, height: a } = t.state, c = t.props.bounds;\n  let l = 1 / 0, u = 1 / 0;\n  if (c) {\n    const f = [\n      [n[0], -n[1]],\n      [-n[0], n[1]]\n    ], {\n      left: d = -1 / 0,\n      top: p = -1 / 0,\n      right: g = 1 / 0,\n      bottom: h = 1 / 0\n    } = c;\n    f.forEach((v) => {\n      const m = v[0] !== o[0], S = v[1] !== o[1], x = yt(e, v), C = xt(r, x) * 360 / Math.PI;\n      if (S) {\n        const E = x.slice();\n        (B(C - 360) < 2 || B(C - 180) < 2) && (E[1] = r[1]);\n        const {\n          offset: [, D],\n          isOutside: R\n        } = _r(\n          r,\n          E,\n          (r[1] < x[1] ? h : p) - x[1],\n          !1,\n          s\n        );\n        isNaN(D) || (u = a + (R ? 1 : -1) * B(D));\n      }\n      if (m) {\n        const E = x.slice();\n        (B(C - 90) < 2 || B(C - 270) < 2) && (E[0] = r[0]);\n        const {\n          offset: [D],\n          isOutside: R\n        } = _r(\n          r,\n          E,\n          (r[0] < x[0] ? g : d) - x[0],\n          !0,\n          s\n        );\n        isNaN(D) || (l = i + (R ? 1 : -1) * B(D));\n      }\n    });\n  }\n  return {\n    maxWidth: l,\n    maxHeight: u\n  };\n}\nconst Ot = {\n  name: \"draggable\",\n  props: [\n    \"draggable\",\n    \"throttleDrag\",\n    \"throttleDragRotate\",\n    \"hideThrottleDragRotateLine\",\n    \"startDragRotate\",\n    \"edgeDraggable\"\n  ],\n  events: [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"dragGroupStart\",\n    \"dragGroup\",\n    \"dragGroupEnd\"\n  ],\n  requestStyle() {\n    return [\"left\", \"top\", \"right\", \"bottom\"];\n  },\n  requestChildStyle() {\n    return [\"left\", \"top\", \"right\", \"bottom\"];\n  },\n  render(t, e) {\n    const { hideThrottleDragRotateLine: n, throttleDragRotate: r, zoom: s } = t.props, { dragInfo: o, beforeOrigin: i } = t.getState();\n    if (n || !r || !o)\n      return [];\n    const a = o.dist;\n    if (!a[0] && !a[1])\n      return [];\n    const c = Vt(a), l = xt(a, [0, 0]);\n    return [/* @__PURE__ */ it.jsx(\"div\", { className: U(\n      \"line\",\n      \"horizontal\",\n      \"dragline\",\n      \"dashed\"\n    ), style: {\n      width: `${c}px`,\n      transform: `translate(${i[0]}px, ${i[1]}px) rotate(${l}rad) scaleY(${s})`\n    } }, \"dragRotateGuideline\")];\n  },\n  dragStart(t, e) {\n    const { datas: n, parentEvent: r, parentGesto: s } = e, o = t.state, {\n      gestos: i,\n      style: a\n    } = o;\n    if (i.draggable)\n      return !1;\n    i.draggable = s || t.targetGesto, n.datas = {}, n.left = parseFloat(a.left || \"\") || 0, n.top = parseFloat(a.top || \"\") || 0, n.bottom = parseFloat(a.bottom || \"\") || 0, n.right = parseFloat(a.right || \"\") || 0, n.startValue = [0, 0], Re(t, e), qn(t, e, \"translate\"), nu(t, n), n.prevDist = [0, 0], n.prevBeforeDist = [0, 0], n.isDrag = !1, n.deltaOffset = [0, 0];\n    const c = et(t, e, {\n      set: (u) => {\n        n.startValue = u;\n      },\n      ...Hn(t, e)\n    });\n    return (r || j(t, \"onDragStart\", c)) !== !1 ? (n.isDrag = !0, t.state.dragInfo = {\n      startRect: t.getRect(),\n      dist: [0, 0]\n    }) : (i.draggable = null, n.isPinch = !1), n.isDrag ? c : !1;\n  },\n  drag(t, e) {\n    if (!e)\n      return;\n    jn(t, e, \"translate\");\n    const {\n      datas: n,\n      parentEvent: r,\n      parentFlag: s,\n      isPinch: o,\n      deltaOffset: i,\n      useSnap: a,\n      isRequest: c,\n      isGroup: l,\n      parentThrottleDrag: u\n    } = e;\n    let { distX: f, distY: d } = e;\n    const { isDrag: p, prevDist: g, prevBeforeDist: h, startValue: v } = n;\n    if (!p)\n      return;\n    i && (f += i[0], d += i[1]);\n    const m = t.props, S = m.parentMoveable, x = l ? 0 : m.throttleDrag || u || 0, C = r ? 0 : m.throttleDragRotate || 0;\n    let E = 0, D = !1, R = !1, y = !1, M = !1;\n    if (!r && C > 0 && (f || d)) {\n      const W = m.startDragRotate || 0, J = tt(W + xt([0, 0], [f, d]) * 180 / Math.PI, C) - W, q = d * Math.abs(Math.cos((J - 90) / 180 * Math.PI)), F = f * Math.abs(Math.cos(J / 180 * Math.PI)), H = Vt([F, q]);\n      E = J * Math.PI / 180, f = H * Math.cos(E), d = H * Math.sin(E);\n    }\n    if (!o && !r && !s) {\n      const [W, J] = yl(\n        t,\n        f,\n        d,\n        C,\n        !a && c || i,\n        n\n      );\n      D = W.isSnap, R = W.isBound, y = J.isSnap, M = J.isBound;\n      const q = W.offset, F = J.offset;\n      f += q, d += F;\n    }\n    const P = at(si({ datas: n, distX: f, distY: d }), v), _ = at(kc({ datas: n, distX: f, distY: d }), v);\n    Ws(_, Bt), Ws(P, Bt), C || (!D && !R && (_[0] = tt(_[0], x), P[0] = tt(P[0], x)), !y && !M && (_[1] = tt(_[1], x), P[1] = tt(P[1], x)));\n    const O = K(P, v), T = K(_, v), w = K(T, g), k = K(O, h);\n    n.prevDist = T, n.prevBeforeDist = O, n.passDelta = w, n.passDist = T;\n    const I = n.left + O[0], $ = n.top + O[1], G = n.right - O[0], L = n.bottom - O[1], z = Xn(\n      n,\n      `translate(${_[0]}px, ${_[1]}px)`,\n      `translate(${T[0]}px, ${T[1]}px)`\n    );\n    if (os(e, z), t.state.dragInfo.dist = r ? [0, 0] : T, !r && !S && w.every((W) => !W) && k.some((W) => !W))\n      return;\n    const {\n      width: N,\n      height: Z\n    } = t.state, Y = et(t, e, {\n      transform: z,\n      dist: T,\n      delta: w,\n      translate: _,\n      beforeDist: O,\n      beforeDelta: k,\n      beforeTranslate: P,\n      left: I,\n      top: $,\n      right: G,\n      bottom: L,\n      width: N,\n      height: Z,\n      isPinch: o,\n      ...It({\n        transform: z\n      }, e)\n    });\n    return !r && j(t, \"onDrag\", Y), Y;\n  },\n  dragAfter(t, e) {\n    const n = e.datas, {\n      deltaOffset: r\n    } = n;\n    return r[0] || r[1] ? (n.deltaOffset = [0, 0], this.drag(t, { ...e, deltaOffset: r })) : !1;\n  },\n  dragEnd(t, e) {\n    const { parentEvent: n, datas: r } = e;\n    if (t.state.dragInfo = null, !r.isDrag)\n      return;\n    r.isDrag = !1;\n    const s = $t(t, e, {});\n    return !n && j(t, \"onDragEnd\", s), s;\n  },\n  dragGroupStart(t, e) {\n    var f;\n    const { datas: n, clientX: r, clientY: s } = e, o = this.dragStart(t, e);\n    if (!o)\n      return !1;\n    const {\n      childEvents: i,\n      eventParams: a\n    } = cr(t, this, \"dragStart\", [\n      r || 0,\n      s || 0\n    ], e, !1, \"draggable\"), c = {\n      ...o,\n      targets: t.props.targets,\n      events: a\n    }, l = j(t, \"onDragGroupStart\", c);\n    n.isDrag = l !== !1;\n    const u = ((f = i[0]) == null ? void 0 : f.datas.startValue) ?? [0, 0];\n    return n.throttleOffset = [u[0] % 1, u[1] % 1], n.isDrag ? o : !1;\n  },\n  dragGroup(t, e) {\n    const { datas: n } = e;\n    if (!n.isDrag)\n      return;\n    const r = this.drag(t, {\n      ...e,\n      parentThrottleDrag: t.props.throttleDrag\n    }), { passDelta: s } = e.datas, {\n      eventParams: o\n    } = cr(t, this, \"drag\", s, e, !1, \"draggable\");\n    if (!r)\n      return;\n    const i = {\n      targets: t.props.targets,\n      events: o,\n      ...r\n    };\n    return j(t, \"onDragGroup\", i), i;\n  },\n  dragGroupEnd(t, e) {\n    const { isDrag: n, datas: r } = e;\n    if (!r.isDrag)\n      return;\n    this.dragEnd(t, e);\n    const {\n      eventParams: s\n    } = cr(t, this, \"dragEnd\", [0, 0], e, !1, \"draggable\");\n    return j(t, \"onDragGroupEnd\", $t(t, e, {\n      targets: t.props.targets,\n      events: s\n    })), n;\n  },\n  /**\n       * @method Moveable.Draggable#request\n       * @param {object} [e] - the draggable's request parameter\n       * @param {number} [e.x] - x position\n       * @param {number} [e.y] - y position\n       * @param {number} [e.deltaX] - X number to move\n       * @param {number} [e.deltaY] - Y number to move\n       * @return {Moveable.Requester} Moveable Requester\n       * @example\n  \n       * // Instantly Request (requestStart - request - requestEnd)\n       * // Use Relative Value\n       * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n       * // Use Absolute Value\n       * moveable.request(\"draggable\", { x: 200, y: 100 }, true);\n       *\n       * // requestStart\n       * const requester = moveable.request(\"draggable\");\n       *\n       * // request\n       * // Use Relative Value\n       * requester.request({ deltaX: 10, deltaY: 10 });\n       * requester.request({ deltaX: 10, deltaY: 10 });\n       * requester.request({ deltaX: 10, deltaY: 10 });\n       * // Use Absolute Value\n       * moveable.request(\"draggable\", { x: 200, y: 100 });\n       * moveable.request(\"draggable\", { x: 220, y: 100 });\n       * moveable.request(\"draggable\", { x: 240, y: 100 });\n       *\n       * // requestEnd\n       * requester.requestEnd();\n       */\n  request(t) {\n    const e = {}, n = t.getRect();\n    let r = 0, s = 0, o = !1;\n    return {\n      isControl: !1,\n      requestStart(i) {\n        return o = i.useSnap, { datas: e, useSnap: o };\n      },\n      request(i) {\n        return \"x\" in i ? r = i.x - n.left : \"deltaX\" in i && (r += i.deltaX), \"y\" in i ? s = i.y - n.top : \"deltaY\" in i && (s += i.deltaY), { datas: e, distX: r, distY: s, useSnap: o };\n      },\n      requestEnd() {\n        return { datas: e, isDrag: !0, useSnap: o };\n      }\n    };\n  },\n  unset(t) {\n    t.state.gestos.draggable = null, t.state.dragInfo = null;\n  }\n};\nfunction yi(t, e) {\n  return {\n    fixedPosition: yt(t, e),\n    fixedDirection: e,\n    fixedOffset: [0, 0]\n  };\n}\nfunction Tl(t, e) {\n  const {\n    allMatrix: n,\n    is3d: r,\n    width: s,\n    height: o\n  } = t, i = r ? 4 : 3, a = [\n    s / 2 * (1 + e[0]),\n    o / 2 * (1 + e[1])\n  ];\n  return {\n    fixedPosition: ht(n, a, i),\n    fixedDirection: e,\n    fixedOffset: [0, 0]\n  };\n}\nfunction Ri(t, e) {\n  const {\n    allMatrix: n,\n    is3d: r,\n    width: s,\n    height: o\n  } = t, i = r ? 4 : 3, a = jc(e, s, o), c = ht(n, e, i), l = [\n    s ? 0 : e[0],\n    o ? 0 : e[1]\n  ];\n  return {\n    fixedPosition: c,\n    fixedDirection: a,\n    fixedOffset: l\n  };\n}\nconst eo = xs(\"resizable\"), Tr = {\n  name: \"resizable\",\n  ableGroup: \"size\",\n  canPinch: !0,\n  props: [\n    \"resizable\",\n    \"throttleResize\",\n    \"renderDirections\",\n    \"displayAroundControls\",\n    \"keepRatio\",\n    \"resizeFormat\",\n    \"keepRatioFinally\",\n    \"edge\",\n    \"checkResizableError\"\n  ],\n  events: [\n    \"resizeStart\",\n    \"beforeResize\",\n    \"resize\",\n    \"resizeEnd\",\n    \"resizeGroupStart\",\n    \"beforeResizeGroup\",\n    \"resizeGroup\",\n    \"resizeGroupEnd\"\n  ],\n  render: di(\"resizable\"),\n  dragControlCondition: eo,\n  viewClassName: ms(\"resizable\"),\n  dragControlStart(t, e) {\n    const {\n      inputEvent: n,\n      isPinch: r,\n      isGroup: s,\n      parentDirection: o,\n      parentGesto: i,\n      datas: a,\n      parentFixedDirection: c,\n      parentEvent: l\n    } = e, u = Li(\n      o,\n      r,\n      n,\n      a\n    ), f = t.state, { target: d, width: p, height: g, gestos: h } = f;\n    if (!u || !d || h.resizable)\n      return !1;\n    h.resizable = i || t.controlGesto, !r && Re(t, e), a.datas = {}, a.direction = u, a.startOffsetWidth = p, a.startOffsetHeight = g, a.prevWidth = 0, a.prevHeight = 0, a.minSize = [0, 0], a.startWidth = f.inlineCSSWidth || f.cssWidth, a.startHeight = f.inlineCSSHeight || f.cssHeight, a.maxSize = [1 / 0, 1 / 0], s || (a.minSize = [f.minOffsetWidth, f.minOffsetHeight], a.maxSize = [f.maxOffsetWidth, f.maxOffsetHeight]);\n    const v = t.props.transformOrigin || \"% %\";\n    a.transformOrigin = v && re(v) ? v.split(\" \") : v, a.startOffsetMatrix = f.offsetMatrix, a.startTransformOrigin = f.transformOrigin, a.isWidth = (e == null ? void 0 : e.parentIsWidth) ?? (!u[0] && !u[1] || u[0] || !u[1]);\n    function m(y) {\n      a.ratio = y && isFinite(y) ? y : 0;\n    }\n    a.startPositions = jt(t.state);\n    function S(y) {\n      const M = yi(\n        a.startPositions,\n        y\n      );\n      a.fixedDirection = M.fixedDirection, a.fixedPosition = M.fixedPosition, a.fixedOffset = M.fixedOffset;\n    }\n    function x(y) {\n      const M = Ri(t.state, y);\n      a.fixedDirection = M.fixedDirection, a.fixedPosition = M.fixedPosition, a.fixedOffset = M.fixedOffset;\n    }\n    function C(y) {\n      a.minSize = [\n        ft(`${y[0]}`, 0) || 0,\n        ft(`${y[1]}`, 0) || 0\n      ];\n    }\n    function E(y) {\n      const M = [y[0] || 1 / 0, y[1] || 1 / 0];\n      (!an(M[0]) || isFinite(M[0])) && (M[0] = ft(`${M[0]}`, 0) || 1 / 0), (!an(M[1]) || isFinite(M[1])) && (M[1] = ft(`${M[1]}`, 0) || 1 / 0), a.maxSize = M;\n    }\n    m(p / g), S(c || [-u[0], -u[1]]), a.setFixedDirection = S, a.setFixedPosition = x, a.setMin = C, a.setMax = E;\n    const D = et(t, e, {\n      direction: u,\n      startRatio: a.ratio,\n      set: ([y, M]) => {\n        a.startWidth = y, a.startHeight = M;\n      },\n      setMin: C,\n      setMax: E,\n      setRatio: m,\n      setFixedDirection: S,\n      setFixedPosition: x,\n      setOrigin: (y) => {\n        a.transformOrigin = y;\n      },\n      dragStart: Ot.dragStart(\n        t,\n        new Fe().dragStart([0, 0], e)\n      )\n    }), R = l || j(t, \"onResizeStart\", D);\n    return a.startFixedDirection = a.fixedDirection, a.startFixedPosition = a.fixedPosition, R !== !1 && (a.isResize = !0, t.state.snapRenderInfo = {\n      request: e.isRequest,\n      direction: u\n    }), a.isResize ? D : !1;\n  },\n  dragControl(t, e) {\n    const {\n      datas: n,\n      parentFlag: r,\n      isPinch: s,\n      parentKeepRatio: o,\n      dragClient: i,\n      parentDist: a,\n      useSnap: c,\n      isRequest: l,\n      isGroup: u,\n      parentEvent: f,\n      resolveMatrix: d\n    } = e, {\n      isResize: p,\n      transformOrigin: g,\n      startWidth: h,\n      startHeight: v,\n      prevWidth: m,\n      prevHeight: S,\n      minSize: x,\n      maxSize: C,\n      ratio: E,\n      startOffsetWidth: D,\n      startOffsetHeight: R,\n      isWidth: y\n    } = n;\n    if (!p)\n      return;\n    if (d) {\n      const { is3d: st } = t.state, { startOffsetMatrix: Ft, startTransformOrigin: Lt } = n, ut = st ? 4 : 3;\n      let St = ln(Gn(e));\n      const Kt = Math.sqrt(St.length);\n      ut !== Kt && (St = Ut(St, Kt, ut));\n      const de = mn(\n        Ft,\n        St,\n        Lt,\n        ut\n      ), Pe = Me(\n        de,\n        D,\n        R,\n        ut\n      );\n      n.startPositions = Pe, n.nextTargetMatrix = St, n.nextAllMatrix = de;\n    }\n    const M = De(t.props, \"resizable\"), {\n      resizeFormat: P,\n      throttleResize: _ = r ? 0 : 1,\n      parentMoveable: O,\n      keepRatioFinally: T\n    } = M, w = n.direction;\n    let k = w, I = 0, $ = 0;\n    !w[0] && !w[1] && (k = [1, 1]);\n    const G = E && (o ?? M.keepRatio) || !1;\n    function L() {\n      const st = n.fixedDirection, Ft = Xi(k, G, n, e);\n      I = Ft.distWidth, $ = Ft.distHeight;\n      let Lt = k[0] - st[0] || G ? Math.max(D + I, Bt) : D, ut = k[1] - st[1] || G ? Math.max(R + $, Bt) : R;\n      return G && D && R && (y ? ut = Lt / E : Lt = ut * E), [Lt, ut];\n    }\n    let [z, N] = L();\n    f || (n.setFixedDirection(n.fixedDirection), j(\n      t,\n      \"onBeforeResize\",\n      et(\n        t,\n        e,\n        {\n          startFixedDirection: n.startFixedDirection,\n          startFixedPosition: n.startFixedPosition,\n          setFixedDirection(st) {\n            return n.setFixedDirection(st), [z, N] = L(), [z, N];\n          },\n          setFixedPosition(st) {\n            return n.setFixedPosition(st), [z, N] = L(), [z, N];\n          },\n          boundingWidth: z,\n          boundingHeight: N,\n          setSize(st) {\n            [z, N] = st;\n          }\n        },\n        !0\n      )\n    ));\n    let Z = i;\n    i || (!r && s ? Z = Uc(t, [0, 0]) : Z = n.fixedPosition);\n    let Y = [0, 0];\n    s || (Y = tu(\n      t,\n      z,\n      N,\n      w,\n      Z,\n      !c && l,\n      n\n    )), a && (!a[0] && (Y[0] = 0), !a[1] && (Y[1] = 0));\n    function W() {\n      P && ([z, N] = P([\n        z,\n        N\n      ])), z = tt(z, _), N = tt(N, _);\n    }\n    if (G) {\n      k[0] && k[1] && Y[0] && Y[1] && (B(Y[0]) > B(Y[1]) ? Y[1] = 0 : Y[0] = 0);\n      const st = !Y[0] && !Y[1];\n      st && W(), k[0] && !k[1] || Y[0] && !Y[1] || st && y ? (z += Y[0], N = z / E) : (!k[0] && k[1] || !Y[0] && Y[1] || st && !y) && (N += Y[1], z = N * E);\n    } else\n      z += Y[0], N += Y[1], z = Math.max(0, z), N = Math.max(0, N);\n    [z, N] = qo(\n      [z, N],\n      x,\n      C,\n      G ? E : !1\n    ), W(), G && (u || T) && (y ? N = z / E : z = N * E), I = z - D, $ = N - R;\n    const J = [I - m, $ - S];\n    n.prevWidth = I, n.prevHeight = $;\n    const q = qc(\n      t,\n      z,\n      N,\n      Z,\n      g,\n      n\n    );\n    if (!O && J.every((st) => !st) && q.every((st) => !st))\n      return;\n    const F = Ot.drag(\n      t,\n      vn(\n        e,\n        t.state,\n        q,\n        !!s,\n        !1,\n        \"draggable\"\n      )\n    ), H = F.transform, nt = h + I, lt = v + $, vt = et(t, e, {\n      width: nt,\n      height: lt,\n      offsetWidth: Math.round(z),\n      offsetHeight: Math.round(N),\n      startRatio: E,\n      boundingWidth: z,\n      boundingHeight: N,\n      direction: w,\n      dist: [I, $],\n      delta: J,\n      isPinch: !!s,\n      drag: F,\n      ...Wi(\n        {\n          style: {\n            width: `${nt}px`,\n            height: `${lt}px`\n          },\n          transform: H\n        },\n        F,\n        e\n      )\n    });\n    return !f && j(t, \"onResize\", vt), vt;\n  },\n  dragControlAfter(t, e) {\n    const n = e.datas, {\n      isResize: r,\n      startOffsetWidth: s,\n      startOffsetHeight: o,\n      prevWidth: i,\n      prevHeight: a\n    } = n;\n    if (!r || t.props.checkResizableError === !1)\n      return;\n    const { width: c, height: l } = t.state, u = c - (s + i), f = l - (o + a), d = B(u) > 3, p = B(f) > 3;\n    if (d && (n.startWidth += u, n.startOffsetWidth += u, n.prevWidth += u), p && (n.startHeight += f, n.startOffsetHeight += f, n.prevHeight += f), d || p)\n      return this.dragControl(t, e);\n  },\n  dragControlEnd(t, e) {\n    const { datas: n, parentEvent: r } = e;\n    if (!n.isResize)\n      return;\n    n.isResize = !1;\n    const s = $t(t, e, {});\n    return !r && j(t, \"onResizeEnd\", s), s;\n  },\n  dragGroupControlCondition: eo,\n  dragGroupControlStart(t, e) {\n    const { datas: n } = e, r = this.dragControlStart(t, { ...e, isGroup: !0 });\n    if (!r)\n      return !1;\n    const s = Ht(t, \"resizable\", e), {\n      startOffsetWidth: o,\n      startOffsetHeight: i\n    } = n;\n    function a() {\n      const p = n.minSize;\n      s.forEach((g) => {\n        const {\n          minSize: h,\n          startOffsetWidth: v,\n          startOffsetHeight: m\n        } = g.datas, S = o * (v ? h[0] / v : 0), x = i * (m ? h[1] / m : 0);\n        p[0] = Math.max(p[0], S), p[1] = Math.max(p[1], x);\n      });\n    }\n    function c() {\n      const p = n.maxSize;\n      s.forEach((g) => {\n        const {\n          maxSize: h,\n          startOffsetWidth: v,\n          startOffsetHeight: m\n        } = g.datas, S = o * (v ? h[0] / v : 0), x = i * (m ? h[1] / m : 0);\n        p[0] = Math.min(p[0], S), p[1] = Math.min(p[1], x);\n      });\n    }\n    const l = ee(\n      t,\n      this,\n      \"dragControlStart\",\n      e,\n      (p, g) => kn(t, p, n, g)\n    );\n    a(), c();\n    const u = (p) => {\n      r.setFixedDirection(p), l.forEach((g, h) => {\n        g.setFixedDirection(p), kn(t, g.moveable, n, s[h]);\n      });\n    };\n    n.setFixedDirection = u;\n    const f = {\n      ...r,\n      targets: t.props.targets,\n      events: l.map((p) => ({\n        ...p,\n        setMin: (g) => {\n          p.setMin(g), a();\n        },\n        setMax: (g) => {\n          p.setMax(g), c();\n        }\n      })),\n      setFixedDirection: u,\n      setMin: (p) => {\n        r.setMin(p), a();\n      },\n      setMax: (p) => {\n        r.setMax(p), c();\n      }\n    }, d = j(t, \"onResizeGroupStart\", f);\n    return n.isResize = d !== !1, n.isResize ? r : !1;\n  },\n  dragGroupControl(t, e) {\n    const { datas: n } = e;\n    if (!n.isResize)\n      return;\n    const r = De(t.props, \"resizable\");\n    Qn(t, \"onBeforeResize\", (p) => {\n      j(\n        t,\n        \"onBeforeResizeGroup\",\n        et(\n          t,\n          e,\n          {\n            ...p,\n            targets: r.targets\n          },\n          !0\n        )\n      );\n    });\n    const s = this.dragControl(t, { ...e, isGroup: !0 });\n    if (!s)\n      return;\n    const { boundingWidth: o, boundingHeight: i, dist: a } = s, c = r.keepRatio, l = [\n      o / (o - a[0]),\n      i / (i - a[1])\n    ], u = n.fixedPosition, f = ee(\n      t,\n      this,\n      \"dragControl\",\n      e,\n      (p, g) => {\n        const [h, v] = _t(\n          hn(t.rotation / 180 * Math.PI, 3),\n          [\n            g.datas.originalX * l[0],\n            g.datas.originalY * l[1],\n            1\n          ],\n          3\n        );\n        return {\n          ...g,\n          parentDist: null,\n          parentScale: l,\n          dragClient: at(u, [h, v]),\n          parentKeepRatio: c\n        };\n      }\n    ), d = {\n      targets: r.targets,\n      events: f,\n      ...s\n    };\n    return j(t, \"onResizeGroup\", d), d;\n  },\n  dragGroupControlEnd(t, e) {\n    const { isDrag: n, datas: r } = e;\n    if (!r.isResize)\n      return;\n    this.dragControlEnd(t, e);\n    const s = ee(t, this, \"dragControlEnd\", e), o = $t(\n      t,\n      e,\n      {\n        targets: t.props.targets,\n        events: s\n      }\n    );\n    return j(t, \"onResizeGroupEnd\", o), n;\n  },\n  /**\n       * @method Moveable.Resizable#request\n       * @param {Moveable.Resizable.ResizableRequestParam} e - the Resizable's request parameter\n       * @return {Moveable.Requester} Moveable Requester\n       * @example\n  \n       * // Instantly Request (requestStart - request - requestEnd)\n       * // Use Relative Value\n       * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n       *\n       * // Use Absolute Value\n       * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 }, true);\n       *\n       * // requestStart\n       * const requester = moveable.request(\"resizable\");\n       *\n       * // request\n       * // Use Relative Value\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       *\n       * // Use Absolute Value\n       * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 });\n       * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100 });\n       * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100 });\n       *\n       * // requestEnd\n       * requester.requestEnd();\n       */\n  request(t) {\n    const e = {};\n    let n = 0, r = 0, s = !1;\n    const o = t.getRect();\n    return {\n      isControl: !0,\n      requestStart(i) {\n        return s = i.useSnap, {\n          datas: e,\n          parentDirection: i.direction || [1, 1],\n          parentIsWidth: (i == null ? void 0 : i.horizontal) ?? !0,\n          useSnap: s\n        };\n      },\n      request(i) {\n        return \"offsetWidth\" in i ? n = i.offsetWidth - o.offsetWidth : \"deltaWidth\" in i && (n += i.deltaWidth), \"offsetHeight\" in i ? r = i.offsetHeight - o.offsetHeight : \"deltaHeight\" in i && (r += i.deltaHeight), {\n          datas: e,\n          parentDist: [n, r],\n          parentKeepRatio: i.keepRatio,\n          useSnap: s\n        };\n      },\n      requestEnd() {\n        return { datas: e, isDrag: !0, useSnap: s };\n      }\n    };\n  },\n  unset(t) {\n    t.state.gestos.resizable = null;\n  }\n};\nfunction lr(t, e, n, r, s) {\n  const o = t.props.groupable, i = t.state, a = i.is3d ? 4 : 3, c = e.origin, l = ht(\n    t.state.rootMatrix,\n    // TO-DO #710\n    K([c[0], c[1]], o ? [0, 0] : [i.left, i.top]),\n    a\n  ), u = at([s.left, s.top], l);\n  e.startAbsoluteOrigin = u, e.prevDeg = xt(u, [n, r]) / Math.PI * 180, e.defaultDeg = e.prevDeg, e.prevSnapDeg = 0, e.loop = 0, e.startDist = te(u, [n, r]);\n}\nfunction In(t, e, n) {\n  const { defaultDeg: r, prevDeg: s } = n;\n  let o = s % 360, i = Math.floor(s / 360);\n  o < 0 && (o += 360), o > t && o > 270 && t < 90 ? ++i : o < t && o < 90 && t > 270 && --i;\n  const a = e * (i * 360 + t - r);\n  return n.prevDeg = r + a, a;\n}\nfunction ur(t, e, n, r) {\n  return In(\n    xt(r.startAbsoluteOrigin, [t, e]) / Math.PI * 180,\n    n,\n    r\n  );\n}\nfunction fr(t, e, n, r, s, o) {\n  const { throttleRotate: i = 0 } = t.props, a = n.prevSnapDeg;\n  let c = 0, l = !1;\n  if (o) {\n    const f = Ql(\n      t,\n      e,\n      r,\n      s + r\n    );\n    l = f.isSnap, c = s + f.dist;\n  }\n  l || (c = tt(s + r, i));\n  const u = c - s;\n  return n.prevSnapDeg = u, [u - a, u, c];\n}\nfunction Mi(t, [e, n, r, s], o) {\n  if (t === \"none\")\n    return [];\n  if (Rt(t))\n    return t.map(\n      (f) => Mi(f, [e, n, r, s], o)[0]\n    );\n  const [i, a] = (t || \"top\").split(\"-\");\n  let c = [e, n];\n  i === \"left\" ? c = [r, e] : i === \"right\" ? c = [n, s] : i === \"bottom\" && (c = [s, r]);\n  let l = [\n    (c[0][0] + c[1][0]) / 2,\n    (c[0][1] + c[1][1]) / 2\n  ];\n  const u = $i(c, o);\n  if (a) {\n    const f = a === \"top\" || a === \"left\", d = i === \"bottom\" || i === \"left\";\n    l = c[f && !d || !f && d ? 0 : 1];\n  }\n  return [[l, u]];\n}\nfunction Or(t, e) {\n  if (e.isRequest)\n    return e.requestAble === \"rotatable\";\n  const n = e.inputEvent.target;\n  if (bt(n, U(\"rotation-control\")) || t.props.rotateAroundControls && bt(n, U(\"around-control\")) || bt(n, U(\"control\")) && bt(n, U(\"rotatable\")))\n    return !0;\n  const r = t.props.rotationTarget;\n  return r ? Ss(r, !0).some((s) => s ? n === s || n.contains(s) : !1) : !1;\n}\nconst Ol = `.rotation {\nposition: absolute;\nheight: 40px;\nwidth: 1px;\ntransform-origin: 50% 100%;\nheight: calc(40px * var(--zoom));\ntop: auto;\nleft: 0;\nbottom: 100%;\nwill-change: transform;\n}\n.rotation .rotation-line {\ndisplay: block;\nwidth: 100%;\nheight: 100%;\ntransform-origin: 50% 50%;\n}\n.rotation .rotation-control {\nborder-color: #4af;\nborder-color: var(--moveable-color);\nbackground:#fff;\ncursor: alias;\n}\n:global .view-rotation-dragging, .rotatable.direction.control {\ncursor: alias;\n}\n.rotatable.direction.control.move {\ncursor: move;\n}\n`, wl = {\n  name: \"rotatable\",\n  canPinch: !0,\n  props: [\n    \"rotatable\",\n    \"rotationPosition\",\n    \"throttleRotate\",\n    \"renderDirections\",\n    \"rotationTarget\",\n    \"rotateAroundControls\",\n    \"edge\",\n    \"resolveAblesWithRotatable\",\n    \"displayAroundControls\"\n  ],\n  events: [\n    \"rotateStart\",\n    \"beforeRotate\",\n    \"rotate\",\n    \"rotateEnd\",\n    \"rotateGroupStart\",\n    \"beforeRotateGroup\",\n    \"rotateGroup\",\n    \"rotateGroupEnd\"\n  ],\n  css: [Ol],\n  viewClassName(t) {\n    return t.isDragging(\"rotatable\") ? U(\"view-rotation-dragging\") : \"\";\n  },\n  render(t, e) {\n    const {\n      rotatable: n,\n      rotationPosition: r,\n      zoom: s,\n      renderDirections: o,\n      rotateAroundControls: i,\n      resolveAblesWithRotatable: a\n    } = De(t.props, \"rotatable\"), { renderPoses: c, direction: l } = t.getState();\n    if (!n)\n      return null;\n    const u = Mi(\n      r,\n      c,\n      l\n    ), f = [];\n    if (u.forEach(([d, p], g) => {\n      f.push(\n        /* @__PURE__ */ it.jsxs(\n          \"div\",\n          {\n            className: U(\"rotation\"),\n            style: {\n              // tslint:disable-next-line: max-line-length\n              transform: `translate(-50%) translate(${d[0]}px, ${d[1]}px) rotate(${p}rad)`\n            },\n            children: [\n              /* @__PURE__ */ it.jsx(\n                \"div\",\n                {\n                  className: U(\"line rotation-line\"),\n                  style: {\n                    transform: `scaleX(${s})`\n                  }\n                }\n              ),\n              /* @__PURE__ */ it.jsx(\n                \"div\",\n                {\n                  className: U(\"control rotation-control\"),\n                  style: {\n                    transform: `translate(0.5px) scale(${s})`\n                  }\n                }\n              )\n            ]\n          },\n          `rotation${g}`\n        )\n      );\n    }), o) {\n      const d = Ve(a || {}), p = {};\n      d.forEach((h) => {\n        a[h].forEach((v) => {\n          p[v] = h;\n        });\n      });\n      let g = [];\n      Rt(o) && (g = o.map((h) => {\n        const v = p[h];\n        return {\n          data: v ? { resolve: v } : {},\n          classNames: v ? [\"move\"] : [],\n          dir: h\n        };\n      })), f.push(\n        ...li(\n          t,\n          \"rotatable\",\n          g\n        )\n      );\n    }\n    return i && f.push(...gi(t)), f;\n  },\n  dragControlCondition: Or,\n  dragControlStart(t, e) {\n    var k;\n    const {\n      datas: n,\n      clientX: r,\n      clientY: s,\n      parentRotate: o,\n      parentFlag: i,\n      isPinch: a,\n      isRequest: c\n    } = e, l = t.state, {\n      target: u,\n      left: f,\n      top: d,\n      direction: p,\n      beforeDirection: g,\n      targetTransform: h,\n      moveableClientRect: v,\n      offsetMatrix: m,\n      targetMatrix: S,\n      allMatrix: x,\n      width: C,\n      height: E\n    } = l;\n    if (!c && !u)\n      return !1;\n    const D = t.getRect();\n    n.rect = D, n.transform = h, n.left = f, n.top = d;\n    let R = (I) => {\n      const $ = Ri(t.state, I);\n      n.fixedDirection = $.fixedDirection, n.fixedOffset = $.fixedOffset, n.fixedPosition = $.fixedPosition, O && O.setFixedPosition(I);\n    }, y = (I) => {\n      const $ = Tl(\n        t.state,\n        I\n      );\n      n.fixedDirection = $.fixedDirection, n.fixedOffset = $.fixedOffset, n.fixedPosition = $.fixedPosition, O && O.setFixedDirection(I);\n    }, M = r, P = s;\n    if (c || a || i) {\n      const I = o || 0;\n      n.beforeInfo = {\n        origin: D.beforeOrigin,\n        prevDeg: I,\n        defaultDeg: I,\n        prevSnapDeg: 0,\n        startDist: 0\n      }, n.afterInfo = {\n        ...n.beforeInfo,\n        origin: D.origin\n      }, n.absoluteInfo = {\n        ...n.beforeInfo,\n        origin: D.origin,\n        startValue: I\n      };\n    } else {\n      const I = (k = e.inputEvent) == null ? void 0 : k.target;\n      if (I) {\n        const G = I.getAttribute(\"data-direction\") || \"\", L = ac[G];\n        if (L) {\n          n.isControl = !0, n.isAroundControl = bt(\n            I,\n            U(\"around-control\")\n          ), n.controlDirection = L;\n          const z = I.getAttribute(\"data-resolve\");\n          z && (n.resolveAble = z);\n          const N = hu(\n            l.rootMatrix,\n            l.renderPoses,\n            v\n          );\n          [M, P] = yt(\n            N,\n            L\n          );\n        }\n      }\n      n.beforeInfo = { origin: D.beforeOrigin }, n.afterInfo = { origin: D.origin }, n.absoluteInfo = {\n        origin: D.origin,\n        startValue: D.rotation\n      };\n      const $ = R;\n      R = (G) => {\n        const L = l.is3d ? 4 : 3, [z, N] = at(\n          ti(S, L),\n          G\n        ), Z = _t(\n          m,\n          Ee([z, N], L)\n        ), Y = _t(\n          x,\n          Ee([G[0], G[1]], L)\n        );\n        $(G);\n        const W = l.posDelta;\n        n.beforeInfo.origin = K(Z, W), n.afterInfo.origin = K(Y, W), n.absoluteInfo.origin = K(Y, W), lr(\n          t,\n          n.beforeInfo,\n          M,\n          P,\n          v\n        ), lr(\n          t,\n          n.afterInfo,\n          M,\n          P,\n          v\n        ), lr(\n          t,\n          n.absoluteInfo,\n          M,\n          P,\n          v\n        );\n      }, y = (G) => {\n        const L = yt(\n          [\n            [0, 0],\n            [C, 0],\n            [0, E],\n            [C, E]\n          ],\n          G\n        );\n        R(L);\n      };\n    }\n    n.startClientX = M, n.startClientY = P, n.direction = p, n.beforeDirection = g, n.startValue = 0, n.datas = {}, qn(t, e, \"rotate\");\n    let _ = !1, O = !1;\n    n.isControl && n.resolveAble && n.resolveAble === \"resizable\" && (O = Tr.dragControlStart(t, {\n      ...new Fe(\"resizable\").dragStart([0, 0], e),\n      parentPosition: n.controlPosition,\n      parentFixedPosition: n.fixedPosition\n    })), O || (_ = Ot.dragStart(\n      t,\n      new Fe().dragStart([0, 0], e)\n    )), R(vu(t));\n    const T = et(t, e, {\n      set: (I) => {\n        n.startValue = I * Math.PI / 180;\n      },\n      setFixedDirection: y,\n      setFixedPosition: R,\n      ...Hn(t, e),\n      dragStart: _,\n      resizeStart: O\n    }), w = j(t, \"onRotateStart\", T);\n    return n.isRotate = w !== !1, l.snapRenderInfo = {\n      request: e.isRequest\n    }, n.isRotate ? T : !1;\n  },\n  dragControl(t, e) {\n    const {\n      datas: n,\n      clientDistX: r,\n      clientDistY: s,\n      parentRotate: o,\n      parentFlag: i,\n      isPinch: a,\n      groupDelta: c,\n      resolveMatrix: l\n    } = e, {\n      beforeDirection: u,\n      beforeInfo: f,\n      afterInfo: d,\n      absoluteInfo: p,\n      isRotate: g,\n      startValue: h,\n      rect: v,\n      startClientX: m,\n      startClientY: S\n    } = n;\n    if (!g)\n      return;\n    jn(t, e, \"rotate\");\n    const x = Gc(e), C = u * x, { parentMoveable: E } = t.props;\n    let D = 0, R, y, M = 0, P, _, O = 0, T, w;\n    const k = 180 / Math.PI * h, I = p.startValue;\n    let $ = !1;\n    const G = m + r, L = S + s;\n    if (!i && \"parentDist\" in e) {\n      const H = e.parentDist;\n      R = H, P = H, T = H;\n    } else a || i ? (R = In(o, u, f), P = In(o, C, d), T = In(o, C, p)) : (R = ur(\n      G,\n      L,\n      u,\n      f\n    ), P = ur(\n      G,\n      L,\n      C,\n      d\n    ), T = ur(\n      G,\n      L,\n      C,\n      p\n    ), $ = !0);\n    if (y = k + R, _ = k + P, w = I + T, j(\n      t,\n      \"onBeforeRotate\",\n      et(\n        t,\n        e,\n        {\n          beforeRotation: y,\n          rotation: _,\n          absoluteRotation: w,\n          setRotation(H) {\n            P = H - k, R = P, T = P;\n          }\n        },\n        !0\n      )\n    ), [D, R, y] = fr(\n      t,\n      v,\n      f,\n      R,\n      k,\n      $\n    ), [M, P, _] = fr(\n      t,\n      v,\n      d,\n      P,\n      k,\n      $\n    ), [O, T, w] = fr(\n      t,\n      v,\n      p,\n      T,\n      I,\n      $\n    ), !O && !M && !D && !E && !l)\n      return;\n    const z = Xn(\n      n,\n      `rotate(${_}deg)`,\n      `rotate(${P}deg)`\n    );\n    l && (n.fixedPosition = is(\n      t,\n      n.targetAllTransform,\n      n.fixedDirection,\n      n.fixedOffset,\n      n\n    ));\n    const N = Hc(t, P, n), Z = K(\n      at(c || [0, 0], N),\n      n.prevInverseDist || [0, 0]\n    );\n    n.prevInverseDist = N, n.requestValue = null;\n    const Y = ii(\n      t,\n      z,\n      Z,\n      a,\n      e\n    );\n    let W = Y;\n    const J = te([G, L], p.startAbsoluteOrigin) - p.startDist;\n    let q;\n    if (n.resolveAble === \"resizable\") {\n      const H = Tr.dragControl(t, {\n        ...vn(\n          e,\n          t.state,\n          [e.deltaX, e.deltaY],\n          !!a,\n          !1,\n          \"resizable\"\n        ),\n        resolveMatrix: !0,\n        parentDistance: J\n      });\n      H && (q = H, W = Wi(W, H, e));\n    }\n    const F = et(t, e, {\n      delta: M,\n      dist: P,\n      rotate: _,\n      rotation: _,\n      beforeDist: R,\n      beforeDelta: D,\n      beforeRotate: y,\n      beforeRotation: y,\n      absoluteDist: T,\n      absoluteDelta: O,\n      absoluteRotate: w,\n      absoluteRotation: w,\n      isPinch: !!a,\n      resize: q,\n      ...Y,\n      ...W\n    });\n    return j(t, \"onRotate\", F), F;\n  },\n  dragControlEnd(t, e) {\n    const { datas: n } = e;\n    if (!n.isRotate)\n      return;\n    n.isRotate = !1;\n    const r = $t(t, e, {});\n    return j(t, \"onRotateEnd\", r), r;\n  },\n  dragGroupControlCondition: Or,\n  dragGroupControlStart(t, e) {\n    const { datas: n } = e, {\n      left: r,\n      top: s,\n      beforeOrigin: o\n    } = t.state, i = this.dragControlStart(t, e);\n    if (!i)\n      return !1;\n    i.set(n.beforeDirection * t.rotation);\n    const a = ee(\n      t,\n      this,\n      \"dragControlStart\",\n      e,\n      (u, f) => {\n        const { left: d, top: p, beforeOrigin: g } = u.state, h = at(\n          K([d, p], [r, s]),\n          K(g, o)\n        );\n        return f.datas.startGroupClient = h, f.datas.groupClient = h, { ...f, parentRotate: 0 };\n      }\n    ), c = {\n      ...i,\n      targets: t.props.targets,\n      events: a\n    }, l = j(t, \"onRotateGroupStart\", c);\n    return n.isRotate = l !== !1, n.isRotate ? i : !1;\n  },\n  dragGroupControl(t, e) {\n    const { datas: n } = e;\n    if (!n.isRotate)\n      return;\n    Qn(t, \"onBeforeRotate\", (l) => {\n      j(\n        t,\n        \"onBeforeRotateGroup\",\n        et(\n          t,\n          e,\n          {\n            ...l,\n            targets: t.props.targets\n          },\n          !0\n        )\n      );\n    });\n    const r = this.dragControl(t, e);\n    if (!r)\n      return;\n    const s = n.beforeDirection, o = r.beforeDist, i = o / 180 * Math.PI, a = ee(\n      t,\n      this,\n      \"dragControl\",\n      e,\n      (l, u) => {\n        const f = u.datas.startGroupClient, [d, p] = u.datas.groupClient, [g, h] = gn(\n          f,\n          i * s\n        ), v = [g - d, h - p];\n        return u.datas.groupClient = [g, h], { ...u, parentRotate: o, groupDelta: v };\n      }\n    );\n    t.rotation = s * r.beforeRotation;\n    const c = {\n      targets: t.props.targets,\n      events: a,\n      set(l) {\n        t.rotation = l;\n      },\n      setGroupRotation(l) {\n        t.rotation = l;\n      },\n      ...r\n    };\n    return j(t, \"onRotateGroup\", c), c;\n  },\n  dragGroupControlEnd(t, e) {\n    const { isDrag: n, datas: r } = e;\n    if (!r.isRotate)\n      return;\n    this.dragControlEnd(t, e);\n    const s = ee(t, this, \"dragControlEnd\", e), o = $t(t, e, {\n      targets: t.props.targets,\n      events: s\n    });\n    return j(t, \"onRotateGroupEnd\", o), n;\n  },\n  /**\n       * @method Moveable.Rotatable#request\n       * @param {object} [e] - the Resizable's request parameter\n       * @param {number} [e.deltaRotate=0] -  delta number of rotation\n       * @param {number} [e.rotate=0] - absolute number of moveable's rotation\n       * @return {Moveable.Requester} Moveable Requester\n       * @example\n  \n       * // Instantly Request (requestStart - request - requestEnd)\n       * moveable.request(\"rotatable\", { deltaRotate: 10 }, true);\n       *\n       * * moveable.request(\"rotatable\", { rotate: 10 }, true);\n       *\n       * // requestStart\n       * const requester = moveable.request(\"rotatable\");\n       *\n       * // request\n       * requester.request({ deltaRotate: 10 });\n       * requester.request({ deltaRotate: 10 });\n       * requester.request({ deltaRotate: 10 });\n       *\n       * requester.request({ rotate: 10 });\n       * requester.request({ rotate: 20 });\n       * requester.request({ rotate: 30 });\n       *\n       * // requestEnd\n       * requester.requestEnd();\n       */\n  request(t) {\n    const e = {};\n    let n = 0;\n    const r = t.getRotation();\n    return {\n      isControl: !0,\n      requestStart() {\n        return { datas: e };\n      },\n      request(s) {\n        return \"deltaRotate\" in s ? n += s.deltaRotate : \"rotate\" in s && (n = s.rotate - r), { datas: e, parentDist: n };\n      },\n      requestEnd() {\n        return { datas: e, isDrag: !0 };\n      }\n    };\n  }\n};\nfunction Il(t, e) {\n  const { direction: n, classNames: r, size: s, pos: o, zoom: i, key: a } = t, c = n === \"horizontal\", l = c ? \"Y\" : \"X\";\n  return e.createElement(\"div\", {\n    key: a,\n    className: r.join(\" \"),\n    style: {\n      [c ? \"width\" : \"height\"]: `${s}`,\n      transform: `translate(${o[0]}, ${o[1]}) translate${l}(-50%) scale${l}(${i})`\n    }\n  });\n}\nfunction ds(t, e) {\n  return Il({\n    ...t,\n    classNames: [\n      U(\"line\", \"guideline\", t.direction),\n      ...t.classNames\n    ].filter((n) => n),\n    size: t.size || `${t.sizeValue}px`,\n    pos: t.pos || t.posValue.map((n) => `${tt(n, 0.1)}px`)\n  }, e);\n}\nfunction no(t, e, n, r, s, o, i, a) {\n  const { zoom: c } = t.props;\n  return n.map(({ type: l, pos: u }, f) => {\n    const d = [0, 0];\n    return d[i] = r, d[i ? 0 : 1] = -s + u, ds(\n      {\n        key: `${e}TargetGuideline${f}`,\n        classNames: [U(\"target\", \"bold\", l)],\n        posValue: d,\n        sizeValue: o,\n        zoom: c,\n        direction: e\n      },\n      a\n    );\n  });\n}\nfunction ro(t, e, n, r, s, o) {\n  const { zoom: i, isDisplayInnerSnapDigit: a } = t.props, c = e === \"horizontal\" ? le : ue, l = s[c.start], u = s[c.end];\n  return n.filter(({ hide: f, elementRect: d }) => {\n    if (f)\n      return !1;\n    if (a && d) {\n      const p = d.rect;\n      if (p[c.start] <= l && u <= p[c.end])\n        return !1;\n    }\n    return !0;\n  }).map((f, d) => {\n    const { pos: p, size: g, element: h, className: v } = f, m = [\n      -r[0] + p[0],\n      -r[1] + p[1]\n    ];\n    return ds(\n      {\n        key: `${e}-default-guideline-${d}`,\n        classNames: h ? [U(\"bold\"), v] : [U(\"normal\"), v],\n        direction: e,\n        posValue: m,\n        sizeValue: g,\n        zoom: i\n      },\n      o\n    );\n  });\n}\nfunction Ze(t, e, n, r, s, o, i, a) {\n  const {\n    snapDigit: c = 0,\n    isDisplaySnapDigit: l = !0,\n    snapDistFormat: u = (v, m) => v,\n    zoom: f\n  } = t.props, d = e === \"horizontal\" ? \"X\" : \"Y\", p = e === \"vertical\" ? \"height\" : \"width\", g = Math.abs(s), h = l ? parseFloat(g.toFixed(c)) : 0;\n  return /* @__PURE__ */ it.jsxs(\n    \"div\",\n    {\n      className: U(\"guideline-group\", e),\n      style: {\n        left: `${o[0]}px`,\n        top: `${o[1]}px`,\n        [p]: `${g}px`\n      },\n      children: [\n        ds(\n          {\n            direction: e,\n            classNames: [U(n), i],\n            size: \"100%\",\n            posValue: [0, 0],\n            sizeValue: g,\n            zoom: f\n          },\n          a\n        ),\n        /* @__PURE__ */ it.jsx(\n          \"div\",\n          {\n            className: U(\"size-value\", \"gap\"),\n            style: {\n              transform: `translate${d}(-50%) scale(${f})`\n            },\n            children: h > 0 ? u(h, e) : \"\"\n          }\n        )\n      ]\n    },\n    `${e}-${n}-guideline-${r}`\n  );\n}\nfunction Bl(t, e, n, r) {\n  const s = t === \"vertical\" ? 0 : 1, o = t === \"vertical\" ? 1 : 0, i = s ? le : ue, a = n[i.start], c = n[i.end];\n  return Yi(e, (l) => l.pos[s]).map((l) => {\n    const u = [], f = [], d = [];\n    return l.forEach((p) => {\n      const g = p.element, h = p.elementRect.rect;\n      if (h[i.end] < a)\n        u.push(p);\n      else if (c < h[i.start])\n        f.push(p);\n      else if (h[i.start] <= a && c <= h[i.end] && r) {\n        const v = p.pos, m = { element: g, rect: { ...h, [i.end]: h[i.start] } }, S = { element: g, rect: { ...h, [i.start]: h[i.end] } }, x = [0, 0], C = [0, 0];\n        x[s] = v[s], x[o] = v[o], C[s] = v[s], C[o] = v[o] + p.size, u.push({\n          type: t,\n          pos: x,\n          size: 0,\n          elementRect: m,\n          direction: \"\",\n          elementDirection: \"end\"\n        }), f.push({\n          type: t,\n          pos: C,\n          size: 0,\n          elementRect: S,\n          direction: \"\",\n          elementDirection: \"start\"\n        });\n      }\n    }), u.sort((p, g) => g.pos[o] - p.pos[o]), f.sort((p, g) => p.pos[o] - g.pos[o]), {\n      total: l,\n      start: u,\n      end: f,\n      inner: d\n    };\n  });\n}\nfunction zl(t, e, n, r, s) {\n  const {\n    isDisplayInnerSnapDigit: o\n  } = t.props, i = [];\n  return [\"vertical\", \"horizontal\"].forEach((a) => {\n    const c = e.filter((v) => v.type === a), l = a === \"vertical\" ? 1 : 0, u = l ? 0 : 1, f = Bl(a, c, r, o), d = l ? ue : le, p = l ? le : ue, g = r[d.start], h = r[d.end];\n    f.forEach(({ total: v, start: m, end: S, inner: x }) => {\n      const C = n[u] + v[0].pos[u] - r[p.start];\n      let E = r;\n      m.forEach((D) => {\n        const R = D.elementRect.rect, y = E[d.start] - R[d.end];\n        if (y > 0) {\n          const M = [0, 0];\n          M[l] = n[l] + E[d.start] - g - y, M[u] = C, i.push(Ze(\n            t,\n            a,\n            \"dashed\",\n            i.length,\n            y,\n            M,\n            D.className,\n            s\n          ));\n        }\n        E = R;\n      }), E = r, S.forEach((D) => {\n        const R = D.elementRect.rect, y = R[d.start] - E[d.end];\n        if (y > 0) {\n          const M = [0, 0];\n          M[l] = n[l] + E[d.end] - g, M[u] = C, i.push(Ze(\n            t,\n            a,\n            \"dashed\",\n            i.length,\n            y,\n            M,\n            D.className,\n            s\n          ));\n        }\n        E = R;\n      }), x.forEach((D) => {\n        const R = D.elementRect.rect, y = g - R[d.start], M = R[d.end] - h, P = [0, 0], _ = [0, 0];\n        P[l] = n[l] - y, P[u] = C, _[l] = n[l] + h - g, _[u] = C, i.push(Ze(\n          t,\n          a,\n          \"dashed\",\n          i.length,\n          y,\n          P,\n          D.className,\n          s\n        )), i.push(Ze(\n          t,\n          a,\n          \"dashed\",\n          i.length,\n          M,\n          _,\n          D.className,\n          s\n        ));\n      });\n    });\n  }), i;\n}\nfunction Al(t, e, n, r, s) {\n  const o = [];\n  return [\"horizontal\", \"vertical\"].forEach((i) => {\n    const a = e.filter((v) => v.type === i).slice(0, 1), c = i === \"vertical\" ? 0 : 1, l = c ? 0 : 1, u = c ? ue : le, f = c ? le : ue, d = r[u.start], p = r[u.end], g = r[f.start], h = r[f.end];\n    a.forEach(({ gap: v, gapRects: m }) => {\n      const S = Math.max(\n        g,\n        ...m.map(({ rect: E }) => E[f.start])\n      ), x = Math.min(\n        h,\n        ...m.map(({ rect: E }) => E[f.end])\n      ), C = (S + x) / 2;\n      S === x || C === (g + h) / 2 || m.forEach(({ rect: E, className: D }) => {\n        const R = [n[0], n[1]];\n        if (E[u.end] < d)\n          R[c] += E[u.end] - d;\n        else if (p < E[u.start])\n          R[c] += E[u.start] - d - v;\n        else\n          return;\n        R[l] += C - g, o.push(Ze(\n          t,\n          c ? \"vertical\" : \"horizontal\",\n          \"gap\",\n          o.length,\n          v,\n          R,\n          D,\n          s\n        ));\n      });\n    });\n  }), o;\n}\nvar Gl = /* @__PURE__ */ function() {\n  function t() {\n    this.keys = [], this.values = [];\n  }\n  var e = t.prototype;\n  return e.get = function(n) {\n    return this.values[this.keys.indexOf(n)];\n  }, e.set = function(n, r) {\n    var s = this.keys, o = this.values, i = s.indexOf(n), a = i === -1 ? s.length : i;\n    s[a] = n, o[a] = r;\n  }, t;\n}(), kl = /* @__PURE__ */ function() {\n  function t() {\n    this.object = {};\n  }\n  var e = t.prototype;\n  return e.get = function(n) {\n    return this.object[n];\n  }, e.set = function(n, r) {\n    this.object[n] = r;\n  }, t;\n}(), $l = typeof Map == \"function\", Fl = /* @__PURE__ */ function() {\n  function t() {\n  }\n  var e = t.prototype;\n  return e.connect = function(n, r) {\n    this.prev = n, this.next = r, n && (n.next = this), r && (r.prev = this);\n  }, e.disconnect = function() {\n    var n = this.prev, r = this.next;\n    n && (n.next = r), r && (r.prev = n);\n  }, e.getIndex = function() {\n    for (var n = this, r = -1; n; )\n      n = n.prev, ++r;\n    return r;\n  }, t;\n}();\nfunction Ll(t, e) {\n  var n = [], r = [];\n  return t.forEach(function(s) {\n    var o = s[0], i = s[1], a = new Fl();\n    n[o] = a, r[i] = a;\n  }), n.forEach(function(s, o) {\n    s.connect(n[o - 1]);\n  }), t.filter(function(s, o) {\n    return !e[o];\n  }).map(function(s, o) {\n    var i = s[0], a = s[1];\n    if (i === a)\n      return [0, 0];\n    var c = n[i], l = r[a - 1], u = c.getIndex();\n    c.disconnect(), l ? c.connect(l, l.next) : c.connect(void 0, n[0]);\n    var f = c.getIndex();\n    return [u, f];\n  });\n}\nvar Nl = /* @__PURE__ */ function() {\n  function t(n, r, s, o, i, a, c, l) {\n    this.prevList = n, this.list = r, this.added = s, this.removed = o, this.changed = i, this.maintained = a, this.changedBeforeAdded = c, this.fixed = l;\n  }\n  var e = t.prototype;\n  return Object.defineProperty(e, \"ordered\", {\n    get: function() {\n      return this.cacheOrdered || this.caculateOrdered(), this.cacheOrdered;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e, \"pureChanged\", {\n    get: function() {\n      return this.cachePureChanged || this.caculateOrdered(), this.cachePureChanged;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.caculateOrdered = function() {\n    var n = Ll(this.changedBeforeAdded, this.fixed), r = this.changed, s = [];\n    this.cacheOrdered = n.filter(function(o, i) {\n      var a = o[0], c = o[1], l = r[i], u = l[0], f = l[1];\n      if (a !== c)\n        return s.push([u, f]), !0;\n    }), this.cachePureChanged = s;\n  }, t;\n}();\nfunction ps(t, e, n) {\n  var r = $l ? Map : n ? kl : Gl, s = n || function(S) {\n    return S;\n  }, o = [], i = [], a = [], c = t.map(s), l = e.map(s), u = new r(), f = new r(), d = [], p = [], g = {}, h = [], v = 0, m = 0;\n  return c.forEach(function(S, x) {\n    u.set(S, x);\n  }), l.forEach(function(S, x) {\n    f.set(S, x);\n  }), c.forEach(function(S, x) {\n    var C = f.get(S);\n    typeof C > \"u\" ? (++m, i.push(x)) : g[C] = m;\n  }), l.forEach(function(S, x) {\n    var C = u.get(S);\n    typeof C > \"u\" ? (o.push(x), ++v) : (a.push([C, x]), m = g[x] || 0, d.push([C - m, x - v]), p.push(x === C), C !== x && h.push([C, x]));\n  }), i.reverse(), new Nl(t, e, o, i, h, a, d, p);\n}\nvar Wl = /* @__PURE__ */ function() {\n  function t(n, r) {\n    n === void 0 && (n = []), this.findKeyCallback = r, this.list = [].slice.call(n);\n  }\n  var e = t.prototype;\n  return e.update = function(n) {\n    var r = [].slice.call(n), s = ps(this.list, r, this.findKeyCallback);\n    return this.list = r, s;\n  }, t;\n}();\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar wr = function(t, e) {\n  return wr = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function(n, r) {\n    n.__proto__ = r;\n  } || function(n, r) {\n    for (var s in r) r.hasOwnProperty(s) && (n[s] = r[s]);\n  }, wr(t, e);\n};\nfunction Yl(t, e) {\n  wr(t, e);\n  function n() {\n    this.constructor = t;\n  }\n  t.prototype = e === null ? Object.create(e) : (n.prototype = e.prototype, new n());\n}\nvar Pi = typeof Map == \"function\" ? void 0 : /* @__PURE__ */ function() {\n  var t = 0;\n  return function(e) {\n    return e.__DIFF_KEY__ || (e.__DIFF_KEY__ = ++t);\n  };\n}(), _i = /* @__PURE__ */ function(t) {\n  Yl(e, t);\n  function e(n) {\n    return n === void 0 && (n = []), t.call(this, n, Pi) || this;\n  }\n  return e;\n}(Wl);\nfunction Vl(t, e) {\n  return ps(t, e, Pi);\n}\nfunction Ir(t) {\n  var P;\n  const e = t.state, {\n    containerClientRect: n,\n    hasFixed: r\n  } = e, {\n    overflow: s,\n    scrollHeight: o,\n    scrollWidth: i,\n    clientHeight: a,\n    clientWidth: c,\n    clientLeft: l,\n    clientTop: u\n  } = n, {\n    snapGap: f = !0,\n    verticalGuidelines: d,\n    horizontalGuidelines: p,\n    snapThreshold: g = 5,\n    maxSnapElementGuidelineDistance: h = 1 / 0,\n    isDisplayGridGuidelines: v\n  } = t.props, { top: m, left: S, bottom: x, right: C } = Yt(jt(t.state)), E = { top: m, left: S, bottom: x, right: C, center: (S + C) / 2, middle: (m + x) / 2 };\n  let R = [...ql(t)];\n  const y = (((P = e.snapThresholdInfo) == null ? void 0 : P.multiples) ?? [1, 1]).map((_) => _ * g);\n  f && R.push(...jl(\n    t,\n    E,\n    y\n  ));\n  const M = {\n    ...e.snapOffset || {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0\n    }\n  };\n  if (R.push(...Hl(\n    t,\n    s ? i : c,\n    s ? o : a,\n    l,\n    u,\n    M,\n    v\n  )), r) {\n    const { left: _, top: O } = n;\n    M.left += _, M.top += O, M.right += _, M.bottom += O;\n  }\n  return R.push(...Oi(\n    p || !1,\n    d || !1,\n    s ? i : c,\n    s ? o : a,\n    l,\n    u,\n    M\n  )), R = R.filter(({ element: _, elementRect: O, type: T }) => {\n    if (!_ || !O)\n      return !0;\n    const w = O.rect;\n    return Ti(E, w, T, h);\n  }), R;\n}\nfunction jl(t, e, n) {\n  const {\n    maxSnapElementGuidelineDistance: r = 1 / 0,\n    maxSnapElementGapDistance: s = 1 / 0\n  } = t.props, o = t.state.elementRects, i = [];\n  return [\n    [\"vertical\", le, ue],\n    [\"horizontal\", ue, le]\n  ].forEach(([a, c, l]) => {\n    const u = e[c.start], f = e[c.end], d = e[c.center], p = e[l.start], g = e[l.end], h = {\n      left: n[0],\n      top: n[1]\n    };\n    function v(x) {\n      const C = x.rect, E = h[c.start];\n      return C[c.end] < u + E ? u - C[c.end] : f - E < C[c.start] ? C[c.start] - f : -1;\n    }\n    const m = o.filter((x) => {\n      const C = x.rect;\n      return C[l.start] > g || C[l.end] < p ? !1 : v(x) > 0;\n    }).sort((x, C) => v(x) - v(C)), S = [];\n    m.forEach((x) => {\n      m.forEach((C) => {\n        if (x === C)\n          return;\n        const { rect: E } = x, { rect: D } = C, R = E[l.start], y = E[l.end], M = D[l.start], P = D[l.end];\n        R > P || M > y || S.push([x, C]);\n      });\n    }), S.forEach(([x, C]) => {\n      const { rect: E } = x, { rect: D } = C, R = E[c.start], y = E[c.end], M = D[c.start], P = D[c.end], _ = h[c.start];\n      let O = 0, T = 0, w = !1, k = !1, I = !1;\n      if (y <= u && f <= M) {\n        if (k = !0, O = (M - y - (f - u)) / 2, T = y + O + (f - u) / 2, B(T - d) > _)\n          return;\n      } else if (y < M && P < u + _) {\n        if (w = !0, O = M - y, T = P + O, B(T - u) > _)\n          return;\n      } else if (y < M && f - _ < R) {\n        if (I = !0, O = M - y, T = R - O, B(T - f) > _)\n          return;\n      } else\n        return;\n      O && Ti(e, D, a, r) && (O > s || i.push({\n        type: a,\n        pos: a === \"vertical\" ? [T, 0] : [0, T],\n        element: C.element,\n        size: 0,\n        className: C.className,\n        isStart: w,\n        isCenter: k,\n        isEnd: I,\n        gap: O,\n        hide: !0,\n        gapRects: [x, C],\n        direction: \"\",\n        elementDirection: \"\"\n      }));\n    });\n  }), i;\n}\nfunction Xl(t, e, n, r) {\n  var d, p;\n  const s = t.props, o = t.state, {\n    snapGridAll: i\n  } = s, {\n    snapGridWidth: a = 0,\n    snapGridHeight: c = 0\n  } = s, {\n    snapRenderInfo: l\n  } = o, u = l && (((d = l.direction) == null ? void 0 : d[0]) || ((p = l.direction) == null ? void 0 : p[1])), f = t.moveables;\n  if (i && f && u && (a || c)) {\n    if (o.snapThresholdInfo)\n      return;\n    o.snapThresholdInfo = {\n      multiples: [1, 1],\n      offset: [0, 0]\n    };\n    const g = t.getRect(), h = g.children, v = l.direction;\n    if (h) {\n      const m = v.map((x, C) => {\n        const {\n          snapSize: E,\n          posName: D,\n          sizeName: R,\n          clientOffset: y\n        } = C === 0 ? {\n          snapSize: a,\n          posName: \"left\",\n          sizeName: \"width\",\n          clientOffset: r.left - e\n        } : {\n          snapSize: c,\n          posName: \"top\",\n          sizeName: \"height\",\n          clientOffset: r.top - n\n        };\n        if (!E)\n          return {\n            dir: x,\n            multiple: 1,\n            snapSize: E,\n            snapOffset: 0\n          };\n        const M = g[R], P = g[D], _ = yc(h.map((G) => [\n          G[D] - P,\n          G[R],\n          M - G[R] - G[D] + P\n        ])).filter((G) => G).sort((G, L) => G - L), O = _[0], T = _.map((G) => tt(G / O, 0.1) * E);\n        let w = 1;\n        const k = tt(M / O, 0.1);\n        for (w = 1; w <= 10 && !T.every((G) => G * w % 1 === 0); ++w)\n          ;\n        const I = (-x + 1) / 2, $ = zn(\n          P - y,\n          P - y + M,\n          I,\n          1 - I\n        );\n        return {\n          multiple: k * w,\n          dir: x,\n          snapSize: E,\n          snapOffset: Math.round($ / E)\n        };\n      }), S = m.map((x) => x.multiple || 1);\n      o.snapThresholdInfo.multiples = S, o.snapThresholdInfo.offset = m.map((x) => x.snapOffset), m.forEach((x, C) => {\n        x.snapSize;\n      });\n    }\n  } else\n    o.snapThresholdInfo = null;\n}\nfunction Hl(t, e, n, r = 0, s = 0, o, i) {\n  const a = t.props, c = t.state;\n  let {\n    snapGridWidth: l = 0,\n    snapGridHeight: u = 0\n  } = a;\n  const f = [], {\n    left: d,\n    top: p\n  } = o;\n  let g = [0, 0];\n  Xl(\n    t,\n    r,\n    s,\n    o\n  );\n  const h = c.snapThresholdInfo, v = l, m = u;\n  if (h && (l *= h.multiples[0] || 1, u *= h.multiples[1] || 1, g = h.offset), u) {\n    const S = (x) => {\n      f.push({\n        type: \"horizontal\",\n        pos: [\n          d,\n          tt(g[1] * m + x - s + p, 0.1)\n        ],\n        className: U(\"grid-guideline\"),\n        size: e,\n        hide: !i,\n        direction: \"\",\n        grid: !0\n      });\n    };\n    for (let x = 0; x <= n * 2; x += u)\n      S(x);\n    for (let x = -u; x >= -n; x -= u)\n      S(x);\n  }\n  if (l) {\n    const S = (x) => {\n      f.push({\n        type: \"vertical\",\n        pos: [\n          tt(g[0] * v + x - r + d, 0.1),\n          p\n        ],\n        className: U(\"grid-guideline\"),\n        size: n,\n        hide: !i,\n        direction: \"\",\n        grid: !0\n      });\n    };\n    for (let x = 0; x <= e * 2; x += l)\n      S(x);\n    for (let x = -l; x >= -e; x -= l)\n      S(x);\n  }\n  return f;\n}\nfunction Ti(t, e, n, r) {\n  return n === \"horizontal\" ? B(t.right - e.left) <= r || B(t.left - e.right) <= r || t.left <= e.right && e.left <= t.right : n === \"vertical\" ? B(t.bottom - e.top) <= r || B(t.top - e.bottom) <= r || t.top <= e.bottom && e.top <= t.bottom : !0;\n}\nfunction ql(t) {\n  const e = t.state, {\n    elementGuidelines: n = []\n  } = t.props;\n  if (!n.length)\n    return e.elementRects = [], [];\n  const r = (e.elementRects || []).filter((u) => !u.refresh), s = n.map((u) => qt(u) && \"element\" in u ? {\n    ...u,\n    element: Zt(u.element, !0)\n  } : {\n    element: Zt(u, !0)\n  }).filter((u) => u.element), {\n    maintained: o,\n    added: i\n  } = Vl(r.map((u) => u.element), s.map((u) => u.element)), a = [];\n  o.forEach(([u, f]) => {\n    a[f] = r[u];\n  }), Ul(t, i.map((u) => s[u])).map((u, f) => {\n    a[i[f]] = u;\n  }), e.elementRects = a;\n  const c = cs(t.props.elementSnapDirections), l = [];\n  return a.forEach((u) => {\n    const {\n      element: f,\n      top: d = c.top,\n      left: p = c.left,\n      right: g = c.right,\n      bottom: h = c.bottom,\n      center: v = c.center,\n      middle: m = c.middle,\n      className: S,\n      rect: x\n    } = u, {\n      horizontal: C,\n      vertical: E,\n      horizontalNames: D,\n      verticalNames: R\n    } = ls({\n      top: d,\n      right: g,\n      left: p,\n      bottom: h,\n      center: v,\n      middle: m\n    }, x), y = x.top, M = x.left, P = x.right - M, _ = x.bottom - y, O = [P, _];\n    E.forEach((T, w) => {\n      l.push({\n        type: \"vertical\",\n        element: f,\n        pos: [\n          tt(T, 0.1),\n          y\n        ],\n        size: _,\n        sizes: O,\n        className: S,\n        elementRect: u,\n        elementDirection: qs[R[w]] || R[w],\n        direction: \"\"\n      });\n    }), C.forEach((T, w) => {\n      l.push({\n        type: \"horizontal\",\n        element: f,\n        pos: [\n          M,\n          tt(T, 0.1)\n        ],\n        size: P,\n        sizes: O,\n        className: S,\n        elementRect: u,\n        elementDirection: qs[D[w]] || D[w],\n        direction: \"\"\n      });\n    });\n  }), l;\n}\nfunction so(t, e) {\n  return t ? t.map((n) => {\n    const r = qt(n) ? n : { pos: n }, s = r.pos;\n    return an(s) ? r : {\n      ...r,\n      pos: ft(s, e)\n    };\n  }) : [];\n}\nfunction Oi(t, e, n, r, s = 0, o = 0, i = { left: 0, top: 0, right: 0, bottom: 0 }) {\n  const a = [], {\n    left: c,\n    top: l,\n    bottom: u,\n    right: f\n  } = i, d = n + f - c, p = r + u - l;\n  return so(t, p).forEach((g) => {\n    a.push({\n      type: \"horizontal\",\n      pos: [\n        c,\n        tt(g.pos - o + l, 0.1)\n      ],\n      size: d,\n      className: g.className,\n      direction: \"\"\n    });\n  }), so(e, d).forEach((g) => {\n    a.push({\n      type: \"vertical\",\n      pos: [\n        tt(g.pos - s + c, 0.1),\n        l\n      ],\n      size: p,\n      className: g.className,\n      direction: \"\"\n    });\n  }), a;\n}\nfunction Ul(t, e) {\n  if (!e.length)\n    return [];\n  const n = t.props.groupable, r = t.state, {\n    containerClientRect: s,\n    // targetClientRect: {\n    //     top: clientTop,\n    //     left: clientLeft,\n    // },\n    rootMatrix: o,\n    is3d: i,\n    offsetDelta: a\n  } = r, c = i ? 4 : 3, [l, u] = ul(o, s, c), f = n ? 0 : a[0], d = n ? 0 : a[1];\n  return e.map((p) => {\n    const g = p.element.getBoundingClientRect(), h = g.left - l - f, v = g.top - u - d, m = v + g.height, S = h + g.width, [x, C] = We(o, [h, v], c), [E, D] = We(o, [S, m], c);\n    return {\n      ...p,\n      rect: {\n        left: x,\n        right: E,\n        top: C,\n        bottom: D,\n        center: (x + E) / 2,\n        middle: (C + D) / 2\n      }\n    };\n  });\n}\nfunction yn(t) {\n  const e = t.state, n = e.container, r = t.props.snapContainer || n;\n  if (e.snapContainer === r && e.guidelines && e.guidelines.length)\n    return !1;\n  const s = e.containerClientRect, o = {\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0\n  };\n  if (n !== r) {\n    const i = Zt(r, !0);\n    if (i) {\n      const a = nn(i), c = uo(e, [\n        a.left - s.left,\n        a.top - s.top\n      ]), l = uo(e, [\n        a.right - s.right,\n        a.bottom - s.bottom\n      ]);\n      o.left = tt(c[0], 1e-5), o.top = tt(c[1], 1e-5), o.right = tt(l[0], 1e-5), o.bottom = tt(l[1], 1e-5);\n    }\n  }\n  return e.snapContainer = r, e.snapOffset = o, e.guidelines = Ir(t), e.enableSnap = !0, !0;\n}\nfunction wi(t, e, n, r, s, o) {\n  const i = Me(t, e, n, o ? 4 : 3), a = yt(i, r);\n  return hs(i, K(s, a));\n}\nfunction oo(t) {\n  return t ? t / B(t) : 0;\n}\nfunction Kl(t, e, n, r, s, o) {\n  const { fixedDirection: i } = o, a = gl(n, i, r), c = fs(t, e, n, r), l = [\n    ...Ml(\n      t,\n      e,\n      a,\n      r,\n      s,\n      o\n    ),\n    ...bi(\n      t,\n      c,\n      o\n    )\n  ], u = $n(l, 0), f = $n(l, 1);\n  return {\n    width: {\n      isBound: u.isBound,\n      offset: u.offset[0]\n    },\n    height: {\n      isBound: f.isBound,\n      offset: f.offset[1]\n    }\n  };\n}\nfunction Zl(t, e, n, r, s, o, i, a, c) {\n  const l = yt(e, i), {\n    horizontal: { offset: u },\n    vertical: { offset: f }\n  } = Zn(t, a, {\n    vertical: [l[0]],\n    horizontal: [l[1]]\n  });\n  if (tt(f, Cr) || tt(u, Cr)) {\n    const [d, p] = Qt({\n      datas: c,\n      distX: -f,\n      distY: -u\n    }), g = Math.min(\n      s || 1 / 0,\n      n + i[0] * d\n    ), h = Math.min(\n      o || 1 / 0,\n      r + i[1] * p\n    );\n    return [g - n, h - r];\n  }\n  return [0, 0];\n}\nfunction Ii(t, e, n, r, s, o, i, a) {\n  const c = jt(t.state), l = t.props.keepRatio;\n  let u = 0, f = 0;\n  for (let d = 0; d < 2; ++d) {\n    const p = e(u, f), {\n      width: g,\n      height: h\n    } = Kl(\n      t,\n      p,\n      s,\n      l,\n      i,\n      a\n    ), v = g.isBound, m = h.isBound;\n    let S = g.offset, x = h.offset;\n    if (d === 1 && (v || (S = 0), m || (x = 0)), d === 0 && i && !v && !m)\n      return [0, 0];\n    if (l) {\n      const C = B(S) * (n ? 1 / n : 1), E = B(x) * (r ? 1 / r : 1);\n      (v && m ? C < E : m || !v && C < E) ? S = n * x / r : x = r * S / n;\n    }\n    u += S, f += x;\n  }\n  if (!l && s[0] && s[1]) {\n    const { maxWidth: d, maxHeight: p } = _l(\n      t,\n      c,\n      s,\n      o,\n      a\n    ), [g, h] = Zl(\n      t,\n      e(u, f).map((v) => v.map((m) => tt(m, Cr))),\n      n + u,\n      r + f,\n      d,\n      p,\n      s,\n      i,\n      a\n    );\n    u += g, f += h;\n  }\n  return [u, f];\n}\nfunction tn(t) {\n  return t < 0 && (t = t % 360 + 360), t %= 360, t;\n}\nfunction Jl(t, e) {\n  e = tn(e);\n  const n = Math.floor(t / 360), r = n * 360 + 360 - e, s = n * 360 + e;\n  return B(t - r) < B(t - s) ? r : s;\n}\nfunction dr(t, e) {\n  t = tn(t), e = tn(e);\n  const n = tn(t - e);\n  return Math.min(n, 360 - n);\n}\nfunction Ql(t, e, n, r) {\n  const s = t.props, o = s[hi] ?? 5, i = s[vi];\n  if (Xe(t, \"rotatable\")) {\n    const { pos1: a, pos2: c, pos3: l, pos4: u, origin: f } = e, d = n * Math.PI / 180, p = [a, c, l, u].map((m) => K(m, f)), g = p.map((m) => gn(m, d)), h = [\n      ...il(t, p, g, f, n),\n      ...El(\n        t,\n        p,\n        g,\n        f,\n        n\n      )\n    ];\n    h.sort((m, S) => B(m - n) - B(S - n));\n    const v = h.length > 0;\n    if (v)\n      return {\n        isSnap: v,\n        dist: v ? h[0] : n\n      };\n  }\n  if (i != null && i.length && o) {\n    const c = i.slice().sort((l, u) => dr(l, r) - dr(u, r))[0];\n    if (dr(c, r) <= o)\n      return {\n        isSnap: !0,\n        dist: n + Jl(r, c) - r\n      };\n  }\n  return {\n    isSnap: !1,\n    dist: n\n  };\n}\nfunction tu(t, e, n, r, s, o, i) {\n  if (!Xe(t, \"resizable\"))\n    return [0, 0];\n  const { fixedDirection: a, nextAllMatrix: c } = i, { allMatrix: l, is3d: u } = t.state;\n  return Ii(\n    t,\n    (f, d) => wi(\n      c || l,\n      e + f,\n      n + d,\n      a,\n      s,\n      u\n    ),\n    e,\n    n,\n    r,\n    s,\n    o,\n    i\n  );\n}\nfunction eu(t, e, n, r, s) {\n  if (!Xe(t, \"scalable\"))\n    return [0, 0];\n  const { startOffsetWidth: o, startOffsetHeight: i, fixedPosition: a, fixedDirection: c, is3d: l } = s, u = Ii(\n    t,\n    (f, d) => wi(\n      Yc(\n        s,\n        at(e, [f / o, d / i])\n      ),\n      o,\n      i,\n      c,\n      a,\n      l\n    ),\n    o,\n    i,\n    n,\n    a,\n    r,\n    s\n  );\n  return [u[0] / o, u[1] / i];\n}\nfunction nu(t, e) {\n  e.absolutePoses = jt(t.state);\n}\nfunction io(t) {\n  const e = [];\n  return t.forEach((n) => {\n    n.guidelineInfos.forEach(({ guideline: r }) => {\n      kt(e, (s) => s.guideline === r) || (r.direction = \"\", e.push({ guideline: r, posInfo: n }));\n    });\n  }), e.map(({ guideline: n, posInfo: r }) => ({\n    ...n,\n    direction: r.direction\n  }));\n}\nfunction ao(t, e, n, r, s, o) {\n  const {\n    vertical: i,\n    horizontal: a\n  } = as(\n    Un(t, o),\n    e,\n    n\n  ), c = Be();\n  i.forEach((d) => {\n    d.isBound && (d.direction === \"start\" && (c.left = !0), d.direction === \"end\" && (c.right = !0), r.push({\n      type: \"bounds\",\n      pos: d.pos\n    }));\n  }), a.forEach((d) => {\n    d.isBound && (d.direction === \"start\" && (c.top = !0), d.direction === \"end\" && (c.bottom = !0), s.push({\n      type: \"bounds\",\n      pos: d.pos\n    }));\n  });\n  const {\n    boundMap: l,\n    vertical: u,\n    horizontal: f\n  } = Cl(t);\n  return u.forEach((d) => {\n    ne(\n      r,\n      ({ type: p, pos: g }) => p === \"bounds\" && g === d\n    ) >= 0 || r.push({\n      type: \"bounds\",\n      pos: d\n    });\n  }), f.forEach((d) => {\n    ne(\n      s,\n      ({ type: p, pos: g }) => p === \"bounds\" && g === d\n    ) >= 0 || s.push({\n      type: \"bounds\",\n      pos: d\n    });\n  }), {\n    boundMap: c,\n    innerBoundMap: l\n  };\n}\nconst ru = xs(\"\", [\"resizable\", \"scalable\"]), su = {\n  name: \"snappable\",\n  dragRelation: \"strong\",\n  props: [\n    \"snappable\",\n    \"snapContainer\",\n    \"snapDirections\",\n    \"elementSnapDirections\",\n    \"snapGap\",\n    \"snapGridWidth\",\n    \"snapGridHeight\",\n    \"isDisplaySnapDigit\",\n    \"isDisplayInnerSnapDigit\",\n    \"isDisplayGridGuidelines\",\n    \"snapDigit\",\n    \"snapThreshold\",\n    \"snapRenderThreshold\",\n    \"snapGridAll\",\n    hi,\n    vi,\n    mi,\n    xi,\n    \"horizontalGuidelines\",\n    \"verticalGuidelines\",\n    \"elementGuidelines\",\n    \"bounds\",\n    \"innerBounds\",\n    \"snapDistFormat\",\n    \"maxSnapElementGuidelineDistance\",\n    \"maxSnapElementGapDistance\"\n  ],\n  events: [\"snap\", \"bound\"],\n  css: [\n    `:host {\n--bounds-color: #d66;\n}\n.guideline {\npointer-events: none;\nz-index: 2;\n}\n.guideline.bounds {\nbackground: #d66;\nbackground: var(--bounds-color);\n}\n.guideline-group {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n.guideline-group .size-value {\nposition: absolute;\ncolor: #f55;\nfont-size: 12px;\nfont-size: calc(12px * var(--zoom));\nfont-weight: bold;\n}\n.guideline-group.horizontal .size-value {\ntransform-origin: 50% 100%;\ntransform: translateX(-50%);\nleft: 50%;\nbottom: 5px;\nbottom: calc(2px + 3px * var(--zoom));\n}\n.guideline-group.vertical .size-value {\ntransform-origin: 0% 50%;\ntop: 50%;\ntransform: translateY(-50%);\nleft: 5px;\nleft: calc(2px + 3px * var(--zoom));\n}\n.guideline.gap {\nbackground: #f55;\n}\n.size-value.gap {\ncolor: #f55;\n}\n`\n  ],\n  render(t, e) {\n    const n = t.state, {\n      top: r,\n      left: s,\n      pos1: o,\n      pos2: i,\n      pos3: a,\n      pos4: c,\n      snapRenderInfo: l\n    } = n, {\n      snapRenderThreshold: u = 1\n    } = t.props;\n    if (!l || !l.render || !Xe(t, \"\"))\n      return Ae(\n        t,\n        \"boundMap\",\n        Be(),\n        (z) => JSON.stringify(z)\n      ), Ae(\n        t,\n        \"innerBoundMap\",\n        Be(),\n        (z) => JSON.stringify(z)\n      ), [];\n    n.guidelines = Ir(t);\n    const f = Math.min(o[0], i[0], a[0], c[0]), d = Math.min(o[1], i[1], a[1], c[1]), p = l.externalPoses || [], g = jt(t.state), h = [], v = [], m = [], S = [], x = [], { width: C, height: E, top: D, left: R, bottom: y, right: M } = Yt(g), P = { left: R, right: M, top: D, bottom: y, center: (R + M) / 2, middle: (D + y) / 2 }, _ = p.length > 0, O = _ ? Yt(p) : {};\n    if (!l.request) {\n      if (l.direction && x.push(\n        pl(\n          t,\n          g,\n          l.direction,\n          u,\n          u\n        )\n      ), l.snap) {\n        const z = Yt(g);\n        l.center && (z.middle = (z.top + z.bottom) / 2, z.center = (z.left + z.right) / 2), x.push(Us(t, z, u, u));\n      }\n      _ && (l.center && (O.middle = (O.top + O.bottom) / 2, O.center = (O.left + O.right) / 2), x.push(Us(t, O, u, u))), x.forEach((z) => {\n        const {\n          vertical: { posInfos: N },\n          horizontal: { posInfos: Z }\n        } = z;\n        h.push(\n          ...N.filter(({ guidelineInfos: Y }) => Y.some(({ guideline: W }) => !W.hide)).map(\n            (Y) => ({\n              type: \"snap\",\n              pos: Y.pos\n            })\n          )\n        ), v.push(\n          ...Z.filter(({ guidelineInfos: Y }) => Y.some(({ guideline: W }) => !W.hide)).map(\n            (Y) => ({\n              type: \"snap\",\n              pos: Y.pos\n            })\n          )\n        ), m.push(...io(N)), S.push(...io(Z));\n      });\n    }\n    const {\n      boundMap: T,\n      innerBoundMap: w\n    } = ao(\n      t,\n      [R, M],\n      [D, y],\n      h,\n      v\n    );\n    _ && ao(\n      t,\n      [O.left, O.right],\n      [O.top, O.bottom],\n      h,\n      v,\n      l.externalBounds\n    );\n    const k = [...m, ...S], I = k.filter((z) => z.element && !z.gapRects), $ = k.filter((z) => z.gapRects).sort((z, N) => z.gap - N.gap);\n    j(\n      t,\n      \"onSnap\",\n      {\n        guidelines: k.filter(({ element: z }) => !z),\n        elements: I,\n        gaps: $\n      },\n      !0\n    );\n    const G = Ae(\n      t,\n      \"boundMap\",\n      T,\n      (z) => JSON.stringify(z),\n      Be()\n    ), L = Ae(\n      t,\n      \"innerBoundMap\",\n      w,\n      (z) => JSON.stringify(z),\n      Be()\n    );\n    return (T === G || w === L) && j(\n      t,\n      \"onBound\",\n      {\n        bounds: T,\n        innerBounds: w\n      },\n      !0\n    ), [\n      ...zl(\n        t,\n        I,\n        [f, d],\n        P,\n        e\n      ),\n      ...Al(\n        t,\n        $,\n        [f, d],\n        P,\n        e\n      ),\n      ...ro(\n        t,\n        \"horizontal\",\n        S,\n        [s, r],\n        P,\n        e\n      ),\n      ...ro(\n        t,\n        \"vertical\",\n        m,\n        [s, r],\n        P,\n        e\n      ),\n      ...no(\n        t,\n        \"horizontal\",\n        v,\n        f,\n        r,\n        C,\n        0,\n        e\n      ),\n      ...no(\n        t,\n        \"vertical\",\n        h,\n        d,\n        s,\n        E,\n        1,\n        e\n      )\n    ];\n  },\n  dragStart(t, e) {\n    t.state.snapRenderInfo = {\n      request: e.isRequest,\n      snap: !0,\n      center: !0\n    }, yn(t);\n  },\n  drag(t) {\n    const e = t.state;\n    yn(t) || (e.guidelines = Ir(t)), e.snapRenderInfo && (e.snapRenderInfo.render = !0);\n  },\n  pinchStart(t) {\n    this.unset(t);\n  },\n  dragEnd(t) {\n    this.unset(t);\n  },\n  dragControlCondition(t, e) {\n    if (ru(t, e) || Or(t, e))\n      return !0;\n    if (!e.isRequest && e.inputEvent)\n      return bt(e.inputEvent.target, U(\"snap-control\"));\n  },\n  dragControlStart(t) {\n    t.state.snapRenderInfo = null, yn(t);\n  },\n  dragControl(t) {\n    this.drag(t);\n  },\n  dragControlEnd(t) {\n    this.unset(t);\n  },\n  dragGroupStart(t, e) {\n    this.dragStart(t, e);\n  },\n  dragGroup(t) {\n    this.drag(t);\n  },\n  dragGroupEnd(t) {\n    this.unset(t);\n  },\n  dragGroupControlStart(t) {\n    t.state.snapRenderInfo = null, yn(t);\n  },\n  dragGroupControl(t) {\n    this.drag(t);\n  },\n  dragGroupControlEnd(t) {\n    this.unset(t);\n  },\n  unset(t) {\n    const e = t.state;\n    e.enableSnap = !1, e.guidelines = [], e.snapRenderInfo = null, e.elementRects = [];\n  }\n};\nfunction ou(t, e) {\n  return [t[0] * e[0], t[1] * e[1]];\n}\nfunction U(...t) {\n  return cc(Hr, ...t);\n}\nfunction Bi(t) {\n  t();\n}\nfunction iu(t) {\n  return !t || t === \"none\" ? [1, 0, 0, 1, 0, 0] : qt(t) ? t : ln(t);\n}\nfunction en(t, e, n) {\n  return An(\n    e,\n    Ce(n, e),\n    t,\n    Ce(\n      n.map((r) => -r),\n      e\n    )\n  );\n}\nfunction au(t, e, n) {\n  return e === \"%\" ? gs(t.ownerSVGElement)[n ? \"width\" : \"height\"] / 100 : 1;\n}\nfunction cu(t) {\n  return lu(vs(t, \":before\")).map((n, r) => {\n    const { value: s, unit: o } = pn(n);\n    return s * au(t, o, r === 0);\n  });\n}\nfunction Ln(t) {\n  return t ? t.split(\" \") : [\"0\", \"0\"];\n}\nfunction lu(t) {\n  return Ln(t.transformOrigin);\n}\nfunction zi(t) {\n  const n = Gt(t)(\"transform\");\n  if (n && n !== \"none\")\n    return n;\n  if (\"transform\" in t) {\n    const s = t.transform.baseVal;\n    if (!s)\n      return \"\";\n    const o = s.length;\n    if (!o)\n      return \"\";\n    const i = [];\n    for (let a = 0; a < o; ++a) {\n      const c = s[a].matrix;\n      i.push(\n        `matrix(${[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"].map((l) => c[l]).join(\", \")})`\n      );\n    }\n    return i.join(\" \");\n  }\n  return \"\";\n}\nfunction fn(t, e, n, r, s) {\n  var h, v;\n  const o = es(t) || fe(t);\n  let i = !1, a, c;\n  if (!t || n)\n    a = t;\n  else {\n    const m = (h = t == null ? void 0 : t.assignedSlot) == null ? void 0 : h.parentElement, S = t.parentElement;\n    m ? (i = !0, c = S, a = m) : a = S;\n  }\n  let l = !1, u = t === e || a === e, f = \"relative\", d = 1;\n  const p = parseFloat(s == null ? void 0 : s(\"zoom\")) || 1, g = s == null ? void 0 : s(\"position\");\n  for (; a && a !== o; ) {\n    e === a && (u = !0);\n    const m = Gt(a), S = a.tagName.toLowerCase(), x = zi(a), C = m(\"willChange\"), E = parseFloat(m(\"zoom\")) || 1;\n    if (f = m(\"position\"), r && E !== 1) {\n      d = E;\n      break;\n    }\n    if (\n      // offsetParent is the parentElement if the target's zoom is not 1 and not absolute.\n      !n && r && p !== 1 && g && g !== \"absolute\" || S === \"svg\" || S === \"foreignobject\" || f !== \"static\" || x && x !== \"none\" || C === \"transform\"\n    )\n      break;\n    const D = (v = t == null ? void 0 : t.assignedSlot) == null ? void 0 : v.parentNode, R = a.parentNode;\n    D && (i = !0, c = R);\n    const y = R;\n    if (y && y.nodeType === 11) {\n      a = y.host, l = !0, f = Gt(a)(\"position\");\n      break;\n    }\n    a = y, f = \"relative\";\n  }\n  return {\n    offsetZoom: d,\n    hasSlot: i,\n    parentSlotElement: c,\n    isCustomElement: l,\n    isStatic: f === \"static\",\n    isEnd: u || !a || a === o,\n    offsetParent: a || o\n  };\n}\nfunction uu(t, e) {\n  const n = t.tagName.toLowerCase();\n  let r = t.offsetLeft, s = t.offsetTop;\n  const o = Gt(t), i = Kr(r);\n  let a = !i, c, l;\n  return !a && (n !== \"svg\" || t.ownerSVGElement) ? (c = Fo ? cu(t) : Ln(o(\"transformOrigin\")).map(\n    (u) => parseFloat(u)\n  ), l = c.slice(), a = !0, n === \"svg\" ? (r = 0, s = 0) : [r, s, c[0], c[1]] = pu(\n    t,\n    c,\n    t === e && e.tagName.toLowerCase() === \"g\"\n  )) : (c = Ln(o(\"transformOrigin\")).map(\n    (u) => parseFloat(u)\n  ), l = c.slice()), {\n    tagName: n,\n    isSVG: i,\n    hasOffset: a,\n    offset: [r || 0, s || 0],\n    origin: c,\n    targetOrigin: l\n  };\n}\nfunction Ai(t, e) {\n  const n = Gt(t), r = Gt(fe(t)), s = r(\"position\");\n  if (!e && (!s || s === \"static\"))\n    return [0, 0];\n  let o = parseInt(r(\"marginLeft\"), 10), i = parseInt(r(\"marginTop\"), 10);\n  return n(\"position\") === \"absolute\" && ((n(\"top\") !== \"auto\" || n(\"bottom\") !== \"auto\") && (i = 0), (n(\"left\") !== \"auto\" || n(\"right\") !== \"auto\") && (o = 0)), [o, i];\n}\nfunction Br(t) {\n  t.forEach((e) => {\n    const n = e.matrix;\n    n && (e.matrix = Ut(n, 3, 4));\n  });\n}\nfunction fu(t) {\n  let e = t.parentElement, n = !1;\n  const r = fe(t);\n  for (; e; ) {\n    const s = vs(e).transform;\n    if (s && s !== \"none\") {\n      n = !0;\n      break;\n    }\n    if (e === r)\n      break;\n    e = e.parentElement;\n  }\n  return {\n    fixedContainer: e || r,\n    hasTransform: n\n  };\n}\nfunction Jn(t, e = t.length > 9) {\n  return `${e ? \"matrix3d\" : \"matrix\"}(${ei(t, !e).join(\",\")})`;\n}\nfunction gs(t) {\n  const e = t.clientWidth, n = t.clientHeight;\n  if (!t)\n    return { x: 0, y: 0, width: 0, height: 0, clientWidth: e, clientHeight: n };\n  const r = t.viewBox, s = r && r.baseVal || {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  };\n  return {\n    x: s.x,\n    y: s.y,\n    width: s.width || e,\n    height: s.height || n,\n    clientWidth: e,\n    clientHeight: n\n  };\n}\nfunction du(t, e) {\n  const {\n    width: n,\n    height: r,\n    clientWidth: s,\n    clientHeight: o\n  } = gs(t), i = s / n, a = o / r, c = t.preserveAspectRatio.baseVal, l = c.align, u = c.meetOrSlice, f = [0, 0], d = [i, a], p = [0, 0];\n  if (l !== 1) {\n    const h = (l - 2) % 3, v = Math.floor((l - 2) / 3);\n    f[0] = n * h / 2, f[1] = r * v / 2;\n    const m = u === 2 ? Math.max(a, i) : Math.min(i, a);\n    d[0] = m, d[1] = m, p[0] = (s - n) / 2 * h, p[1] = (o - r) / 2 * v;\n  }\n  const g = rs(d, e);\n  return [g[e * (e - 1)], g[e * (e - 1) + 1]] = p, en(g, e, f);\n}\nfunction pu(t, e, n) {\n  const r = t.tagName.toLowerCase();\n  if (!t.getBBox || !n && r === \"g\")\n    return [0, 0, 0, 0];\n  const o = Gt(t)(\"transform-box\") === \"fill-box\", i = t.getBBox(), a = gs(t.ownerSVGElement);\n  let c = i.x, l = i.y;\n  r === \"foreignobject\" && !c && !l && (c = parseFloat(t.getAttribute(\"x\")) || 0, l = parseFloat(t.getAttribute(\"y\")) || 0);\n  const u = c - a.x, f = l - a.y, d = o ? e[0] : e[0] - u, p = o ? e[1] : e[1] - f;\n  return [u, f, d, p];\n}\nfunction ht(t, e, n) {\n  return _t(t, Ee(e, n), n);\n}\nfunction Me(t, e, n, r) {\n  return [\n    [0, 0],\n    [e, 0],\n    [0, n],\n    [e, n]\n  ].map((s) => ht(t, s, r));\n}\nfunction Yt(t) {\n  const e = t.map((l) => l[0]), n = t.map((l) => l[1]), r = Math.min(...e), s = Math.min(...n), o = Math.max(...e), i = Math.max(...n), a = o - r, c = i - s;\n  return {\n    left: r,\n    top: s,\n    right: o,\n    bottom: i,\n    width: a,\n    height: c\n  };\n}\nfunction co(t, e, n, r) {\n  const s = Me(t, e, n, r);\n  return Yt(s);\n}\nfunction gu(t, e, n, r, s) {\n  const o = t.target, i = t.origin, a = e.matrix, { offsetWidth: c, offsetHeight: l } = ki(o), u = n.getBoundingClientRect();\n  let f = [0, 0];\n  n === fe(n) && (f = Ai(o, !0));\n  const d = o.getBoundingClientRect(), p = d.left - u.left + n.scrollLeft - (n.clientLeft || 0) + f[0], g = d.top - u.top + n.scrollTop - (n.clientTop || 0) + f[1], h = d.width, v = d.height, m = An(r, s, a), {\n    left: S,\n    top: x,\n    width: C,\n    height: E\n  } = co(m, c, l, r), D = ht(m, i, r), R = K(D, [S, x]), y = [\n    p + R[0] * h / C,\n    g + R[1] * v / E\n  ], M = [0, 0];\n  let P = 0;\n  for (; ++P < 10; ) {\n    const _ = Jt(s, r);\n    [M[0], M[1]] = K(\n      ht(_, y, r),\n      ht(_, D, r)\n    );\n    const O = An(\n      r,\n      s,\n      Ce(M, r),\n      a\n    ), { left: T, top: w } = co(\n      O,\n      c,\n      l,\n      r\n    ), k = T - p, I = w - g;\n    if (B(k) < 2 && B(I) < 2)\n      break;\n    y[0] -= k, y[1] -= I;\n  }\n  return M.map((_) => Math.round(_));\n}\nfunction hu(t, e, n) {\n  const s = t.length === 16 ? 4 : 3, o = e.map((c) => ht(t, c, s)), { left: i, top: a } = n;\n  return o.map((c) => [c[0] + i, c[1] + a]);\n}\nfunction Vt(t) {\n  return Math.sqrt(t[0] * t[0] + t[1] * t[1]);\n}\nfunction Gi(t, e) {\n  return Vt([e[0] - t[0], e[1] - t[1]]);\n}\nfunction Je(t, e, n = 1, r = xt(t, e)) {\n  const s = Gi(t, e);\n  return {\n    transform: `translateY(-50%) translate(${t[0]}px, ${t[1]}px) rotate(${r}rad) scaleY(${n})`,\n    width: `${s}px`\n  };\n}\nfunction Nn(t, e, ...n) {\n  const r = n.length, s = n.reduce((i, a) => i + a[0], 0) / r, o = n.reduce((i, a) => i + a[1], 0) / r;\n  return {\n    transform: `translateZ(0px) translate(${s}px, ${o}px) rotate(${t}rad) scale(${e})`\n  };\n}\nfunction De(t, e) {\n  const n = t[e];\n  return qt(n) ? {\n    ...t,\n    ...n\n  } : t;\n}\nfunction ki(t) {\n  const e = t && !Kr(t.offsetWidth);\n  let n = 0, r = 0, s = 0, o = 0, i = 0, a = 0, c = 0, l = 0, u = 0, f = 0, d = 0, p = 0, g = 1 / 0, h = 1 / 0, v = 1 / 0, m = 1 / 0, S = 0, x = 0, C = !1;\n  if (t)\n    if (!e && t.ownerSVGElement) {\n      const E = t.getBBox();\n      C = !0, n = E.width, r = E.height, i = n, a = r, c = n, l = r, s = n, o = r;\n    } else {\n      const E = Gt(t), D = t.style, R = E(\"boxSizing\") === \"border-box\", y = parseFloat(E(\"borderLeftWidth\")) || 0, M = parseFloat(E(\"borderRightWidth\")) || 0, P = parseFloat(E(\"borderTopWidth\")) || 0, _ = parseFloat(E(\"borderBottomWidth\")) || 0, O = parseFloat(E(\"paddingLeft\")) || 0, T = parseFloat(E(\"paddingRight\")) || 0, w = parseFloat(E(\"paddingTop\")) || 0, k = parseFloat(E(\"paddingBottom\")) || 0, I = O + T, $ = w + k, G = y + M, L = P + _, z = I + G, N = $ + L, Z = E(\"position\");\n      let Y = 0, W = 0;\n      if (\"clientLeft\" in t) {\n        let J = null;\n        if (Z === \"absolute\" ? J = fn(t, fe(t)).offsetParent : J = t.parentElement, J) {\n          const q = Gt(J);\n          Y = parseFloat(q(\"width\")), W = parseFloat(q(\"height\"));\n        }\n      }\n      u = Math.max(\n        I,\n        ft(E(\"minWidth\"), Y) || 0\n      ), f = Math.max(\n        $,\n        ft(E(\"minHeight\"), W) || 0\n      ), g = ft(E(\"maxWidth\"), Y), h = ft(E(\"maxHeight\"), W), isNaN(g) && (g = 1 / 0), isNaN(h) && (h = 1 / 0), S = ft(D.width, 0) || 0, x = ft(D.height, 0) || 0, i = parseFloat(E(\"width\")) || 0, a = parseFloat(E(\"height\")) || 0, c = B(i - S) < 1 ? br(u, S || i, g) : i, l = B(a - x) < 1 ? br(f, x || a, h) : a, n = c, r = l, s = c, o = l, R ? (v = g, m = h, d = u, p = f, c = n - z, l = r - N) : (v = g + z, m = h + N, d = u + z, p = f + N, n = c + z, r = l + N), s = c + I, o = l + $;\n    }\n  return {\n    svg: C,\n    offsetWidth: n,\n    offsetHeight: r,\n    clientWidth: s,\n    clientHeight: o,\n    contentWidth: c,\n    contentHeight: l,\n    inlineCSSWidth: S,\n    inlineCSSHeight: x,\n    cssWidth: i,\n    cssHeight: a,\n    minWidth: u,\n    minHeight: f,\n    maxWidth: g,\n    maxHeight: h,\n    minOffsetWidth: d,\n    minOffsetHeight: p,\n    maxOffsetWidth: v,\n    maxOffsetHeight: m\n  };\n}\nfunction $i(t, e) {\n  return xt(\n    e > 0 ? t[0] : t[1],\n    e > 0 ? t[1] : t[0]\n  );\n}\nfunction Rn() {\n  return {\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0,\n    right: 0,\n    bottom: 0,\n    clientLeft: 0,\n    clientTop: 0,\n    clientWidth: 0,\n    clientHeight: 0,\n    scrollWidth: 0,\n    scrollHeight: 0\n  };\n}\nfunction Fi(t, e) {\n  const n = t === fe(t) || t === es(t), r = {\n    clientLeft: t.clientLeft,\n    clientTop: t.clientTop,\n    clientWidth: t.clientWidth,\n    clientHeight: t.clientHeight,\n    scrollWidth: t.scrollWidth,\n    scrollHeight: t.scrollHeight,\n    overflow: !1\n  };\n  return n && (r.clientHeight = Math.max(e.height, r.clientHeight), r.scrollHeight = Math.max(e.height, r.scrollHeight)), r.overflow = Gt(t)(\"overflow\") !== \"visible\", {\n    ...e,\n    ...r\n  };\n}\nfunction pr(t, e, n, r) {\n  const { left: s, right: o, top: i, bottom: a } = t, c = e.top, l = e.left, u = {\n    left: l + s,\n    top: c + i,\n    right: l + o,\n    bottom: c + a,\n    width: o - s,\n    height: a - i\n  };\n  return n && r ? Fi(n, u) : u;\n}\nfunction nn(t, e) {\n  let n = 0, r = 0, s = 0, o = 0;\n  if (t) {\n    const a = t.getBoundingClientRect();\n    n = a.left, r = a.top, s = a.width, o = a.height;\n  }\n  const i = {\n    left: n,\n    top: r,\n    width: s,\n    height: o,\n    right: n + s,\n    bottom: r + o\n  };\n  return t && e ? Fi(t, i) : i;\n}\nfunction vu(t) {\n  const { groupable: e, svgOrigin: n } = t.props, { offsetWidth: r, offsetHeight: s, svg: o, transformOrigin: i } = t.getState();\n  return !e && o && n ? Es(n, r, s) : i;\n}\nfunction Li(t, e, n, r) {\n  let s;\n  if (t)\n    s = t;\n  else if (e)\n    s = [0, 0];\n  else {\n    const o = n.target;\n    s = Ni(o, r);\n  }\n  return s;\n}\nfunction Ni(t, e) {\n  if (!t)\n    return;\n  const n = t.getAttribute(\"data-rotation\") || \"\", r = t.getAttribute(\"data-direction\");\n  if (e.deg = n, !r)\n    return;\n  const s = [0, 0];\n  return r.indexOf(\"w\") > -1 && (s[0] = -1), r.indexOf(\"e\") > -1 && (s[0] = 1), r.indexOf(\"n\") > -1 && (s[1] = -1), r.indexOf(\"s\") > -1 && (s[1] = 1), s;\n}\nfunction hs(t, e) {\n  return [\n    at(e, t[0]),\n    at(e, t[1]),\n    at(e, t[2]),\n    at(e, t[3])\n  ];\n}\nfunction jt({\n  left: t,\n  top: e,\n  pos1: n,\n  pos2: r,\n  pos3: s,\n  pos4: o\n}) {\n  return hs([n, r, s, o], [t, e]);\n}\nfunction zr(t, e) {\n  t[e ? \"controlAbles\" : \"targetAbles\"].forEach((n) => {\n    n.unset && n.unset(t);\n  });\n}\nfunction ze(t, e) {\n  const n = e ? \"controlGesto\" : \"targetGesto\", r = t[n];\n  (r == null ? void 0 : r.isIdle()) === !1 && zr(t, e), r == null || r.unset(), t[n] = null;\n}\nfunction It(t, e) {\n  if (e) {\n    const n = je(e);\n    n.nextStyle = {\n      ...n.nextStyle,\n      ...t\n    };\n  }\n  return {\n    style: t,\n    cssText: Ve(t).map((n) => `${Sc(n, \"-\")}: ${t[n]};`).join(\"\")\n  };\n}\nfunction Wi(t, e, n) {\n  const r = e.afterTransform || e.transform;\n  return {\n    ...It(\n      {\n        ...t.style,\n        ...e.style,\n        transform: r\n      },\n      n\n    ),\n    afterTransform: r,\n    transform: t.transform\n  };\n}\nfunction et(t, e, n, r) {\n  const s = e.datas;\n  s.datas || (s.datas = {});\n  const o = {\n    ...n,\n    target: t.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: t,\n    moveable: t,\n    datas: s.datas,\n    isRequest: e.isRequest,\n    isRequestChild: e.isRequestChild,\n    isFirstDrag: !!e.isFirstDrag,\n    isTrusted: e.isTrusted !== !1,\n    stopAble() {\n      s.isEventStart = !1;\n    },\n    stopDrag() {\n      var i;\n      (i = e.stop) == null || i.call(e);\n    }\n  };\n  return s.isStartEvent ? r || (s.lastEvent = o) : s.isStartEvent = !0, o;\n}\nfunction $t(t, e, n) {\n  const r = e.datas, s = \"isDrag\" in n ? n.isDrag : e.isDrag;\n  return r.datas || (r.datas = {}), {\n    isDrag: s,\n    ...n,\n    moveable: t,\n    target: t.state.target,\n    clientX: e.clientX,\n    clientY: e.clientY,\n    inputEvent: e.inputEvent,\n    currentTarget: t,\n    lastEvent: r.lastEvent,\n    isDouble: e.isDouble,\n    datas: r.datas,\n    isFirstDrag: !!e.isFirstDrag\n  };\n}\nfunction Qn(t, e, n) {\n  t._emitter.on(e, n);\n}\nfunction j(t, e, n, r, s) {\n  return t.triggerEvent(e, n, r, s);\n}\nfunction vs(t, e) {\n  return ae(t).getComputedStyle(t, e);\n}\nfunction Mn(t, e, n) {\n  const r = {}, s = {};\n  return t.filter((o) => {\n    const i = o.name;\n    if (r[i] || !e.some((a) => o[a]))\n      return !1;\n    if (!n && o.ableGroup) {\n      if (s[o.ableGroup])\n        return !1;\n      s[o.ableGroup] = !0;\n    }\n    return r[i] = !0, !0;\n  });\n}\nfunction Ar(t, e) {\n  return t === e || t == null && e == null;\n}\nfunction lo(...t) {\n  const e = t.length - 1;\n  for (let n = 0; n < e; ++n) {\n    const r = t[n];\n    if (!Kr(r))\n      return r;\n  }\n  return t[e];\n}\nfunction Yi(t, e) {\n  const n = [], r = [];\n  return t.forEach((s, o) => {\n    const i = e(s, o, t), a = r.indexOf(i), c = n[a] || [];\n    a === -1 && (r.push(i), n.push(c)), c.push(s);\n  }), n;\n}\nfunction mu(t, e) {\n  const n = [], r = {};\n  return t.forEach((s, o) => {\n    const i = e(s, o, t);\n    let a = r[i];\n    a || (a = [], r[i] = a, n.push(a)), a.push(s);\n  }), n;\n}\nfunction Vi(t) {\n  return t.reduce((e, n) => e.concat(n), []);\n}\nfunction Ne(...t) {\n  return t.sort((e, n) => B(n) - B(e)), t[0];\n}\nfunction We(t, e, n) {\n  return _t(Jt(t, n), Ee(e, n), n);\n}\nfunction xu(t, e) {\n  const { is3d: n, rootMatrix: r } = t, s = n ? 4 : 3;\n  return [e.distX, e.distY] = We(\n    r,\n    [e.distX, e.distY],\n    s\n  ), e;\n}\nfunction Wt(t, e, n, r) {\n  if (!n[0] && !n[1])\n    return e;\n  const s = ht(t, [oo(n[0] || 1), 0], r), o = ht(t, [0, oo(n[1] || 1)], r), i = ht(\n    t,\n    [n[0] / Vt(s), n[1] / Vt(o)],\n    r\n  );\n  return at(e, i);\n}\nfunction Xt(t, e, n) {\n  return n ? `${t / e * 100}%` : `${t}px`;\n}\nfunction Wn(t) {\n  return B(t) <= Bt ? 0 : t;\n}\nfunction ms(t) {\n  return (e) => {\n    if (!e.isDragging(t))\n      return \"\";\n    const r = Kc(e, t).deg;\n    return r ? U(`view-control-rotation${r}`) : \"\";\n  };\n}\nfunction xs(t, e = [t]) {\n  return (n, r) => {\n    if (r.isRequest)\n      return e.some((o) => r.requestAble === o) ? r.parentDirection : !1;\n    const s = r.inputEvent.target;\n    return bt(s, U(\"direction\")) && (!t || bt(s, U(t)));\n  };\n}\nfunction Su(t, e, n) {\n  const r = $e(t, {\n    \"x%\": (C) => C / 100 * e.offsetWidth,\n    \"y%\": (C) => C / 100 * e.offsetHeight\n  }), s = t.slice(\n    0,\n    n < 0 ? void 0 : n\n  ), o = t.slice(\n    0,\n    n < 0 ? void 0 : n + 1\n  ), i = t[n] || \"\", a = n < 0 ? [] : t.slice(n), c = n < 0 ? [] : t.slice(n + 1), l = r.slice(0, n < 0 ? void 0 : n), u = r.slice(\n    0,\n    n < 0 ? void 0 : n + 1\n  ), f = r[n] ?? $e([\"\"])[0], d = n < 0 ? [] : r.slice(n), p = n < 0 ? [] : r.slice(n + 1), g = f ? [f] : [], h = we(l), v = we(u), m = we(d), S = we(p), x = dt(\n    h,\n    m,\n    4\n  );\n  return {\n    transforms: t,\n    beforeFunctionMatrix: h,\n    beforeFunctionMatrix2: v,\n    targetFunctionMatrix: we(g),\n    afterFunctionMatrix: m,\n    afterFunctionMatrix2: S,\n    allFunctionMatrix: x,\n    beforeFunctions: l,\n    beforeFunctions2: u,\n    targetFunction: g[0],\n    afterFunctions: d,\n    afterFunctions2: p,\n    beforeFunctionTexts: s,\n    beforeFunctionTexts2: o,\n    targetFunctionText: i,\n    afterFunctionTexts: a,\n    afterFunctionTexts2: c\n  };\n}\nfunction Eu(t) {\n  return !t || !qt(t) || ns(t) ? !1 : Rt(t) || \"length\" in t;\n}\nfunction Zt(t, e) {\n  return t ? ns(t) ? t : re(t) ? e ? document.querySelector(t) : t : Zr(t) ? t() : Jo(t) ? t : \"current\" in t ? t.current : t : null;\n}\nfunction Ss(t, e) {\n  return t ? (Eu(t) ? [].slice.call(t) : [t]).reduce((r, s) => re(s) && e ? [\n    ...r,\n    ...[].slice.call(document.querySelectorAll(s))\n  ] : (Rt(s) ? r.push(Ss(s, e)) : r.push(Zt(s, e)), r), []) : [];\n}\nfunction Cu(t, e, n) {\n  let r = xt(t, e) / Math.PI * 180;\n  return r = n >= 0 ? r : 180 - r, r = r >= 0 ? r : 360 + r, r;\n}\nfunction uo(t, e) {\n  const { rootMatrix: n, is3d: r } = t;\n  let o = Jt(n, r ? 4 : 3);\n  return r || (o = Ut(o, 3, 4)), o[12] = 0, o[13] = 0, o[14] = 0, Ac(o, e);\n}\nfunction ji(t, e, n, r, s) {\n  const [o, i] = t;\n  let a = 0, c = 0;\n  if (s && o && i) {\n    const l = xt([0, 0], e), u = xt([0, 0], r), f = Vt(e), d = Math.cos(l - u) * f;\n    if (!r[0])\n      c = d, a = c * n;\n    else if (!r[1])\n      a = d, c = a / n;\n    else {\n      const p = r[0] * o, g = r[1] * i;\n      let h = Math.atan2(\n        p + e[0],\n        g + e[1]\n      ), v = Math.atan2(p, g);\n      h < 0 && (h += Math.PI * 2), v < 0 && (v += Math.PI * 2);\n      let m = 0;\n      B(h - v) < Math.PI / 2 || B(h - v) > Math.PI / 2 * 3 || (v += Math.PI), m = h - v, m > Math.PI * 2 ? m -= Math.PI * 2 : m > Math.PI ? m = 2 * Math.PI - m : m < -Math.PI && (m = -2 * Math.PI - m);\n      const S = Vt([p + e[0], g + e[1]]) * Math.cos(m);\n      a = S * Math.sin(v) - p, c = S * Math.cos(v) - g, r[0] < 0 && (a *= -1), r[1] < 0 && (c *= -1);\n    }\n  } else\n    a = r[0] * e[0], c = r[1] * e[1];\n  return [a, c];\n}\nfunction Xi(t, e, n, r) {\n  const { ratio: s, startOffsetWidth: o, startOffsetHeight: i } = n;\n  let a = 0, c = 0;\n  const { distX: l, distY: u, pinchScale: f, parentDistance: d, parentDist: p, parentScale: g } = r, h = n.fixedDirection, v = [0, 1].map((S) => B(t[S] - h[S])), m = [0, 1].map((S) => {\n    let x = v[S];\n    return x !== 0 && (x = 2 / x), x;\n  });\n  if (p)\n    a = p[0], c = p[1], e && (a ? c || (c = a / s) : a = c * s);\n  else if (an(f))\n    a = (f - 1) * o, c = (f - 1) * i;\n  else if (g)\n    a = (g[0] - 1) * o, c = (g[1] - 1) * i;\n  else if (d) {\n    const S = o * v[0], x = i * v[1], C = Vt([S, x]);\n    a = d / C * S * m[0], c = d / C * x * m[1];\n  } else {\n    let S = Qt({ datas: n, distX: l, distY: u });\n    S = m.map((x, C) => S[C] * x), [a, c] = ji(\n      [o, i],\n      S,\n      s,\n      t,\n      e\n    );\n  }\n  return {\n    // direction,\n    // sizeDirection,\n    distWidth: a,\n    distHeight: c\n  };\n}\nfunction Gr(t, e) {\n  if (e) {\n    if (t === \"left\")\n      return { x: \"0%\", y: \"50%\" };\n    if (t === \"top\")\n      return { x: \"50%\", y: \"50%\" };\n    if (t === \"center\")\n      return { x: \"50%\", y: \"50%\" };\n    if (t === \"right\")\n      return { x: \"100%\", y: \"50%\" };\n    if (t === \"bottom\")\n      return { x: \"50%\", y: \"100%\" };\n    const [n, r] = t.split(\" \"), s = Gr(n || \"\"), o = Gr(r || \"\"), i = {\n      ...s,\n      ...o\n    }, a = {\n      x: \"50%\",\n      y: \"50%\"\n    };\n    return i.x && (a.x = i.x), i.y && (a.y = i.y), i.value && (i.x && !i.y && (a.y = i.value), !i.x && i.y && (a.x = i.value)), a;\n  }\n  return t === \"left\" ? { x: \"0%\" } : t === \"right\" ? { x: \"100%\" } : t === \"top\" ? { y: \"0%\" } : t === \"bottom\" ? { y: \"100%\" } : t ? t === \"center\" ? { value: \"50%\" } : { value: t } : {};\n}\nfunction Es(t, e, n) {\n  const { x: r, y: s } = Gr(t, !0);\n  return [ft(r, e) || 0, ft(s, n) || 0];\n}\nfunction Du(t, e, n) {\n  const r = t.map((o) => K(o, e)), s = r.map((o) => gn(o, n));\n  return {\n    prev: r,\n    next: s,\n    result: s.map((o) => at(o, e))\n  };\n}\nfunction Hi(t, e) {\n  return t.length === e.length && t.every((n, r) => {\n    const s = e[r], o = Rt(n), i = Rt(s);\n    return o && i ? Hi(n, s) : !o && !i ? n === s : !1;\n  });\n}\nfunction Ae(t, e, n, r, s) {\n  const o = t._store;\n  let i = o[e];\n  if (!(e in o))\n    if (s != null)\n      o[e] = s, i = s;\n    else\n      return o[e] = n, n;\n  return i === n || r(i) === r(n) ? i : (o[e] = n, n);\n}\nfunction wt(t) {\n  return t >= 0 ? 1 : -1;\n}\nfunction B(t) {\n  return Math.abs(t);\n}\nfunction gr(t, e) {\n  return bc(t).map((n) => e(n));\n}\nfunction qi(t) {\n  return an(t) ? {\n    top: t,\n    left: t,\n    right: t,\n    bottom: t\n  } : {\n    left: t.left || 0,\n    top: t.top || 0,\n    right: t.right || 0,\n    bottom: t.bottom || 0\n  };\n}\nconst bu = dn(\"pinchable\", {\n  props: [\n    \"pinchable\"\n  ],\n  events: [\n    \"pinchStart\",\n    \"pinch\",\n    \"pinchEnd\",\n    \"pinchGroupStart\",\n    \"pinchGroup\",\n    \"pinchGroupEnd\"\n  ],\n  dragStart() {\n    return !0;\n  },\n  pinchStart(t, e) {\n    const { datas: n, targets: r, angle: s, originalDatas: o } = e, { pinchable: i, ables: a } = t.props;\n    if (!i)\n      return !1;\n    const c = `onPinch${r ? \"Group\" : \"\"}Start`, l = `drag${r ? \"Group\" : \"\"}ControlStart`, u = (i === !0 ? t.controlAbles : a.filter((g) => i.indexOf(g.name) > -1)).filter((g) => g.canPinch && g[l]), f = et(t, e, {});\n    r && (f.targets = r);\n    const d = j(t, c, f);\n    n.isPinch = d !== !1, n.ables = u;\n    const p = n.isPinch;\n    return p ? (u.forEach((g) => {\n      if (o[g.name] = o[g.name] || {}, !g[l])\n        return;\n      const h = {\n        ...e,\n        datas: o[g.name],\n        parentRotate: s,\n        isPinch: !0\n      };\n      g[l](t, h);\n    }), t.state.snapRenderInfo = {\n      request: e.isRequest,\n      direction: [0, 0]\n    }, p) : !1;\n  },\n  pinch(t, e) {\n    const {\n      datas: n,\n      scale: r,\n      distance: s,\n      originalDatas: o,\n      inputEvent: i,\n      targets: a,\n      angle: c\n    } = e;\n    if (!n.isPinch)\n      return;\n    const l = s * (1 - 1 / r), u = et(t, e, {});\n    a && (u.targets = a), j(t, `onPinch${a ? \"Group\" : \"\"}`, u);\n    const d = n.ables, p = `drag${a ? \"Group\" : \"\"}Control`;\n    return d.forEach((g) => {\n      g[p] && g[p](t, {\n        ...e,\n        datas: o[g.name],\n        inputEvent: i,\n        resolveMatrix: !0,\n        pinchScale: r,\n        parentDistance: l,\n        parentRotate: c,\n        isPinch: !0\n      });\n    }), u;\n  },\n  pinchEnd(t, e) {\n    const { datas: n, isPinch: r, inputEvent: s, targets: o, originalDatas: i } = e;\n    if (!n.isPinch)\n      return;\n    const a = `onPinch${o ? \"Group\" : \"\"}End`, c = $t(t, e, { isDrag: r });\n    o && (c.targets = o), j(t, a, c);\n    const l = n.ables, u = `drag${o ? \"Group\" : \"\"}ControlEnd`;\n    return l.forEach((f) => {\n      f[u] && f[u](t, {\n        ...e,\n        isDrag: r,\n        datas: i[f.name],\n        inputEvent: s,\n        isPinch: !0\n      });\n    }), r;\n  },\n  pinchGroupStart(t, e) {\n    return this.pinchStart(t, { ...e, targets: t.props.targets });\n  },\n  pinchGroup(t, e) {\n    return this.pinch(t, { ...e, targets: t.props.targets });\n  },\n  pinchGroupEnd(t, e) {\n    return this.pinchEnd(t, { ...e, targets: t.props.targets });\n  }\n}), fo = xs(\"scalable\"), yu = {\n  name: \"scalable\",\n  ableGroup: \"size\",\n  canPinch: !0,\n  props: [\n    \"scalable\",\n    \"throttleScale\",\n    \"renderDirections\",\n    \"keepRatio\",\n    \"edge\",\n    \"displayAroundControls\"\n  ],\n  events: [\n    \"scaleStart\",\n    \"beforeScale\",\n    \"scale\",\n    \"scaleEnd\",\n    \"scaleGroupStart\",\n    \"beforeScaleGroup\",\n    \"scaleGroup\",\n    \"scaleGroupEnd\"\n  ],\n  render: di(\"scalable\"),\n  dragControlCondition: fo,\n  viewClassName: ms(\"scalable\"),\n  dragControlStart(t, e) {\n    const { datas: n, isPinch: r, inputEvent: s, parentDirection: o } = e, i = Li(\n      o,\n      r,\n      s,\n      n\n    ), { width: a, height: c, targetTransform: l, target: u, pos1: f, pos2: d, pos4: p } = t.state;\n    if (!i || !u)\n      return !1;\n    r || Re(t, e), n.datas = {}, n.transform = l, n.prevDist = [1, 1], n.direction = i, n.startOffsetWidth = a, n.startOffsetHeight = c, n.startValue = [1, 1];\n    const g = !i[0] && !i[1] || i[0] || !i[1];\n    qn(t, e, \"scale\"), n.isWidth = g;\n    function h(E) {\n      n.ratio = E && isFinite(E) ? E : 0;\n    }\n    n.startPositions = jt(t.state);\n    function v(E) {\n      const D = yi(\n        n.startPositions,\n        E\n      );\n      n.fixedDirection = D.fixedDirection, n.fixedPosition = D.fixedPosition, n.fixedOffset = D.fixedOffset;\n    }\n    n.setFixedDirection = v, h(te(f, d) / te(d, p)), v([-i[0], -i[1]]);\n    const m = (E) => {\n      n.minScaleSize = E;\n    }, S = (E) => {\n      n.maxScaleSize = E;\n    };\n    m([-1 / 0, -1 / 0]), S([1 / 0, 1 / 0]);\n    const x = et(t, e, {\n      direction: i,\n      set: (E) => {\n        n.startValue = E;\n      },\n      setRatio: h,\n      setFixedDirection: v,\n      setMinScaleSize: m,\n      setMaxScaleSize: S,\n      ...Hn(t, e),\n      dragStart: Ot.dragStart(\n        t,\n        new Fe().dragStart([0, 0], e)\n      )\n    }), C = j(t, \"onScaleStart\", x);\n    return n.startFixedDirection = n.fixedDirection, C !== !1 && (n.isScale = !0, t.state.snapRenderInfo = {\n      request: e.isRequest,\n      direction: i\n    }), n.isScale ? x : !1;\n  },\n  dragControl(t, e) {\n    jn(t, e, \"scale\");\n    const {\n      datas: n,\n      parentKeepRatio: r,\n      parentFlag: s,\n      isPinch: o,\n      dragClient: i,\n      isRequest: a,\n      useSnap: c,\n      resolveMatrix: l\n    } = e, {\n      prevDist: u,\n      direction: f,\n      startOffsetWidth: d,\n      startOffsetHeight: p,\n      isScale: g,\n      startValue: h,\n      isWidth: v,\n      ratio: m\n    } = n;\n    if (!g)\n      return !1;\n    const S = t.props, { throttleScale: x, parentMoveable: C } = S;\n    let E = f;\n    !f[0] && !f[1] && (E = [1, 1]);\n    const D = m && (r ?? S.keepRatio) || !1, R = t.state, y = [h[0], h[1]];\n    function M() {\n      const { distWidth: q, distHeight: F } = Xi(\n        E,\n        D,\n        n,\n        e\n      ), H = d ? (d + q) / d : 1, nt = p ? (p + F) / p : 1;\n      h[0] || (y[0] = q / d), h[1] || (y[1] = F / p);\n      let lt = (E[0] || D ? H : 1) * y[0], vt = (E[1] || D ? nt : 1) * y[1];\n      return lt === 0 && (lt = wt(u[0]) * Sn), vt === 0 && (vt = wt(u[1]) * Sn), [lt, vt];\n    }\n    let P = M();\n    if (!o && t.props.groupable) {\n      const F = (R.snapRenderInfo || {}).direction;\n      Rt(F) && (F[0] || F[1]) && (R.snapRenderInfo = { direction: f, request: e.isRequest });\n    }\n    j(\n      t,\n      \"onBeforeScale\",\n      et(\n        t,\n        e,\n        {\n          scale: P,\n          setFixedDirection(q) {\n            return n.setFixedDirection(q), P = M(), P;\n          },\n          startFixedDirection: n.startFixedDirection,\n          setScale(q) {\n            P = q;\n          }\n        },\n        !0\n      )\n    );\n    let _ = [P[0] / y[0], P[1] / y[1]], O = i, T = [0, 0];\n    const w = wt(_[0] * _[1]), k = !i && !s && o;\n    if (k || l ? O = is(\n      t,\n      n.targetAllTransform,\n      [0, 0],\n      [0, 0],\n      n\n    ) : i || (O = n.fixedPosition), o || (T = eu(\n      t,\n      _,\n      f,\n      !c && a,\n      n\n    )), D) {\n      E[0] && E[1] && T[0] && T[1] && (Math.abs(T[0] * d) > Math.abs(T[1] * p) ? T[1] = 0 : T[0] = 0);\n      const q = !T[0] && !T[1];\n      if (q && (v ? _[0] = tt(_[0] * y[0], x) / y[0] : _[1] = tt(_[1] * y[1], x) / y[1]), E[0] && !E[1] || T[0] && !T[1] || q && v) {\n        _[0] += T[0];\n        const F = d * _[0] * y[0] / m;\n        _[1] = wt(w * _[0]) * B(F / p / y[1]);\n      } else if (!E[0] && E[1] || !T[0] && T[1] || q && !v) {\n        _[1] += T[1];\n        const F = p * _[1] * y[1] * m;\n        _[0] = wt(w * _[1]) * B(F / d / y[0]);\n      }\n    } else\n      _[0] += T[0], _[1] += T[1], T[0] || (_[0] = tt(_[0] * y[0], x) / y[0]), T[1] || (_[1] = tt(_[1] * y[1], x) / y[1]);\n    _[0] === 0 && (_[0] = wt(u[0]) * Sn), _[1] === 0 && (_[1] = wt(u[1]) * Sn), P = ou(_, [y[0], y[1]]);\n    const I = [d, p];\n    let $ = [d * P[0], p * P[1]];\n    $ = qo(\n      $,\n      n.minScaleSize,\n      n.maxScaleSize,\n      D ? m : !1\n    ), P = gr(2, (q) => I[q] ? $[q] / I[q] : $[q]), _ = gr(2, (q) => P[q] / y[q]);\n    const G = gr(\n      2,\n      (q) => u[q] ? _[q] / u[q] : _[q]\n    ), L = `scale(${_.join(\", \")})`, z = `scale(${P.join(\", \")})`, N = Xn(n, z, L), Z = !h[0] || !h[1], Y = Vc(\n      t,\n      Z ? z : L,\n      n.fixedDirection,\n      O,\n      n.fixedOffset,\n      n,\n      Z\n    ), W = k ? Y : K(Y, n.prevInverseDist || [0, 0]);\n    if (n.prevDist = _, n.prevInverseDist = Y, P[0] === u[0] && P[1] === u[1] && W.every((q) => !q) && !C && !k)\n      return !1;\n    const J = et(t, e, {\n      offsetWidth: d,\n      offsetHeight: p,\n      direction: f,\n      scale: P,\n      dist: _,\n      delta: G,\n      isPinch: !!o,\n      ...ii(t, N, W, o, e)\n    });\n    return j(t, \"onScale\", J), J;\n  },\n  dragControlEnd(t, e) {\n    const { datas: n } = e;\n    if (!n.isScale)\n      return !1;\n    n.isScale = !1;\n    const r = $t(t, e, {});\n    return j(t, \"onScaleEnd\", r), r;\n  },\n  dragGroupControlCondition: fo,\n  dragGroupControlStart(t, e) {\n    const { datas: n } = e, r = this.dragControlStart(t, e);\n    if (!r)\n      return !1;\n    const s = Ht(t, \"resizable\", e);\n    n.moveableScale = t.scale;\n    const o = ee(\n      t,\n      this,\n      \"dragControlStart\",\n      e,\n      (l, u) => kn(t, l, n, u)\n    ), i = (l) => {\n      r.setFixedDirection(l), o.forEach((u, f) => {\n        u.setFixedDirection(l), kn(t, u.moveable, n, s[f]);\n      });\n    };\n    n.setFixedDirection = i;\n    const a = {\n      ...r,\n      targets: t.props.targets,\n      events: o,\n      setFixedDirection: i\n    }, c = j(t, \"onScaleGroupStart\", a);\n    return n.isScale = c !== !1, n.isScale ? a : !1;\n  },\n  dragGroupControl(t, e) {\n    const { datas: n } = e;\n    if (!n.isScale)\n      return;\n    Qn(t, \"onBeforeScale\", (u) => {\n      j(\n        t,\n        \"onBeforeScaleGroup\",\n        et(\n          t,\n          e,\n          {\n            ...u,\n            targets: t.props.targets\n          },\n          !0\n        )\n      );\n    });\n    const r = this.dragControl(t, e);\n    if (!r)\n      return;\n    const { dist: s } = r, o = n.moveableScale;\n    t.scale = [s[0] * o[0], s[1] * o[1]];\n    const i = t.props.keepRatio, a = n.fixedPosition, c = ee(\n      t,\n      this,\n      \"dragControl\",\n      e,\n      (u, f) => {\n        const [d, p] = _t(\n          hn(t.rotation / 180 * Math.PI, 3),\n          [f.datas.originalX * s[0], f.datas.originalY * s[1], 1],\n          3\n        );\n        return {\n          ...f,\n          parentDist: null,\n          parentScale: s,\n          parentKeepRatio: i,\n          // recalculate child fixed position for parent group's dragging.\n          dragClient: at(a, [d, p])\n        };\n      }\n    ), l = {\n      targets: t.props.targets,\n      events: c,\n      ...r\n    };\n    return j(t, \"onScaleGroup\", l), l;\n  },\n  dragGroupControlEnd(t, e) {\n    const { isDrag: n, datas: r } = e;\n    if (!r.isScale)\n      return;\n    this.dragControlEnd(t, e);\n    const s = ee(t, this, \"dragControlEnd\", e), o = $t(t, e, {\n      targets: t.props.targets,\n      events: s\n    });\n    return j(t, \"onScaleGroupEnd\", o), n;\n  },\n  /**\n       * @method Moveable.Scalable#request\n       * @param {Moveable.Scalable.ScalableRequestParam} e - the Scalable's request parameter\n       * @return {Moveable.Requester} Moveable Requester\n       * @example\n  \n       * // Instantly Request (requestStart - request - requestEnd)\n       * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n       *\n       * // requestStart\n       * const requester = moveable.request(\"scalable\");\n       *\n       * // request\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n       *\n       * // requestEnd\n       * requester.requestEnd();\n       */\n  request() {\n    const t = {};\n    let e = 0, n = 0, r = !1;\n    return {\n      isControl: !0,\n      requestStart(s) {\n        return r = s.useSnap, {\n          datas: t,\n          parentDirection: s.direction || [1, 1],\n          useSnap: r\n        };\n      },\n      request(s) {\n        return e += s.deltaWidth, n += s.deltaHeight, {\n          datas: t,\n          parentDist: [e, n],\n          parentKeepRatio: s.keepRatio,\n          useSnap: r\n        };\n      },\n      requestEnd() {\n        return { datas: t, isDrag: !0, useSnap: r };\n      }\n    };\n  }\n};\nfunction se(t, e) {\n  return t.map((n, r) => zn(n, e[r], 1, 2));\n}\nfunction po(t, e, n) {\n  const r = xt(t, e), o = xt(t, n) - r;\n  return o >= 0 ? o : o + 2 * Math.PI;\n}\nfunction Ru(t, e) {\n  const n = po(t[0], t[1], t[2]), r = po(e[0], e[1], e[2]), s = Math.PI;\n  return !(n >= s && r <= s || n <= s && r >= s);\n}\nconst Mu = {\n  name: \"warpable\",\n  ableGroup: \"size\",\n  props: [\n    \"warpable\",\n    \"renderDirections\",\n    \"edge\",\n    \"displayAroundControls\"\n  ],\n  events: [\"warpStart\", \"warp\", \"warpEnd\"],\n  viewClassName: ms(\"warpable\"),\n  render(t, e) {\n    const { resizable: n, scalable: r, warpable: s, zoom: o } = t.props;\n    if (n || r || !s)\n      return [];\n    const { pos1: i, pos2: a, pos3: c, pos4: l } = t.state, u = se(i, a), f = se(a, i), d = se(i, c), p = se(c, i), g = se(c, l), h = se(l, c), v = se(a, l), m = se(l, a);\n    return [\n      /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\"line\"),\n          style: Je(u, g, o)\n        },\n        \"middeLine1\"\n      ),\n      /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\"line\"),\n          style: Je(f, h, o)\n        },\n        \"middeLine2\"\n      ),\n      /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\"line\"),\n          style: Je(d, v, o)\n        },\n        \"middeLine3\"\n      ),\n      /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\"line\"),\n          style: Je(p, m, o)\n        },\n        \"middeLine4\"\n      ),\n      ...pi(t, \"warpable\", e)\n    ];\n  },\n  dragControlCondition(t, e) {\n    if (e.isRequest)\n      return !1;\n    const n = e.inputEvent.target;\n    return bt(n, U(\"direction\")) && bt(n, U(\"warpable\"));\n  },\n  dragControlStart(t, e) {\n    const { datas: n, inputEvent: r } = e, { target: s } = t.props, { target: o } = r, i = Ni(o, n);\n    if (!i || !s)\n      return !1;\n    const a = t.state, {\n      transformOrigin: c,\n      is3d: l,\n      targetTransform: u,\n      targetMatrix: f,\n      width: d,\n      height: p,\n      left: g,\n      top: h\n    } = a;\n    n.datas = {}, n.targetTransform = u, n.warpTargetMatrix = l ? f : Ut(f, 3, 4), n.targetInverseMatrix = Qo(\n      Jt(n.warpTargetMatrix, 4),\n      3,\n      4\n    ), n.direction = i, n.left = g, n.top = h, n.poses = [\n      [0, 0],\n      [d, 0],\n      [0, p],\n      [d, p]\n    ].map((S) => K(S, c)), n.nextPoses = n.poses.map(\n      ([S, x]) => _t(n.warpTargetMatrix, [S, x, 0, 1], 4)\n    ), n.startValue = gt(4), n.prevMatrix = gt(4), n.absolutePoses = jt(a), n.posIndexes = oi(i), Re(t, e), qn(t, e, \"matrix3d\"), a.snapRenderInfo = {\n      request: e.isRequest,\n      direction: i\n    };\n    const v = et(t, e, {\n      set: (S) => {\n        n.startValue = S;\n      },\n      ...Hn(t, e)\n    });\n    return j(t, \"onWarpStart\", v) !== !1 && (n.isWarp = !0), n.isWarp;\n  },\n  dragControl(t, e) {\n    const { datas: n, isRequest: r } = e;\n    let { distX: s, distY: o } = e;\n    const {\n      targetInverseMatrix: i,\n      prevMatrix: a,\n      isWarp: c,\n      startValue: l,\n      poses: u,\n      posIndexes: f,\n      absolutePoses: d\n    } = n;\n    if (!c)\n      return !1;\n    if (jn(t, e, \"matrix3d\"), Xe(t, \"warpable\")) {\n      const E = f.map(\n        (y) => d[y]\n      );\n      E.length > 1 && E.push([\n        (E[0][0] + E[1][0]) / 2,\n        (E[0][1] + E[1][1]) / 2\n      ]);\n      const { horizontal: D, vertical: R } = Zn(t, r, {\n        horizontal: E.map((y) => y[1] + o),\n        vertical: E.map((y) => y[0] + s)\n      });\n      o -= D.offset, s -= R.offset;\n    }\n    const p = Qt({ datas: n, distX: s, distY: o }, !0), g = n.nextPoses.slice();\n    if (f.forEach((E) => {\n      g[E] = at(g[E], p);\n    }), !ic.every(\n      (E) => Ru(\n        E.map((D) => u[D]),\n        E.map((D) => g[D])\n      )\n    ))\n      return !1;\n    const h = ss(\n      u[0],\n      u[2],\n      u[1],\n      u[3],\n      g[0],\n      g[2],\n      g[1],\n      g[3]\n    );\n    if (!h.length)\n      return !1;\n    const v = dt(i, h, 4), m = ri(n, v, !0), S = dt(Jt(a, 4), m, 4);\n    n.prevMatrix = m;\n    const x = dt(l, m, 4), C = Xn(\n      n,\n      `matrix3d(${x.join(\", \")})`,\n      `matrix3d(${m.join(\", \")})`\n    );\n    return os(e, C), j(\n      t,\n      \"onWarp\",\n      et(t, e, {\n        delta: S,\n        matrix: x,\n        dist: m,\n        multiply: dt,\n        transform: C,\n        ...It(\n          {\n            transform: C\n          },\n          e\n        )\n      })\n    ), !0;\n  },\n  dragControlEnd(t, e) {\n    const { datas: n, isDrag: r } = e;\n    return n.isWarp ? (n.isWarp = !1, j(\n      t,\n      \"onWarpEnd\",\n      $t(t, e, {})\n    ), r) : !1;\n  }\n}, Pu = /* @__PURE__ */ U(\"area-pieces\"), Pn = /* @__PURE__ */ U(\"area-piece\"), Ui = /* @__PURE__ */ U(\"avoid\"), _u = U(\"view-dragging\");\nfunction hr(t) {\n  const e = t.areaElement;\n  if (!e)\n    return;\n  const { width: n, height: r } = t.state;\n  Zo(e, Ui), e.style.cssText += `left: 0px; top: 0px; width: ${n}px; height: ${r}px`;\n}\nfunction go(t) {\n  return /* @__PURE__ */ it.jsxs(\"div\", { className: Pu, children: [\n    /* @__PURE__ */ it.jsx(\"div\", { className: Pn }),\n    /* @__PURE__ */ it.jsx(\"div\", { className: Pn }),\n    /* @__PURE__ */ it.jsx(\"div\", { className: Pn }),\n    /* @__PURE__ */ it.jsx(\"div\", { className: Pn })\n  ] }, \"area_pieces\");\n}\nconst Ki = {\n  name: \"dragArea\",\n  props: [\"dragArea\", \"passDragArea\"],\n  events: [\"click\", \"clickGroup\"],\n  render(t, e) {\n    const { target: n, dragArea: r, groupable: s, passDragArea: o } = t.props, { width: i, height: a, renderPoses: c } = t.getState(), l = o ? U(\"area\", \"pass\") : U(\"area\");\n    if (s)\n      return [\n        /* @__PURE__ */ it.jsx(\n          \"div\",\n          {\n            ref: Se(t, \"areaElement\"),\n            className: l\n          },\n          \"area\"\n        ),\n        go()\n      ];\n    if (!n || !r)\n      return [];\n    const u = ss(\n      [0, 0],\n      [i, 0],\n      [0, a],\n      [i, a],\n      c[0],\n      c[1],\n      c[2],\n      c[3]\n    ), f = u.length ? Jn(u, !0) : \"none\";\n    return [\n      /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          ref: Se(t, \"areaElement\"),\n          className: l,\n          style: {\n            top: \"0px\",\n            left: \"0px\",\n            width: `${i}px`,\n            height: `${a}px`,\n            transformOrigin: \"0 0\",\n            transform: f\n          }\n        },\n        \"area\"\n      ),\n      go()\n    ];\n  },\n  dragStart(t, { datas: e, clientX: n, clientY: r, inputEvent: s }) {\n    if (!s)\n      return !1;\n    e.isDragArea = !1;\n    const o = t.areaElement, i = t.state, { moveableClientRect: a, renderPoses: c, rootMatrix: l, is3d: u } = i, { left: f, top: d } = a, {\n      left: p,\n      top: g,\n      width: h,\n      height: v\n    } = Yt(c), m = u ? 4 : 3;\n    let [S, x] = We(\n      l,\n      [n - f, r - d],\n      m\n    );\n    S -= p, x -= g;\n    const C = [\n      { left: p, top: g, width: h, height: x - 10 },\n      { left: p, top: g, width: S - 10, height: v },\n      {\n        left: p,\n        top: g + x + 10,\n        width: h,\n        height: v - x - 10\n      },\n      {\n        left: p + S + 10,\n        top: g,\n        width: h - S - 10,\n        height: v\n      }\n    ], E = [].slice.call(\n      o.nextElementSibling.children\n    );\n    C.forEach((D, R) => {\n      E[R].style.cssText = `left: ${D.left}px;top: ${D.top}px; width: ${D.width}px; height: ${D.height}px;`;\n    }), Ko(o, Ui), i.disableNativeEvent = !0;\n  },\n  drag(t, { datas: e, inputEvent: n }) {\n    if (this.enableNativeEvent(t), !n)\n      return !1;\n    e.isDragArea || (e.isDragArea = !0, hr(t));\n  },\n  dragEnd(t, e) {\n    this.enableNativeEvent(t);\n    const { inputEvent: n, datas: r } = e;\n    if (!n)\n      return !1;\n    r.isDragArea || hr(t);\n  },\n  dragGroupStart(t, e) {\n    return this.dragStart(t, e);\n  },\n  dragGroup(t, e) {\n    return this.drag(t, e);\n  },\n  dragGroupEnd(t, e) {\n    return this.dragEnd(t, e);\n  },\n  unset(t) {\n    hr(t), t.state.disableNativeEvent = !1;\n  },\n  enableNativeEvent(t) {\n    const e = t.state;\n    e.disableNativeEvent && Ho(() => {\n      e.disableNativeEvent = !1;\n    });\n  }\n}, Tu = dn(\"origin\", {\n  props: [\"origin\", \"svgOrigin\"],\n  render(t, e) {\n    const { zoom: n, svgOrigin: r, groupable: s } = t.props, {\n      beforeOrigin: o,\n      rotation: i,\n      svg: a,\n      allMatrix: c,\n      is3d: l,\n      left: u,\n      top: f,\n      offsetWidth: d,\n      offsetHeight: p\n    } = t.getState();\n    let g;\n    if (!s && a && r) {\n      const [h, v] = Es(r, d, p), S = ht(\n        c,\n        [h, v],\n        l ? 4 : 3\n      );\n      g = Nn(i, n, K(S, [u, f]));\n    } else\n      g = Nn(i, n, o);\n    return [\n      /* @__PURE__ */ it.jsx(\"div\", { className: U(\"control\", \"origin\"), style: g }, \"beforeOrigin\")\n    ];\n  }\n});\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar kr = function() {\n  return kr = Object.assign || function(e) {\n    for (var n, r = 1, s = arguments.length; r < s; r++) {\n      n = arguments[r];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, kr.apply(this, arguments);\n};\nfunction Ou() {\n  for (var t = 0, e = 0, n = arguments.length; e < n; e++) t += arguments[e].length;\n  for (var r = Array(t), s = 0, e = 0; e < n; e++) for (var o = arguments[e], i = 0, a = o.length; i < a; i++, s++) r[s] = o[i];\n  return r;\n}\nvar Cs = /* @__PURE__ */ function() {\n  function t() {\n    this._events = {};\n  }\n  var e = t.prototype;\n  return e.on = function(n, r) {\n    if (qt(n))\n      for (var s in n)\n        this.on(s, n[s]);\n    else\n      this._addEvent(n, r, {});\n    return this;\n  }, e.off = function(n, r) {\n    if (!n)\n      this._events = {};\n    else if (qt(n))\n      for (var s in n)\n        this.off(s);\n    else if (!r)\n      this._events[n] = [];\n    else {\n      var o = this._events[n];\n      if (o) {\n        var i = ne(o, function(a) {\n          return a.listener === r;\n        });\n        i > -1 && o.splice(i, 1);\n      }\n    }\n    return this;\n  }, e.once = function(n, r) {\n    var s = this;\n    return r && this._addEvent(n, r, {\n      once: !0\n    }), new Promise(function(o) {\n      s._addEvent(n, o, {\n        once: !0\n      });\n    });\n  }, e.emit = function(n, r) {\n    var s = this;\n    r === void 0 && (r = {});\n    var o = this._events[n];\n    if (!n || !o)\n      return !0;\n    var i = !1;\n    return r.eventType = n, r.stop = function() {\n      i = !0;\n    }, r.currentTarget = this, Ou(o).forEach(function(a) {\n      a.listener(r), a.once && s.off(n, a.listener);\n    }), !i;\n  }, e.trigger = function(n, r) {\n    return r === void 0 && (r = {}), this.emit(n, r);\n  }, e._addEvent = function(n, r, s) {\n    var o = this._events;\n    o[n] = o[n] || [];\n    var i = o[n];\n    i.push(kr({\n      listener: r\n    }, s));\n  }, t;\n}();\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar $r = function(t, e) {\n  return $r = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function(n, r) {\n    n.__proto__ = r;\n  } || function(n, r) {\n    for (var s in r) r.hasOwnProperty(s) && (n[s] = r[s]);\n  }, $r(t, e);\n};\nfunction wu(t, e) {\n  $r(t, e);\n  function n() {\n    this.constructor = t;\n  }\n  t.prototype = e === null ? Object.create(e) : (n.prototype = e.prototype, new n());\n}\nvar Ge = function() {\n  return Ge = Object.assign || function(e) {\n    for (var n, r = 1, s = arguments.length; r < s; r++) {\n      n = arguments[r];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, Ge.apply(this, arguments);\n};\nfunction Iu(t) {\n  var e = t.container;\n  return e === document.body ? [e.scrollLeft || document.documentElement.scrollLeft, e.scrollTop || document.documentElement.scrollTop] : [e.scrollLeft, e.scrollTop];\n}\nfunction ho(t, e) {\n  return t.addEventListener(\"scroll\", e), function() {\n    t.removeEventListener(\"scroll\", e);\n  };\n}\nfunction _n(t) {\n  if (t) {\n    if (re(t))\n      return document.querySelector(t);\n  } else return null;\n  if (Zr(t))\n    return t();\n  if (t instanceof Element)\n    return t;\n  if (\"current\" in t)\n    return t.current;\n  if (\"value\" in t)\n    return t.value;\n}\nvar Bu = /* @__PURE__ */ function(t) {\n  wu(e, t);\n  function e() {\n    var r = t !== null && t.apply(this, arguments) || this;\n    return r._startRect = null, r._startPos = [], r._prevTime = 0, r._timer = 0, r._prevScrollPos = [0, 0], r._isWait = !1, r._flag = !1, r._currentOptions = null, r._lock = !1, r._unregister = null, r._onScroll = function() {\n      var s = r._currentOptions;\n      r._lock || !s || r.emit(\"scrollDrag\", {\n        next: function(o) {\n          r.checkScroll({\n            container: s.container,\n            inputEvent: o\n          });\n        }\n      });\n    }, r;\n  }\n  var n = e.prototype;\n  return n.dragStart = function(r, s) {\n    var o = _n(s.container);\n    if (!o) {\n      this._flag = !1;\n      return;\n    }\n    var i = 0, a = 0, c = 0, l = 0;\n    if (o === document.body)\n      c = window.innerWidth, l = window.innerHeight;\n    else {\n      var u = o.getBoundingClientRect();\n      i = u.top, a = u.left, c = u.width, l = u.height;\n    }\n    this._flag = !0, this._startPos = [r.clientX, r.clientY], this._startRect = {\n      top: i,\n      left: a,\n      width: c,\n      height: l\n    }, this._prevScrollPos = this._getScrollPosition([0, 0], s), this._currentOptions = s, this._registerScrollEvent(s);\n  }, n.drag = function(r, s) {\n    if (clearTimeout(this._timer), !!this._flag) {\n      var o = r.clientX, i = r.clientY, a = s.threshold, c = a === void 0 ? 0 : a, l = this, u = l._startRect, f = l._startPos;\n      this._currentOptions = s;\n      var d = [0, 0];\n      return u.top > i - c ? (f[1] > u.top || i < f[1]) && (d[1] = -1) : u.top + u.height < i + c && (f[1] < u.top + u.height || i > f[1]) && (d[1] = 1), u.left > o - c ? (f[0] > u.left || o < f[0]) && (d[0] = -1) : u.left + u.width < o + c && (f[0] < u.left + u.width || o > f[0]) && (d[0] = 1), !d[0] && !d[1] ? !1 : this._continueDrag(Ge(Ge({}, s), {\n        direction: d,\n        inputEvent: r,\n        isDrag: !0\n      }));\n    }\n  }, n.checkScroll = function(r) {\n    var s = this;\n    if (this._isWait)\n      return !1;\n    var o = r.prevScrollPos, i = o === void 0 ? this._prevScrollPos : o, a = r.direction, c = r.throttleTime, l = c === void 0 ? 0 : c, u = r.inputEvent, f = r.isDrag, d = this._getScrollPosition(a || [0, 0], r), p = d[0] - i[0], g = d[1] - i[1], h = a || [p ? Math.abs(p) / p : 0, g ? Math.abs(g) / g : 0];\n    return this._prevScrollPos = d, this._lock = !1, !p && !g ? !1 : (this.emit(\"move\", {\n      offsetX: h[0] ? p : 0,\n      offsetY: h[1] ? g : 0,\n      inputEvent: u\n    }), l && f && (clearTimeout(this._timer), this._timer = window.setTimeout(function() {\n      s._continueDrag(r);\n    }, l)), !0);\n  }, n.dragEnd = function() {\n    this._flag = !1, this._lock = !1, clearTimeout(this._timer), this._unregisterScrollEvent();\n  }, n._getScrollPosition = function(r, s) {\n    var o = s.container, i = s.getScrollPosition, a = i === void 0 ? Iu : i;\n    return a({\n      container: _n(o),\n      direction: r\n    });\n  }, n._continueDrag = function(r) {\n    var s = this, o, i = r.container, a = r.direction, c = r.throttleTime, l = r.useScroll, u = r.isDrag, f = r.inputEvent;\n    if (!(!this._flag || u && this._isWait)) {\n      var d = cn(), p = Math.max(c + this._prevTime - d, 0);\n      if (p > 0)\n        return clearTimeout(this._timer), this._timer = window.setTimeout(function() {\n          s._continueDrag(r);\n        }, p), !1;\n      this._prevTime = d;\n      var g = this._getScrollPosition(a, r);\n      this._prevScrollPos = g, u && (this._isWait = !0), l || (this._lock = !0);\n      var h = {\n        container: _n(i),\n        direction: a,\n        inputEvent: f\n      };\n      return (o = r.requestScroll) === null || o === void 0 || o.call(r, h), this.emit(\"scroll\", h), this._isWait = !1, l || this.checkScroll(Ge(Ge({}, r), {\n        prevScrollPos: g,\n        direction: a,\n        inputEvent: f\n      }));\n    }\n  }, n._registerScrollEvent = function(r) {\n    this._unregisterScrollEvent();\n    var s = r.checkScrollEvent;\n    if (s) {\n      var o = s === !0 ? ho : s, i = _n(r.container);\n      s === !0 && (i === document.body || i === document.documentElement) ? this._unregister = ho(window, this._onScroll) : this._unregister = o(i, this._onScroll);\n    }\n  }, n._unregisterScrollEvent = function() {\n    var r;\n    (r = this._unregister) === null || r === void 0 || r.call(this), this._unregister = null;\n  }, e;\n}(Cs);\nfunction zu(t) {\n  const e = t.scrollContainer;\n  return [\n    e.scrollLeft,\n    e.scrollTop\n  ];\n}\nconst Au = {\n  name: \"scrollable\",\n  canPinch: !0,\n  props: [\n    \"scrollable\",\n    \"scrollContainer\",\n    \"scrollThreshold\",\n    \"scrollThrottleTime\",\n    \"getScrollPosition\",\n    \"scrollOptions\"\n  ],\n  events: [\n    \"scroll\",\n    \"scrollGroup\"\n  ],\n  dragRelation: \"strong\",\n  dragStart(t, e) {\n    const n = t.props, {\n      scrollContainer: r = t.getContainer(),\n      scrollOptions: s\n    } = n, o = new Bu(), i = Zt(r, !0);\n    e.datas.dragScroll = o, t.state.dragScroll = o;\n    const a = e.isControl ? \"controlGesto\" : \"targetGesto\", c = e.targets;\n    o.on(\"scroll\", ({ container: l, direction: u }) => {\n      const f = et(t, e, {\n        scrollContainer: l,\n        direction: u\n      }), d = c ? \"onScrollGroup\" : \"onScroll\";\n      c && (f.targets = c), j(t, d, f);\n    }).on(\"move\", ({ offsetX: l, offsetY: u, inputEvent: f }) => {\n      t[a].scrollBy(l, u, f.inputEvent, !1);\n    }).on(\"scrollDrag\", ({ next: l }) => {\n      l(t[a].getCurrentEvent());\n    }), o.dragStart(e, {\n      container: i,\n      ...s\n    });\n  },\n  checkScroll(t, e) {\n    const n = e.datas.dragScroll;\n    if (!n)\n      return;\n    const {\n      scrollContainer: r = t.getContainer(),\n      scrollThreshold: s = 0,\n      scrollThrottleTime: o = 0,\n      getScrollPosition: i = zu,\n      scrollOptions: a\n    } = t.props;\n    return n.drag(e, {\n      container: r,\n      threshold: s,\n      throttleTime: o,\n      getScrollPosition: (c) => i({ scrollContainer: c.container, direction: c.direction }),\n      ...a\n    }), !0;\n  },\n  drag(t, e) {\n    return this.checkScroll(t, e);\n  },\n  dragEnd(t, e) {\n    e.datas.dragScroll.dragEnd(), e.datas.dragScroll = null;\n  },\n  dragControlStart(t, e) {\n    return this.dragStart(t, { ...e, isControl: !0 });\n  },\n  dragControl(t, e) {\n    return this.drag(t, e);\n  },\n  dragControlEnd(t, e) {\n    return this.dragEnd(t, e);\n  },\n  dragGroupStart(t, e) {\n    return this.dragStart(t, { ...e, targets: t.props.targets });\n  },\n  dragGroup(t, e) {\n    return this.drag(t, { ...e, targets: t.props.targets });\n  },\n  dragGroupEnd(t, e) {\n    return this.dragEnd(t, { ...e, targets: t.props.targets });\n  },\n  dragGroupControlStart(t, e) {\n    return this.dragStart(t, { ...e, targets: t.props.targets, isControl: !0 });\n  },\n  dragGroupControl(t, e) {\n    return this.drag(t, { ...e, targets: t.props.targets });\n  },\n  dragGroupControEnd(t, e) {\n    return this.dragEnd(t, { ...e, targets: t.props.targets });\n  },\n  unset(t) {\n    var n;\n    const e = t.state;\n    (n = e.dragScroll) == null || n.dragEnd(), e.dragScroll = null;\n  }\n}, Zi = {\n  name: \"\",\n  props: [\n    \"target\",\n    \"dragTargetSelf\",\n    \"dragTarget\",\n    \"dragContainer\",\n    \"container\",\n    \"warpSelf\",\n    \"rootContainer\",\n    \"useResizeObserver\",\n    \"useMutationObserver\",\n    \"zoom\",\n    \"dragFocusedInput\",\n    \"transformOrigin\",\n    \"ables\",\n    \"className\",\n    \"pinchThreshold\",\n    \"pinchOutside\",\n    \"triggerAblesSimultaneously\",\n    \"checkInput\",\n    \"cspNonce\",\n    \"translateZ\",\n    \"hideDefaultLines\",\n    \"props\",\n    \"flushSync\",\n    \"stopPropagation\",\n    \"preventClickEventOnDrag\",\n    \"preventClickDefault\",\n    \"viewContainer\",\n    \"persistData\",\n    \"useAccuratePosition\",\n    \"firstRenderState\",\n    \"linePadding\",\n    \"controlPadding\",\n    \"preventDefault\",\n    \"preventRightClick\",\n    \"preventWheelClick\",\n    \"requestStyles\"\n  ],\n  events: [\n    \"changeTargets\"\n  ]\n}, Gu = dn(\"padding\", {\n  props: [\"padding\"],\n  render(t, e) {\n    const n = t.props;\n    if (n.dragArea)\n      return [];\n    const {\n      left: r,\n      top: s,\n      right: o,\n      bottom: i\n    } = qi(n.padding || {}), {\n      renderPoses: a,\n      pos1: c,\n      pos2: l,\n      pos3: u,\n      pos4: f\n    } = t.getState(), d = [c, l, u, f], p = [];\n    return r > 0 && p.push([0, 2]), s > 0 && p.push([0, 1]), o > 0 && p.push([1, 3]), i > 0 && p.push([2, 3]), p.map(([g, h], v) => {\n      const m = d[g], S = d[h], x = a[g], C = a[h], E = ss(\n        [0, 0],\n        [100, 0],\n        [0, 100],\n        [100, 100],\n        m,\n        S,\n        x,\n        C\n      );\n      if (E.length)\n        return /* @__PURE__ */ it.jsx(\"div\", { className: U(\"padding\"), style: {\n          transform: Jn(E, !0)\n        } }, `padding${v}`);\n    });\n  }\n}), vo = [\"nw\", \"ne\", \"se\", \"sw\"];\nfunction Tn(t, e) {\n  const n = t[0] + t[1], r = n > e ? e / n : 1;\n  return t[0] *= r, t[1] = e - t[1] * r, t;\n}\nconst ku = [1, 2, 5, 6], $u = [0, 3, 4, 7], ve = [1, -1, -1, 1], me = [1, 1, -1, -1];\nfunction Ds(t, e, n, r, s = 0, o = 0, i = n, a = r) {\n  const c = [];\n  let l = !1;\n  const u = t.filter((d) => !d.virtual), f = u.map((d) => {\n    const { horizontal: p, vertical: g, pos: h } = d;\n    if (g && !l && (l = !0, c.push(\"/\")), l) {\n      const v = Math.max(0, g === 1 ? h[1] - o : a - h[1]);\n      return c.push(Xt(v, r, e)), v;\n    } else {\n      const v = Math.max(0, p === 1 ? h[0] - s : i - h[0]);\n      return c.push(Xt(v, n, e)), v;\n    }\n  });\n  return {\n    radiusPoses: u,\n    styles: c,\n    raws: f\n  };\n}\nfunction Ji(t) {\n  const e = [0, 0], n = [0, 0], r = t.length;\n  for (let s = 0; s < r; ++s) {\n    const o = t[s];\n    o.sub && (o.horizontal && (e[1] === 0 && (e[0] = s), e[1] = s - e[0] + 1, n[0] = s + 1), o.vertical && (n[1] === 0 && (n[0] = s), n[1] = s - n[0] + 1));\n  }\n  return {\n    horizontalRange: e,\n    verticalRange: n\n  };\n}\nfunction Fu(t, e, n, r, s, o = [0, 0], i = !1) {\n  const a = t.indexOf(\"/\"), c = (a > -1 ? t.slice(0, a) : t).length, l = t.slice(0, c), u = t.slice(c + 1), f = l.length, d = u.length, p = d > 0, [\n    g = \"0px\",\n    h = g,\n    v = g,\n    m = h\n  ] = l, [\n    S = g,\n    x = p ? S : h,\n    C = p ? S : v,\n    E = p ? x : m\n  ] = u, D = [g, h, v, m].map((O) => ft(O, e)), R = [S, x, C, E].map((O) => ft(O, n)), y = D.slice(), M = R.slice();\n  [y[0], y[1]] = Tn(\n    [y[0], y[1]],\n    e\n  ), [y[3], y[2]] = Tn(\n    [y[3], y[2]],\n    e\n  ), [M[0], M[3]] = Tn(\n    [M[0], M[3]],\n    n\n  ), [M[1], M[2]] = Tn(\n    [M[1], M[2]],\n    n\n  );\n  const P = i ? y : y.slice(0, Math.max(o[0], f)), _ = i ? M : M.slice(0, Math.max(o[1], d));\n  return [\n    ...P.map((O, T) => {\n      const w = vo[T];\n      return {\n        virtual: T >= f,\n        horizontal: ve[T],\n        vertical: 0,\n        pos: [r + O, s + (me[T] === -1 ? n : 0)],\n        sub: !0,\n        raw: D[T],\n        direction: w\n      };\n    }),\n    ..._.map((O, T) => {\n      const w = vo[T];\n      return {\n        virtual: T >= d,\n        horizontal: 0,\n        vertical: me[T],\n        pos: [r + (ve[T] === -1 ? e : 0), s + O],\n        sub: !0,\n        raw: R[T],\n        direction: w\n      };\n    })\n  ];\n}\nfunction Lu(t, e, n, r, s = e.length) {\n  const {\n    horizontalRange: o,\n    verticalRange: i\n  } = Ji(t.slice(r)), a = n - r;\n  let c = 0;\n  if (a === 0)\n    c = s;\n  else if (a > 0 && a < o[1])\n    c = o[1] - a;\n  else if (a >= i[0])\n    c = i[0] + i[1] - a;\n  else\n    return;\n  t.splice(n, c), e.splice(n, c);\n}\nfunction Nu(t, e, n, r, s, o, i, a, c, l = 0, u = 0) {\n  const {\n    horizontalRange: f,\n    verticalRange: d\n  } = Ji(t.slice(n));\n  if (r > -1) {\n    const p = ve[r] === 1 ? o - l : a - o;\n    for (let g = f[1]; g <= r; ++g) {\n      const h = me[g] === 1 ? u : c;\n      let v = 0;\n      if (r === g ? v = o : g === 0 ? v = l + p : ve[g] === -1 && (v = a - (e[n][0] - l)), t.splice(n + g, 0, {\n        horizontal: ve[g],\n        vertical: 0,\n        pos: [v, h]\n      }), e.splice(n + g, 0, [v, h]), g === 0)\n        break;\n    }\n  } else if (s > -1) {\n    const p = me[s] === 1 ? i - u : c - i;\n    if (f[1] === 0 && d[1] === 0) {\n      const h = [\n        l + p,\n        u\n      ];\n      t.push({\n        horizontal: ve[0],\n        vertical: 0,\n        pos: h\n      }), e.push(h);\n    }\n    const g = d[0];\n    for (let h = d[1]; h <= s; ++h) {\n      const v = ve[h] === 1 ? l : a;\n      let m = 0;\n      if (s === h ? m = i : h === 0 ? m = u + p : me[h] === 1 ? m = e[n + g][1] : me[h] === -1 && (m = c - (e[n + g][1] - u)), t.push({\n        horizontal: 0,\n        vertical: me[h],\n        pos: [v, m]\n      }), e.push([v, m]), h === 0)\n        break;\n    }\n  }\n}\nfunction Wu(t, e = t.map((n) => n.raw)) {\n  const n = t.map((s, o) => s.horizontal ? e[o] : null).filter((s) => s != null), r = t.map((s, o) => s.vertical ? e[o] : null).filter((s) => s != null);\n  return {\n    horizontals: n,\n    verticals: r\n  };\n}\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nfunction Yu() {\n  for (var t = 0, e = 0, n = arguments.length; e < n; e++) t += arguments[e].length;\n  for (var r = Array(t), s = 0, e = 0; e < n; e++) for (var o = arguments[e], i = 0, a = o.length; i < a; i++, s++) r[s] = o[i];\n  return r;\n}\nfunction At(t) {\n  return tt(t, Dt);\n}\nfunction Vu(t, e) {\n  return t.every(function(n, r) {\n    return At(n - e[r]) === 0;\n  });\n}\nfunction ju(t, e) {\n  return !At(t[0] - e[0]) && !At(t[1] - e[1]);\n}\nfunction Qi(t) {\n  return t.length < 3 ? 0 : Math.abs(Cc(t.map(function(e, n) {\n    var r = t[n + 1] || t[0];\n    return e[0] * r[1] - r[0] * e[1];\n  }))) / 2;\n}\nfunction mo(t, e) {\n  var n = e.width, r = e.height, s = e.left, o = e.top, i = be(t), a = i.minX, c = i.minY, l = i.maxX, u = i.maxY, f = n / (l - a), d = r / (u - c);\n  return t.map(function(p) {\n    return [s + (p[0] - a) * f, o + (p[1] - c) * d];\n  });\n}\nfunction be(t) {\n  var e = t.map(function(r) {\n    return r[0];\n  }), n = t.map(function(r) {\n    return r[1];\n  });\n  return {\n    minX: Math.min.apply(Math, e),\n    minY: Math.min.apply(Math, n),\n    maxX: Math.max.apply(Math, e),\n    maxY: Math.max.apply(Math, n)\n  };\n}\nfunction Fr(t, e, n) {\n  var r = t[0], s = t[1], o = be(e), i = o.minX, a = o.maxX, c = [[i, s], [a, s]], l = Yn(c[0], c[1]), u = Lr(e), f = [];\n  if (u.forEach(function(g) {\n    var h = Yn(g[0], g[1]), v = g[0];\n    if (Vu(l, h))\n      f.push({\n        pos: t,\n        line: g,\n        type: \"line\"\n      });\n    else {\n      var m = ta(bs(l, h), [c, g]);\n      m.forEach(function(S) {\n        g.some(function(x) {\n          return ju(x, S);\n        }) ? f.push({\n          pos: S,\n          line: g,\n          type: \"point\"\n        }) : At(v[1] - s) !== 0 && f.push({\n          pos: S,\n          line: g,\n          type: \"intersection\"\n        });\n      });\n    }\n  }), kt(f, function(g) {\n    return g[0] === r;\n  }))\n    return !0;\n  var d = 0, p = {};\n  return f.forEach(function(g) {\n    var h = g.pos, v = g.type, m = g.line;\n    if (!(h[0] > r))\n      if (v === \"intersection\")\n        ++d;\n      else {\n        if (v === \"line\")\n          return;\n        if (v === \"point\") {\n          var S = kt(m, function(E) {\n            return E[1] !== s;\n          }), x = p[h[0]], C = S[1] > s ? 1 : -1;\n          x ? x !== C && ++d : p[h[0]] = C;\n        }\n      }\n  }), d % 2 === 1;\n}\nfunction Yn(t, e) {\n  var n = t[0], r = t[1], s = e[0], o = e[1], i = s - n, a = o - r;\n  Math.abs(i) < Dt && (i = 0), Math.abs(a) < Dt && (a = 0);\n  var c = 0, l = 0, u = 0;\n  return i ? a ? (c = -a / i, l = 1, u = -c * n - r) : (l = 1, u = -r) : a && (c = -1, u = n), [c, l, u];\n}\nfunction bs(t, e) {\n  var n = t[0], r = t[1], s = t[2], o = e[0], i = e[1], a = e[2], c = n === 0 && o === 0, l = r === 0 && i === 0, u = [];\n  if (c && l)\n    return [];\n  if (c) {\n    var f = -s / r, d = -a / i;\n    return f !== d ? [] : [[-1 / 0, f], [1 / 0, f]];\n  } else if (l) {\n    var p = -s / n, g = -a / o;\n    return p !== g ? [] : [[p, -1 / 0], [p, 1 / 0]];\n  } else if (n === 0) {\n    var h = -s / r, v = -(i * h + a) / o;\n    u = [[v, h]];\n  } else if (o === 0) {\n    var h = -a / i, v = -(r * h + s) / n;\n    u = [[v, h]];\n  } else if (r === 0) {\n    var v = -s / n, h = -(o * v + a) / i;\n    u = [[v, h]];\n  } else if (i === 0) {\n    var v = -a / o, h = -(n * v + s) / r;\n    u = [[v, h]];\n  } else {\n    var v = (r * a - i * s) / (i * n - r * o), h = -(n * v + s) / r;\n    u = [[v, h]];\n  }\n  return u.map(function(m) {\n    return [m[0], m[1]];\n  });\n}\nfunction ta(t, e) {\n  var n = e.map(function(f) {\n    return [0, 1].map(function(d) {\n      return [Math.min(f[0][d], f[1][d]), Math.max(f[0][d], f[1][d])];\n    });\n  }), r = [];\n  if (t.length === 2) {\n    var s = t[0], o = s[0], i = s[1];\n    if (At(o - t[1][0])) {\n      if (!At(i - t[1][1])) {\n        var l = Math.max.apply(Math, n.map(function(f) {\n          return f[0][0];\n        })), u = Math.min.apply(Math, n.map(function(f) {\n          return f[0][1];\n        }));\n        if (At(l - u) > 0)\n          return [];\n        r = [[l, i], [u, i]];\n      }\n    } else {\n      var a = Math.max.apply(Math, n.map(function(f) {\n        return f[1][0];\n      })), c = Math.min.apply(Math, n.map(function(f) {\n        return f[1][1];\n      }));\n      if (At(a - c) > 0)\n        return [];\n      r = [[o, a], [o, c]];\n    }\n  }\n  return r.length || (r = t.filter(function(f) {\n    var d = f[0], p = f[1];\n    return n.every(function(g) {\n      return 0 <= At(d - g[0][0]) && 0 <= At(g[0][1] - d) && 0 <= At(p - g[1][0]) && 0 <= At(g[1][1] - p);\n    });\n  })), r.map(function(f) {\n    return [At(f[0]), At(f[1])];\n  });\n}\nfunction Lr(t) {\n  return Yu(t.slice(1), [t[0]]).map(function(e, n) {\n    return [t[n], e];\n  });\n}\nfunction Xu(t, e) {\n  var n = t.slice(), r = e.slice();\n  Ns(n) === -1 && n.reverse(), Ns(r) === -1 && r.reverse();\n  var s = Lr(n), o = Lr(r), i = s.map(function(u) {\n    return Yn(u[0], u[1]);\n  }), a = o.map(function(u) {\n    return Yn(u[0], u[1]);\n  }), c = [];\n  i.forEach(function(u, f) {\n    var d = s[f], p = [];\n    a.forEach(function(g, h) {\n      var v = bs(u, g), m = ta(v, [d, o[h]]);\n      p.push.apply(p, m.map(function(S) {\n        return {\n          index1: f,\n          index2: h,\n          pos: S,\n          type: \"intersection\"\n        };\n      }));\n    }), p.sort(function(g, h) {\n      return te(d[0], g.pos) - te(d[0], h.pos);\n    }), c.push.apply(c, p), Fr(d[1], r) && c.push({\n      index1: f,\n      index2: -1,\n      pos: d[1],\n      type: \"inside\"\n    });\n  }), o.forEach(function(u, f) {\n    if (Fr(u[1], n)) {\n      var d = !1, p = ne(c, function(g) {\n        var h = g.index2;\n        return h === f ? (d = !0, !1) : !!d;\n      });\n      p === -1 && (d = !1, p = ne(c, function(g) {\n        var h = g.index1, v = g.index2;\n        return h === -1 && v + 1 === f ? (d = !0, !1) : !!d;\n      })), p === -1 ? c.push({\n        index1: -1,\n        index2: f,\n        pos: u[1],\n        type: \"inside\"\n      }) : c.splice(p, 0, {\n        index1: -1,\n        index2: f,\n        pos: u[1],\n        type: \"inside\"\n      });\n    }\n  });\n  var l = {};\n  return c.filter(function(u) {\n    var f = u.pos, d = f[0] + \"x\" + f[1];\n    return l[d] ? !1 : (l[d] = !0, !0);\n  });\n}\nfunction Hu(t, e) {\n  var n = Xu(t, e);\n  return n.map(function(r) {\n    var s = r.pos;\n    return s;\n  });\n}\nfunction qu(t, e) {\n  var n = Hu(t, e);\n  return Qi(n);\n}\nconst Uu = [\n  [0, -1, \"n\"],\n  [1, 0, \"e\"]\n], Ku = [\n  [-1, -1, \"nw\"],\n  [0, -1, \"n\"],\n  [1, -1, \"ne\"],\n  [1, 0, \"e\"],\n  [1, 1, \"se\"],\n  [0, 1, \"s\"],\n  [-1, 1, \"sw\"],\n  [-1, 0, \"w\"]\n];\nfunction ys(t, e, n) {\n  const { clipRelative: r } = t.props, { width: s, height: o } = t.state, { type: i, poses: a } = e, c = i === \"rect\", l = i === \"circle\";\n  if (i === \"polygon\")\n    return n.map(\n      (u) => `${Xt(u[0], s, r)} ${Xt(u[1], o, r)}`\n    );\n  if (c || i === \"inset\") {\n    const u = n[1][1], f = n[3][0], d = n[7][0], p = n[5][1];\n    if (c)\n      return [u, f, p, d].map((h) => `${h}px`);\n    const g = [u, s - f, o - p, d].map(\n      (h, v) => Xt(h, v % 2 ? s : o, r)\n    );\n    if (n.length > 8) {\n      const [h, v] = K(n[4], n[0]);\n      g.push(\n        \"round\",\n        ...Ds(\n          a.slice(8).map((m, S) => ({\n            ...m,\n            pos: n[S]\n          })),\n          r,\n          h,\n          v,\n          d,\n          u,\n          f,\n          p\n        ).styles\n      );\n    }\n    return g;\n  } else if (l || i === \"ellipse\") {\n    const u = n[0], f = Xt(\n      B(n[1][1] - u[1]),\n      l ? Math.sqrt((s * s + o * o) / 2) : o,\n      r\n    ), d = l ? [f] : [Xt(B(n[2][0] - u[0]), s, r), f];\n    return d.push(\n      \"at\",\n      Xt(u[0], s, r),\n      Xt(u[1], o, r)\n    ), d;\n  }\n}\nfunction Vn(t, e, n, r) {\n  const s = [r, (r + e) / 2, e], o = [t, (t + n) / 2, n];\n  return Ku.map(([i, a, c]) => {\n    const l = s[i + 1], u = o[a + 1];\n    return {\n      vertical: B(a),\n      horizontal: B(i),\n      direction: c,\n      pos: [l, u]\n    };\n  });\n}\nfunction ea(t) {\n  const e = [1 / 0, -1 / 0], n = [1 / 0, -1 / 0];\n  return t.forEach(({ pos: r }) => {\n    e[0] = Math.min(e[0], r[0]), e[1] = Math.max(e[1], r[0]), n[0] = Math.min(n[0], r[1]), n[1] = Math.max(n[1], r[1]);\n  }), [B(e[1] - e[0]), B(n[1] - n[0])];\n}\nfunction xo(t, e, n, r, s) {\n  if (!t)\n    return;\n  let o = s;\n  if (!o) {\n    const u = Gt(t), f = u(\"clipPath\");\n    o = f !== \"none\" ? f : u(\"clip\");\n  }\n  if ((!o || o === \"none\" || o === \"auto\") && (o = r, !o))\n    return;\n  const { prefix: i = o, value: a = \"\" } = Xo(o), c = i === \"circle\";\n  let l = \" \";\n  if (i === \"polygon\") {\n    const u = xe(a || \"0% 0%, 100% 0%, 100% 100%, 0% 100%\");\n    l = \",\";\n    const f = u.map((p) => {\n      const [g, h] = p.split(\" \");\n      return {\n        vertical: 1,\n        horizontal: 1,\n        pos: [ft(g, e), ft(h, n)]\n      };\n    }), d = be(f.map((p) => p.pos));\n    return {\n      type: i,\n      clipText: o,\n      poses: f,\n      splitter: l,\n      left: d.minX,\n      right: d.maxX,\n      top: d.minY,\n      bottom: d.maxY\n    };\n  } else if (c || i === \"ellipse\") {\n    let u = \"\", f = \"\", d = 0, p = 0;\n    const g = ce(a);\n    if (c) {\n      let m = \"\";\n      [m = \"50%\", , u = \"50%\", f = \"50%\"] = g, d = ft(\n        m,\n        Math.sqrt((e * e + n * n) / 2)\n      ), p = d;\n    } else {\n      let m = \"\", S = \"\";\n      [m = \"50%\", S = \"50%\", , u = \"50%\", f = \"50%\"] = g, d = ft(m, e), p = ft(S, n);\n    }\n    const h = [\n      ft(u, e),\n      ft(f, n)\n    ], v = [\n      {\n        vertical: 1,\n        horizontal: 1,\n        pos: h,\n        direction: \"nesw\"\n      },\n      ...Uu.slice(0, c ? 1 : 2).map((m) => ({\n        vertical: B(m[1]),\n        horizontal: m[0],\n        direction: m[2],\n        sub: !0,\n        pos: [h[0] + m[0] * d, h[1] + m[1] * p]\n      }))\n    ];\n    return {\n      type: i,\n      clipText: o,\n      radiusX: d,\n      radiusY: p,\n      left: h[0] - d,\n      top: h[1] - p,\n      right: h[0] + d,\n      bottom: h[1] + p,\n      poses: v,\n      splitter: l\n    };\n  } else if (i === \"inset\") {\n    const u = ce(a || \"0 0 0 0 round 0px\"), f = u.indexOf(\"round\"), d = (f > -1 ? u.slice(0, f) : u).length, p = u.slice(d + 1), [\n      g,\n      h = g,\n      v = g,\n      m = h\n    ] = u.slice(0, d), [S, x] = [g, v].map(\n      (M) => ft(M, n)\n    ), [C, E] = [m, h].map(\n      (M) => ft(M, e)\n    ), D = e - E, R = n - x, y = [\n      ...Vn(S, D, R, C)\n    ];\n    return {\n      type: \"inset\",\n      clipText: o,\n      poses: y,\n      top: S,\n      left: C,\n      right: D,\n      bottom: R,\n      radius: p,\n      splitter: l\n    };\n  } else if (i === \"rect\") {\n    const u = xe(a || `0px, ${e}px, ${n}px, 0px`);\n    l = \",\";\n    const [f, d, p, g] = u.map((v) => {\n      const { value: m } = pn(v);\n      return m;\n    }), h = Vn(f, d, p, g);\n    return {\n      type: \"rect\",\n      clipText: o,\n      poses: h,\n      top: f,\n      right: d,\n      bottom: p,\n      left: g,\n      values: u,\n      splitter: l\n    };\n  }\n}\nfunction Zu(t, e, n, r, s) {\n  const { direction: o, sub: i } = t[e], a = t.map(() => [0, 0]), c = o ? o.split(\"\") : [];\n  if (r && e < 8) {\n    const l = c.filter(\n      (v) => v === \"w\" || v === \"e\"\n    ), u = c.filter(\n      (v) => v === \"n\" || v === \"s\"\n    ), f = l[0], d = u[0];\n    a[e] = n;\n    const [p, g] = ea(t), h = p && g ? p / g : 0;\n    if (h && s) {\n      const v = (e + 4) % 8, m = t[v].pos, S = [0, 0];\n      o.indexOf(\"w\") > -1 ? S[0] = -1 : o.indexOf(\"e\") > -1 && (S[0] = 1), o.indexOf(\"n\") > -1 ? S[1] = -1 : o.indexOf(\"s\") > -1 && (S[1] = 1);\n      const x = ji(\n        [p, g],\n        n,\n        h,\n        S,\n        !0\n      ), C = p + x[0], E = g + x[1];\n      let D = m[1], R = m[1], y = m[0], M = m[0];\n      S[0] === -1 ? y = M - C : S[0] === 1 ? M = y + C : (y = y - C / 2, M = M + C / 2), S[1] === -1 ? D = R - E : (S[1] === 1 || (D = R - E / 2), R = D + E);\n      const P = Vn(D, M, R, y);\n      t.forEach((_, O) => {\n        a[O][0] = P[O].pos[0] - _.pos[0], a[O][1] = P[O].pos[1] - _.pos[1];\n      });\n    } else\n      t.forEach((v, m) => {\n        const { direction: S } = v;\n        S && (S.indexOf(f) > -1 && (a[m][0] = n[0]), S.indexOf(d) > -1 && (a[m][1] = n[1]));\n      }), f && (a[1][0] = n[0] / 2, a[5][0] = n[0] / 2), d && (a[3][1] = n[1] / 2, a[7][1] = n[1] / 2);\n  } else o && !i ? c.forEach((l) => {\n    const u = l === \"n\" || l === \"s\";\n    t.forEach((f, d) => {\n      const {\n        direction: p,\n        horizontal: g,\n        vertical: h\n      } = f;\n      !p || p.indexOf(l) === -1 || (a[d] = [\n        u || !g ? 0 : n[0],\n        !u || !h ? 0 : n[1]\n      ]);\n    });\n  }) : a[e] = n;\n  return a;\n}\nfunction Ju(t, e) {\n  const [n, r] = ni(t, e), { clipPath: s, clipIndex: o } = e.datas, {\n    type: i,\n    poses: a,\n    splitter: c\n  } = s, l = a.map((d) => d.pos);\n  if (i === \"polygon\")\n    l.splice(o, 0, [n, r]);\n  else if (i === \"inset\") {\n    const d = ku.indexOf(o), p = $u.indexOf(o), g = a.length;\n    if (Nu(\n      a,\n      l,\n      8,\n      d,\n      p,\n      n,\n      r,\n      l[4][0],\n      l[4][1],\n      l[0][0],\n      l[0][1]\n    ), g === a.length)\n      return;\n  } else\n    return;\n  const u = ys(t, s, l), f = `${i}(${u.join(c)})`;\n  j(\n    t,\n    \"onClip\",\n    et(t, e, {\n      clipEventType: \"added\",\n      clipType: i,\n      poses: l,\n      clipStyles: u,\n      clipStyle: f,\n      distX: 0,\n      distY: 0,\n      ...It(\n        {\n          clipPath: f\n        },\n        e\n      )\n    })\n  );\n}\nfunction Qu(t, e) {\n  const { clipPath: n, clipIndex: r } = e.datas, {\n    type: s,\n    poses: o,\n    splitter: i\n  } = n, a = o.map((f) => f.pos), c = a.length;\n  if (s === \"polygon\")\n    o.splice(r, 1), a.splice(r, 1);\n  else if (s === \"inset\") {\n    if (r < 8 || (Lu(o, a, r, 8, c), c === o.length))\n      return;\n  } else\n    return;\n  const l = ys(t, n, a), u = `${s}(${l.join(i)})`;\n  j(\n    t,\n    \"onClip\",\n    et(t, e, {\n      clipEventType: \"removed\",\n      clipType: s,\n      poses: a,\n      clipStyles: l,\n      clipStyle: u,\n      distX: 0,\n      distY: 0,\n      ...It(\n        {\n          clipPath: u\n        },\n        e\n      )\n    })\n  );\n}\nconst tf = {\n  name: \"clippable\",\n  props: [\n    \"clippable\",\n    \"defaultClipPath\",\n    \"customClipPath\",\n    \"keepRatio\",\n    \"clipRelative\",\n    \"clipArea\",\n    \"dragWithClip\",\n    \"clipTargetBounds\",\n    \"clipVerticalGuidelines\",\n    \"clipHorizontalGuidelines\",\n    \"clipSnapThreshold\"\n  ],\n  events: [\"clipStart\", \"clip\", \"clipEnd\"],\n  css: [\n    `.control.clip-control {\nbackground: red;\ncursor: pointer;\n}\n.control.clip-control.clip-radius {\nbackground: #d66;\n}\n.line.clip-line {\nbackground: #6e6;\ncursor: move;\nz-index: 1;\n}\n.clip-area {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n.clip-ellipse {\nposition: absolute;\ncursor: move;\nborder: 1px solid #6d6;\nborder: var(--zoompx) solid #6d6;\nborder-radius: 50%;\ntransform-origin: 0px 0px;\n}`,\n    `:host {\n--bounds-color: #d66;\n}`,\n    `.guideline {\npointer-events: none;\nz-index: 2;\n}`,\n    `.line.guideline.bounds {\nbackground: #d66;\nbackground: var(--bounds-color);\n}`\n  ],\n  render(t, e) {\n    const { customClipPath: n, defaultClipPath: r, clipArea: s, zoom: o, groupable: i } = t.props, {\n      target: a,\n      width: c,\n      height: l,\n      allMatrix: u,\n      is3d: f,\n      left: d,\n      top: p,\n      pos1: g,\n      pos2: h,\n      pos3: v,\n      pos4: m,\n      clipPathState: S,\n      snapBoundInfos: x,\n      rotation: C\n    } = t.getState();\n    if (!a || i)\n      return [];\n    const E = xo(\n      a,\n      c,\n      l,\n      r || \"inset\",\n      S || n\n    );\n    if (!E)\n      return [];\n    const D = f ? 4 : 3, R = E.type, M = E.poses.map((I) => {\n      const $ = ht(u, I.pos, D);\n      return [$[0] - d, $[1] - p];\n    });\n    let P = [], _ = [];\n    const O = R === \"rect\", T = R === \"inset\", w = R === \"polygon\";\n    if (O || T || w) {\n      const I = T ? M.slice(0, 8) : M;\n      _ = I.map(($, G) => {\n        const L = G === 0 ? I[I.length - 1] : I[G - 1], z = xt(L, $), N = Gi(L, $);\n        return /* @__PURE__ */ it.jsx(\n          \"div\",\n          {\n            className: U(\"line\", \"clip-line\", \"snap-control\"),\n            \"data-clip-index\": G,\n            style: {\n              width: `${N}px`,\n              transform: `translate(${L[0]}px, ${L[1]}px) rotate(${z}rad) scaleY(${o})`\n            }\n          },\n          `clipLine${G}`\n        );\n      });\n    }\n    const k = [\"nw\", \"n\", \"ne\", \"e\", \"se\", \"s\", \"sw\", \"w\"];\n    if (P = M.map((I, $) => {\n      const G = k[$];\n      return /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\n            \"control\",\n            \"clip-control\",\n            \"snap-control\",\n            `clip-${G}`\n          ),\n          \"data-clip-index\": $,\n          style: {\n            transform: `translate(${I[0]}px, ${I[1]}px) rotate(${C}rad) scale(${o})`,\n            backgroundColor: \"green\"\n          }\n        },\n        `clipControl${$}`\n      );\n    }), T && P.push(\n      ...M.slice(8).map((I, $) => /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\n            \"control\",\n            \"clip-control\",\n            \"clip-radius\",\n            \"snap-control\"\n          ),\n          \"data-clip-index\": 8 + $,\n          style: {\n            transform: `translate(${I[0]}px, ${I[1]}px) rotate(${C}rad) scale(${o})`\n          }\n        },\n        `clipRadiusControl${$}`\n      ))\n    ), R === \"circle\" || R === \"ellipse\") {\n      const { left: I, top: $, radiusX: G, radiusY: L } = E, [z, N] = K(\n        ht(u, [I, $], D),\n        ht(u, [0, 0], D)\n      );\n      let Z = \"none\";\n      if (!s) {\n        const Y = Math.max(10, G / 5, L / 5), W = [];\n        for (let J = 0; J <= Y; ++J) {\n          const q = Math.PI * 2 / Y * J;\n          W.push([\n            G + (G - o) * Math.cos(q),\n            L + (L - o) * Math.sin(q)\n          ]);\n        }\n        W.push([G, -2]), W.push([-2, -2]), W.push([-2, L * 2 + 2]), W.push([G * 2 + 2, L * 2 + 2]), W.push([G * 2 + 2, -2]), W.push([G, -2]), Z = `polygon(${W.map((J) => `${J[0]}px ${J[1]}px`).join(\", \")})`;\n      }\n      P.push(\n        /* @__PURE__ */ it.jsx(\n          \"div\",\n          {\n            className: U(\"clip-ellipse\", \"snap-control\"),\n            style: {\n              width: `${G * 2}px`,\n              height: `${L * 2}px`,\n              clipPath: Z,\n              transform: `translate(${-d + z}px, ${-p + N}px) ${Jn(u)}`\n            }\n          },\n          \"clipEllipse\"\n        )\n      );\n    }\n    if (s) {\n      const {\n        width: I,\n        height: $,\n        left: G,\n        top: L\n      } = Yt([g, h, v, m, ...M]);\n      if (w || O || T) {\n        const z = T ? M.slice(0, 8) : M;\n        P.push(\n          /* @__PURE__ */ it.jsx(\n            \"div\",\n            {\n              className: U(\"clip-area\", \"snap-control\"),\n              style: {\n                width: `${I}px`,\n                height: `${$}px`,\n                transform: `translate(${G}px, ${L}px)`,\n                clipPath: `polygon(${z.map((N) => `${N[0] - G}px ${N[1] - L}px`).join(\", \")})`\n              }\n            },\n            \"clipArea\"\n          )\n        );\n      }\n    }\n    return x && [\"vertical\", \"horizontal\"].forEach((I) => {\n      const $ = x[I], G = I === \"horizontal\";\n      $.isSnap && _.push(\n        ...$.snap.posInfos.map(({ pos: L }, z) => {\n          const N = K(\n            ht(\n              u,\n              G ? [0, L] : [L, 0],\n              D\n            ),\n            [d, p]\n          ), Z = K(\n            ht(\n              u,\n              G ? [c, L] : [L, l],\n              D\n            ),\n            [d, p]\n          );\n          return un(\n            e,\n            \"\",\n            N,\n            Z,\n            o,\n            `clip${I}snap${z}`,\n            \"guideline\"\n          );\n        })\n      ), $.isBound && _.push(\n        ...$.bounds.map(({ pos: L }, z) => {\n          const N = K(\n            ht(\n              u,\n              G ? [0, L] : [L, 0],\n              D\n            ),\n            [d, p]\n          ), Z = K(\n            ht(\n              u,\n              G ? [c, L] : [L, l],\n              D\n            ),\n            [d, p]\n          );\n          return un(\n            e,\n            \"\",\n            N,\n            Z,\n            o,\n            `clip${I}bounds${z}`,\n            \"guideline\",\n            \"bounds\",\n            \"bold\"\n          );\n        })\n      );\n    }), [...P, ..._];\n  },\n  dragControlCondition(t, e) {\n    return e.inputEvent && (e.inputEvent.target.getAttribute(\"class\") || \"\").indexOf(\"clip\") > -1;\n  },\n  dragStart(t, e) {\n    const n = t.props, { dragWithClip: r = !0 } = n;\n    return r ? !1 : this.dragControlStart(t, e);\n  },\n  drag(t, e) {\n    return this.dragControl(t, { ...e, isDragTarget: !0 });\n  },\n  dragEnd(t, e) {\n    return this.dragControlEnd(t, e);\n  },\n  dragControlStart(t, e) {\n    const n = t.state, { defaultClipPath: r, customClipPath: s } = t.props, { target: o, width: i, height: a } = n, c = e.inputEvent ? e.inputEvent.target : null, l = c && c.getAttribute(\"class\") || \"\", u = e.datas, f = xo(\n      o,\n      i,\n      a,\n      r || \"inset\",\n      s\n    );\n    if (!f)\n      return !1;\n    const { clipText: d, type: p, poses: g } = f;\n    return j(\n      t,\n      \"onClipStart\",\n      et(t, e, {\n        clipType: p,\n        clipStyle: d,\n        poses: g.map((v) => v.pos)\n      })\n    ) === !1 ? (u.isClipStart = !1, !1) : (u.isControl = l && l.indexOf(\"clip-control\") > -1, u.isLine = l.indexOf(\"clip-line\") > -1, u.isArea = l.indexOf(\"clip-area\") > -1 || l.indexOf(\"clip-ellipse\") > -1, u.clipIndex = c ? parseInt(c.getAttribute(\"data-clip-index\"), 10) : -1, u.clipPath = f, u.isClipStart = !0, n.clipPathState = d, Re(t, e), !0);\n  },\n  dragControl(t, e) {\n    const { datas: n, originalDatas: r, isDragTarget: s } = e;\n    if (!n.isClipStart)\n      return !1;\n    const { isControl: o, isLine: i, isArea: a, clipIndex: c, clipPath: l } = n;\n    if (!l)\n      return !1;\n    const u = De(t.props, \"clippable\"), { keepRatio: f } = u;\n    let d = 0, p = 0;\n    const g = r.draggable, h = Qt(e);\n    s && g ? [d, p] = g.prevBeforeDist : [d, p] = h;\n    const v = [d, p], m = t.state, { width: S, height: x } = m, C = !a && !o && !i, { type: E, poses: D, splitter: R } = l, y = D.map((F) => F.pos);\n    C && (d = -d, p = -p);\n    const M = !o || D[c].direction === \"nesw\", P = E === \"inset\" || E === \"rect\";\n    let _ = D.map(() => [0, 0]), O = u.defaultClipPath === \"inset\" ? !1 : f;\n    if (o && !M) {\n      const { horizontal: F, vertical: H } = D[c], nt = [d * B(F), p * B(H)];\n      _ = Zu(\n        D,\n        c,\n        nt,\n        P,\n        O\n      );\n    } else M && (_ = y.map(() => [d, p]));\n    const T = y.map((F, H) => at(F, _[H])), w = [...T];\n    m.snapBoundInfos = null;\n    const k = l.type === \"circle\", I = l.type === \"ellipse\";\n    if (k || I) {\n      const F = Yt(T), H = B(F.bottom - F.top), nt = B(I ? F.right - F.left : H), lt = T[0][1] + H, vt = T[0][0] - nt, st = T[0][0] + nt;\n      k && (w.push([st, F.bottom]), _.push([1, 0])), w.push([F.left, lt]), _.push([0, 1]), w.push([vt, F.bottom]), _.push([1, 0]);\n    }\n    const $ = Oi(\n      (u.clipHorizontalGuidelines || []).map(\n        (F) => ft(`${F}`, x)\n      ),\n      (u.clipVerticalGuidelines || []).map(\n        (F) => ft(`${F}`, S)\n      ),\n      S,\n      x\n    );\n    let G = [], L = [];\n    if (k || I)\n      G = [w[4][0], w[2][0]], L = [w[1][1], w[3][1]];\n    else if (P) {\n      const F = [\n        w[0],\n        w[2],\n        w[4],\n        w[6]\n      ], H = [_[0], _[2], _[4], _[6]];\n      G = F.filter((nt, lt) => H[lt][0]).map((nt) => nt[0]), L = F.filter((nt, lt) => H[lt][1]).map((nt) => nt[1]);\n    } else\n      G = w.filter((F, H) => _[H][0]).map((F) => F[0]), L = w.filter((F, H) => _[H][1]).map((F) => F[1]);\n    const z = [0, 0], { horizontal: N, vertical: Z } = Qs(\n      $,\n      u.clipTargetBounds && {\n        left: 0,\n        top: 0,\n        right: S,\n        bottom: x\n      },\n      G,\n      L,\n      5,\n      5\n    );\n    let Y = N.offset, W = Z.offset;\n    if (N.isBound && (z[1] += Y), Z.isBound && (z[0] += W), (I || k) && _[0][0] === 0 && _[0][1] === 0) {\n      const F = Yt(T);\n      let H = F.bottom - F.top, nt = I ? F.right - F.left : H;\n      const lt = Z.isBound ? B(W) : Z.snapIndex === 0 ? -W : W, vt = N.isBound ? B(Y) : N.snapIndex === 0 ? -Y : Y;\n      nt -= lt, H -= vt, k && (H = Ei(Z, N) > 0 ? H : nt, nt = H);\n      const st = w[0];\n      w[1][1] = st[1] - H, w[2][0] = st[0] + nt, w[3][1] = st[1] + H, w[4][0] = st[0] - nt;\n    } else if (P && O && o) {\n      const [F, H] = ea(D), nt = F && H ? F / H : 0, vt = D[c].direction || \"\";\n      let st = w[1][1], Ft = w[5][1], Lt = w[7][0], ut = w[3][0];\n      B(Y) <= B(W) ? Y = wt(Y) * B(W) / nt : W = wt(W) * B(Y) * nt, vt.indexOf(\"w\") > -1 ? Lt -= W : vt.indexOf(\"e\") > -1 ? ut -= W : (Lt += W / 2, ut -= W / 2), vt.indexOf(\"n\") > -1 ? st -= Y : vt.indexOf(\"s\") > -1 ? Ft -= Y : (st += Y / 2, Ft -= Y / 2);\n      const St = Vn(st, ut, Ft, Lt);\n      w.forEach((Kt, de) => {\n        [Kt[0], Kt[1]] = St[de].pos;\n      });\n    } else\n      w.forEach((F, H) => {\n        const nt = _[H];\n        nt[0] && (F[0] -= W), nt[1] && (F[1] -= Y);\n      });\n    const J = ys(t, l, T), q = `${E}(${J.join(R)} ${l.radius.length ? \"round \" + l.radius.join(\" \") : \"\"})`;\n    if (m.clipPathState = q, k || I)\n      G = [w[4][0], w[2][0]], L = [w[1][1], w[3][1]];\n    else if (P) {\n      const F = [\n        w[0],\n        w[2],\n        w[4],\n        w[6]\n      ];\n      G = F.map((H) => H[0]), L = F.map((H) => H[1]);\n    } else\n      G = w.map((F) => F[0]), L = w.map((F) => F[1]);\n    if (m.snapBoundInfos = Qs(\n      $,\n      u.clipTargetBounds && {\n        left: 0,\n        top: 0,\n        right: S,\n        bottom: x\n      },\n      G,\n      L,\n      1,\n      1\n    ), g) {\n      const { is3d: F, allMatrix: H } = m, nt = F ? 4 : 3;\n      let lt = z;\n      s && (lt = [\n        v[0] + z[0] - h[0],\n        v[1] + z[1] - h[1]\n      ]), g.deltaOffset = dt(\n        H,\n        [lt[0], lt[1], 0, 0],\n        nt\n      );\n    }\n    return j(\n      t,\n      \"onClip\",\n      et(t, e, {\n        clipEventType: \"changed\",\n        clipType: E,\n        poses: T,\n        clipStyle: q,\n        clipStyles: J,\n        distX: d,\n        distY: p,\n        ...It(\n          {\n            [E === \"rect\" ? \"clip\" : \"clipPath\"]: q\n          },\n          e\n        )\n      })\n    ), !0;\n  },\n  dragControlEnd(t, e) {\n    this.unset(t);\n    const { isDrag: n, datas: r, isDouble: s } = e, { isLine: o, isClipStart: i, isControl: a } = r;\n    return i ? (j(\n      t,\n      \"onClipEnd\",\n      $t(t, e, {})\n    ), s && (a ? (console.log(\"removeClipPath\"), Qu(t, e)) : o && (console.log(\"addClipPath\"), Ju(t, e))), s || n) : !1;\n  },\n  unset(t) {\n    t.state.clipPathState = \"\", t.state.snapBoundInfos = null;\n  }\n}, ef = {\n  name: \"originDraggable\",\n  props: [\n    \"originDraggable\",\n    \"originRelative\"\n  ],\n  events: [\n    \"dragOriginStart\",\n    \"dragOrigin\",\n    \"dragOriginEnd\"\n  ],\n  css: [\n    `:host[data-able-origindraggable] .control.origin {\npointer-events: auto;\n}`\n  ],\n  dragControlCondition(t, e) {\n    return e.isRequest ? e.requestAble === \"originDraggable\" : bt(e.inputEvent.target, U(\"origin\"));\n  },\n  dragControlStart(t, e) {\n    const { datas: n } = e;\n    Re(t, e);\n    const r = et(t, e, {\n      dragStart: Ot.dragStart(\n        t,\n        new Fe().dragStart([0, 0], e)\n      )\n    }), s = j(t, \"onDragOriginStart\", r);\n    return n.startOrigin = t.state.transformOrigin, n.startTargetOrigin = t.state.targetOrigin, n.prevOrigin = [0, 0], n.isDragOrigin = !0, s === !1 ? (n.isDragOrigin = !1, !1) : r;\n  },\n  dragControl(t, e) {\n    const { datas: n, isPinch: r, isRequest: s } = e;\n    if (!n.isDragOrigin)\n      return !1;\n    const [o, i] = Qt(e), a = t.state, {\n      width: c,\n      height: l,\n      offsetMatrix: u,\n      targetMatrix: f,\n      is3d: d\n    } = a, {\n      originRelative: p = !0\n    } = t.props, g = d ? 4 : 3;\n    let h = [o, i];\n    if (s) {\n      const P = e.distOrigin;\n      (P[0] || P[1]) && (h = P);\n    }\n    const v = at(n.startOrigin, h), m = at(n.startTargetOrigin, h), S = K(h, n.prevOrigin), x = mn(\n      u,\n      f,\n      v,\n      g\n    ), C = t.getRect(), E = Yt(Me(x, c, l, g)), D = [\n      C.left - E.left,\n      C.top - E.top\n    ];\n    n.prevOrigin = h;\n    const R = [\n      Xt(m[0], c, p),\n      Xt(m[1], l, p)\n    ].join(\" \"), y = Ot.drag(\n      t,\n      vn(e, t.state, D, !!r)\n    ), M = et(t, e, {\n      width: c,\n      height: l,\n      origin: v,\n      dist: h,\n      delta: S,\n      transformOrigin: R,\n      drag: y,\n      ...It({\n        transformOrigin: R,\n        transform: y.transform\n      }, e),\n      afterTransform: y.transform\n    });\n    return j(t, \"onDragOrigin\", M), M;\n  },\n  dragControlEnd(t, e) {\n    const { datas: n } = e;\n    return n.isDragOrigin ? (j(\n      t,\n      \"onDragOriginEnd\",\n      $t(t, e, {})\n    ), !0) : !1;\n  },\n  dragGroupControlCondition(t, e) {\n    return this.dragControlCondition(t, e);\n  },\n  dragGroupControlStart(t, e) {\n    return !!this.dragControlStart(t, e);\n  },\n  dragGroupControl(t, e) {\n    const n = this.dragControl(t, e);\n    return n ? (t.transformOrigin = n.transformOrigin, !0) : !1;\n  },\n  /**\n      * @method Moveable.OriginDraggable#request\n      * @param {object} e - the OriginDraggable's request parameter\n      * @param {number} [e.x] - x position\n      * @param {number} [e.y] - y position\n      * @param {number} [e.deltaX] - x number to move\n      * @param {number} [e.deltaY] - y number to move\n      * @param {array} [e.deltaOrigin] - left, top number to move transform-origin\n      * @param {array} [e.origin] - transform-origin position\n      * @param {number} [e.isInstant] - Whether to execute the request instantly\n      * @return {Moveable.Requester} Moveable Requester\n      * @example\n  \n      * // Instantly Request (requestStart - request - requestEnd)\n      * // Use Relative Value\n      * moveable.request(\"originDraggable\", { deltaX: 10, deltaY: 10 }, true);\n      * // Use Absolute Value\n      * moveable.request(\"originDraggable\", { x: 200, y: 100 }, true);\n      * // Use Transform Value\n      * moveable.request(\"originDraggable\", { deltaOrigin: [10, 0] }, true);\n      * moveable.request(\"originDraggable\", { origin: [100, 0] }, true);\n      * // requestStart\n      * const requester = moveable.request(\"originDraggable\");\n      *\n      * // request\n      * // Use Relative Value\n      * requester.request({ deltaX: 10, deltaY: 10 });\n      * requester.request({ deltaX: 10, deltaY: 10 });\n      * requester.request({ deltaX: 10, deltaY: 10 });\n      * // Use Absolute Value\n      * moveable.request(\"originDraggable\", { x: 200, y: 100 });\n      * moveable.request(\"originDraggable\", { x: 220, y: 100 });\n      * moveable.request(\"originDraggable\", { x: 240, y: 100 });\n      *\n      * // requestEnd\n      * requester.requestEnd();\n      */\n  request(t) {\n    const e = {}, n = t.getRect();\n    let r = 0, s = 0;\n    const o = n.transformOrigin, i = [0, 0];\n    return {\n      isControl: !0,\n      requestStart() {\n        return { datas: e };\n      },\n      request(a) {\n        return \"deltaOrigin\" in a ? (i[0] += a.deltaOrigin[0], i[1] += a.deltaOrigin[1]) : \"origin\" in a ? (i[0] = a.origin[0] - o[0], i[1] = a.origin[1] - o[1]) : (\"x\" in a ? r = a.x - n.left : \"deltaX\" in a && (r += a.deltaX), \"y\" in a ? s = a.y - n.top : \"deltaY\" in a && (s += a.deltaY)), { datas: e, distX: r, distY: s, distOrigin: i };\n      },\n      requestEnd() {\n        return { datas: e, isDrag: !0 };\n      }\n    };\n  }\n};\nfunction nf(t, e, n, r) {\n  const s = t.filter(({ virtual: c, horizontal: l }) => l && !c).length, o = t.filter(({ virtual: c, vertical: l }) => l && !c).length;\n  let i = -1;\n  if (e === 0 && (s === 0 ? i = 0 : s === 1 && (i = 1)), e === 2 && (s <= 2 ? i = 2 : s <= 3 && (i = 3)), e === 3 && (o === 0 ? i = 4 : o < 4 && (i = 7)), e === 1 && (o <= 1 ? i = 5 : o <= 2 && (i = 6)), i === -1 || !t[i].virtual)\n    return;\n  const a = t[i];\n  rf(t, i), i < 4 ? a.pos[0] = n : a.pos[1] = r;\n}\nfunction rf(t, e) {\n  e < 4 ? t.slice(0, e + 1).forEach((n) => {\n    n.virtual = !1;\n  }) : (t[0].virtual && (t[0].virtual = !1), t.slice(4, e + 1).forEach((n) => {\n    n.virtual = !1;\n  }));\n}\nfunction sf(t, e) {\n  e < 4 ? t.slice(e, 4).forEach((n) => {\n    n.virtual = !0;\n  }) : t.slice(e).forEach((n) => {\n    n.virtual = !0;\n  });\n}\nfunction So(t, e, n, r = [0, 0], s) {\n  let o = [];\n  return !t || t === \"0px\" ? o = [] : o = ce(t), Fu(o, e, n, 0, 0, r, s);\n}\nfunction Eo(t, e, n, r, s) {\n  const o = t.state, {\n    width: i,\n    height: a\n  } = o, {\n    raws: c,\n    styles: l,\n    radiusPoses: u\n  } = Ds(\n    s,\n    t.props.roundRelative,\n    i,\n    a\n  ), {\n    horizontals: f,\n    verticals: d\n  } = Wu(u, c), p = l.join(\" \");\n  o.borderRadiusState = p;\n  const g = et(t, e, {\n    horizontals: f,\n    verticals: d,\n    borderRadius: p,\n    width: i,\n    height: a,\n    delta: r,\n    dist: n,\n    ...It({\n      borderRadius: p\n    }, e)\n  });\n  return j(t, \"onRound\", g), g;\n}\nfunction Co(t) {\n  var r;\n  const {\n    style: e\n  } = t.getState();\n  let n = e.borderRadius || \"\";\n  if (!n && t.props.groupable) {\n    const s = t.moveables[0], o = t.getTargets()[0];\n    o && ((s == null ? void 0 : s.props.target) === o ? (n = ((r = t.moveables[0]) == null ? void 0 : r.state.style.borderRadius) ?? \"\", e.borderRadius = n) : (n = vs(o).borderRadius, e.borderRadius = n));\n  }\n  return n;\n}\nconst of = {\n  name: \"roundable\",\n  props: [\n    \"roundable\",\n    \"roundRelative\",\n    \"minRoundControls\",\n    \"maxRoundControls\",\n    \"roundClickable\",\n    \"roundPadding\",\n    \"isDisplayShadowRoundControls\"\n  ],\n  events: [\n    \"roundStart\",\n    \"round\",\n    \"roundEnd\",\n    \"roundGroupStart\",\n    \"roundGroup\",\n    \"roundGroupEnd\"\n  ],\n  css: [\n    `.control.border-radius {\nbackground: #d66;\ncursor: pointer;\nz-index: 3;\n}`,\n    `.control.border-radius.vertical {\nbackground: #d6d;\nz-index: 2;\n}`,\n    `.control.border-radius.virtual {\nopacity: 0.5;\nz-index: 1;\n}`,\n    `:host.round-line-clickable .line.direction {\ncursor: pointer;\n}`\n  ],\n  className(t) {\n    const e = t.props.roundClickable;\n    return e === !0 || e === \"line\" ? U(\"round-line-clickable\") : \"\";\n  },\n  requestStyle() {\n    return [\"borderRadius\"];\n  },\n  requestChildStyle() {\n    return [\"borderRadius\"];\n  },\n  render(t, e) {\n    const {\n      target: n,\n      width: r,\n      height: s,\n      allMatrix: o,\n      is3d: i,\n      left: a,\n      top: c,\n      borderRadiusState: l\n    } = t.getState(), {\n      minRoundControls: u = [0, 0],\n      maxRoundControls: f = [4, 4],\n      zoom: d,\n      roundPadding: p = 0,\n      isDisplayShadowRoundControls: g,\n      groupable: h\n    } = t.props;\n    if (!n)\n      return null;\n    const v = l || Co(t), m = i ? 4 : 3, S = So(\n      v,\n      r,\n      s,\n      u,\n      !0\n    );\n    if (!S)\n      return null;\n    let x = 0, C = 0;\n    const E = h ? [0, 0] : [a, c];\n    return S.map((D, R) => {\n      const y = D.horizontal, M = D.vertical, P = D.direction || \"\", _ = [...D.pos];\n      C += Math.abs(y), x += Math.abs(M), y && P.indexOf(\"n\") > -1 && (_[1] -= p), M && P.indexOf(\"w\") > -1 && (_[0] -= p), y && P.indexOf(\"s\") > -1 && (_[1] += p), M && P.indexOf(\"e\") > -1 && (_[0] += p);\n      const O = K(ht(o, _, m), E), T = g && g !== \"horizontal\", w = D.vertical ? x <= f[1] && (T || !D.virtual) : C <= f[0] && (g || !D.virtual);\n      return /* @__PURE__ */ it.jsx(\n        \"div\",\n        {\n          className: U(\n            \"control\",\n            \"border-radius\",\n            D.vertical ? \"vertical\" : \"\",\n            D.virtual ? \"virtual\" : \"\"\n          ),\n          \"data-radius-index\": R,\n          style: {\n            display: w ? \"block\" : \"none\",\n            transform: `translate(${O[0]}px, ${O[1]}px) scale(${d})`\n          }\n        },\n        `borderRadiusControl${R}`\n      );\n    });\n  },\n  dragControlCondition(t, e) {\n    if (!e.inputEvent || e.isRequest)\n      return !1;\n    const n = e.inputEvent.target.getAttribute(\"class\") || \"\";\n    return n.indexOf(\"border-radius\") > -1 || n.indexOf(\"moveable-line\") > -1 && n.indexOf(\"moveable-direction\") > -1;\n  },\n  dragGroupControlCondition(t, e) {\n    return this.dragControlCondition(t, e);\n  },\n  dragControlStart(t, e) {\n    const { inputEvent: n, datas: r } = e, s = n.target, o = s.getAttribute(\"class\") || \"\", i = o.indexOf(\"border-radius\") > -1, a = o.indexOf(\"moveable-line\") > -1 && o.indexOf(\"moveable-direction\") > -1, c = i ? parseInt(s.getAttribute(\"data-radius-index\"), 10) : -1;\n    let l = -1;\n    if (a) {\n      const x = s.getAttribute(\"data-line-key\") || \"\";\n      x && (l = parseInt(x.replace(/render-line-/g, \"\"), 10), isNaN(l) && (l = -1));\n    }\n    if (!i && !a)\n      return !1;\n    const u = et(t, e, {});\n    if (j(\n      t,\n      \"onRoundStart\",\n      u\n    ) === !1)\n      return !1;\n    r.lineIndex = l, r.controlIndex = c, r.isControl = i, r.isLine = a, Re(t, e);\n    const {\n      roundRelative: d,\n      minRoundControls: p = [0, 0]\n    } = t.props, g = t.state, {\n      width: h,\n      height: v\n    } = g;\n    r.isRound = !0, r.prevDist = [0, 0];\n    const m = Co(t), S = So(\n      m || \"\",\n      h,\n      v,\n      p,\n      !0\n    ) || [];\n    return r.controlPoses = S, g.borderRadiusState = Ds(\n      S,\n      d,\n      h,\n      v\n    ).styles.join(\" \"), u;\n  },\n  dragControl(t, e) {\n    const { datas: n } = e, r = n.controlPoses;\n    if (!n.isRound || !n.isControl || !r.length)\n      return !1;\n    const s = n.controlIndex, [o, i] = Qt(e), a = [o, i], c = K(a, n.prevDist), {\n      maxRoundControls: l = [4, 4]\n    } = t.props, { width: u, height: f } = t.state, d = r[s], p = d.vertical, g = d.horizontal, h = r.map((m) => {\n      const { horizontal: S, vertical: x } = m, C = [\n        S * g * a[0],\n        x * p * a[1]\n      ];\n      if (S) {\n        if (l[0] === 1)\n          return C;\n        if (l[0] < 4 && S !== g)\n          return C;\n      } else {\n        if (l[1] === 0)\n          return C[1] = x * g * a[0] / u * f, C;\n        if (p) {\n          if (l[1] === 1)\n            return C;\n          if (l[1] < 4 && x !== p)\n            return C;\n        }\n      }\n      return [0, 0];\n    });\n    h[s] = a;\n    const v = r.map((m, S) => ({\n      ...m,\n      pos: at(m.pos, h[S])\n    }));\n    return s < 4 ? v.slice(0, s + 1).forEach((m) => {\n      m.virtual = !1;\n    }) : v.slice(4, s + 1).forEach((m) => {\n      m.virtual = !1;\n    }), n.prevDist = [o, i], Eo(\n      t,\n      e,\n      a,\n      c,\n      v\n    );\n  },\n  dragControlEnd(t, e) {\n    const n = t.state;\n    n.borderRadiusState = \"\";\n    const { datas: r, isDouble: s } = e;\n    if (!r.isRound)\n      return !1;\n    const {\n      isControl: o,\n      controlIndex: i,\n      isLine: a,\n      lineIndex: c\n    } = r, l = r.controlPoses, u = l.filter(({ virtual: p }) => p).length, {\n      roundClickable: f = !0\n    } = t.props;\n    if (s && f) {\n      if (o && (f === !0 || f === \"control\"))\n        sf(l, i);\n      else if (a && (f === !0 || f === \"line\")) {\n        const [p, g] = ni(t, e);\n        nf(l, c, p, g);\n      }\n      u !== l.filter(({ virtual: p }) => p).length && Eo(\n        t,\n        e,\n        [0, 0],\n        [0, 0],\n        l\n      );\n    }\n    const d = $t(t, e, {});\n    return j(t, \"onRoundEnd\", d), n.borderRadiusState = \"\", d;\n  },\n  dragGroupControlStart(t, e) {\n    const n = this.dragControlStart(t, e);\n    if (!n)\n      return !1;\n    const r = t.moveables, s = t.props.targets, o = Ht(t, \"roundable\", e), i = {\n      targets: t.props.targets,\n      events: o.map((a, c) => ({\n        ...a,\n        target: s[c],\n        moveable: r[c],\n        currentTarget: r[c]\n      })),\n      ...n\n    };\n    return j(t, \"onRoundGroupStart\", i), n;\n  },\n  dragGroupControl(t, e) {\n    const n = this.dragControl(t, e);\n    if (!n)\n      return !1;\n    const r = t.moveables, s = t.props.targets, o = Ht(t, \"roundable\", e), i = {\n      targets: t.props.targets,\n      events: o.map((a, c) => ({\n        ...a,\n        target: s[c],\n        moveable: r[c],\n        currentTarget: r[c],\n        ...It({\n          borderRadius: n.borderRadius\n        }, a)\n      })),\n      ...n\n    };\n    return j(t, \"onRoundGroup\", i), i;\n  },\n  dragGroupControlEnd(t, e) {\n    const n = t.moveables, r = t.props.targets, s = Ht(t, \"roundable\", e);\n    Qn(t, \"onRound\", (a) => {\n      const c = {\n        targets: t.props.targets,\n        events: s.map((l, u) => ({\n          ...l,\n          target: r[u],\n          moveable: n[u],\n          currentTarget: n[u],\n          ...It({\n            borderRadius: a.borderRadius\n          }, l)\n        })),\n        ...a\n      };\n      j(t, \"onRoundGroup\", c);\n    });\n    const o = this.dragControlEnd(t, e);\n    if (!o)\n      return !1;\n    const i = {\n      targets: t.props.targets,\n      events: s.map((a, c) => {\n        var l;\n        return {\n          ...a,\n          target: r[c],\n          moveable: n[c],\n          currentTarget: n[c],\n          lastEvent: (l = a.datas) == null ? void 0 : l.lastEvent\n        };\n      }),\n      ...o\n    };\n    return j(t, \"onRoundGroupEnd\", i), i;\n  },\n  unset(t) {\n    t.state.borderRadiusState = \"\";\n  }\n};\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\nvar Nr = function(t, e) {\n  return Nr = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(n, r) {\n    n.__proto__ = r;\n  } || function(n, r) {\n    for (var s in r) r.hasOwnProperty(s) && (n[s] = r[s]);\n  }, Nr(t, e);\n};\nfunction af(t, e) {\n  Nr(t, e);\n  function n() {\n    this.constructor = t;\n  }\n  t.prototype = e === null ? Object.create(e) : (n.prototype = e.prototype, new n());\n}\nvar Ct = function() {\n  return Ct = Object.assign || function(e) {\n    for (var n, r = 1, s = arguments.length; r < s; r++) {\n      n = arguments[r];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, Ct.apply(this, arguments);\n};\nfunction cf(t, e) {\n  var n = e[0] - t[0], r = e[1] - t[1], s = Math.atan2(r, n);\n  return s >= 0 ? s : s + Math.PI * 2;\n}\nfunction vr(t) {\n  return cf([\n    t[0].clientX,\n    t[0].clientY\n  ], [\n    t[1].clientX,\n    t[1].clientY\n  ]) / Math.PI * 180;\n}\nfunction lf(t) {\n  return t.touches && t.touches.length >= 2;\n}\nfunction On(t) {\n  return t ? t.touches ? ff(t.touches) : [na(t)] : [];\n}\nfunction uf(t) {\n  return t && (t.type.indexOf(\"mouse\") > -1 || \"button\" in t);\n}\nfunction Do(t, e, n) {\n  var r = n.length, s = rn(t, r), o = s.clientX, i = s.clientY, a = s.originalClientX, c = s.originalClientY, l = rn(e, r), u = l.clientX, f = l.clientY, d = rn(n, r), p = d.clientX, g = d.clientY, h = o - u, v = i - f, m = o - p, S = i - g;\n  return {\n    clientX: a,\n    clientY: c,\n    deltaX: h,\n    deltaY: v,\n    distX: m,\n    distY: S\n  };\n}\nfunction mr(t) {\n  return Math.sqrt(Math.pow(t[0].clientX - t[1].clientX, 2) + Math.pow(t[0].clientY - t[1].clientY, 2));\n}\nfunction ff(t) {\n  for (var e = Math.min(t.length, 2), n = [], r = 0; r < e; ++r)\n    n.push(na(t[r]));\n  return n;\n}\nfunction na(t) {\n  return {\n    clientX: t.clientX,\n    clientY: t.clientY\n  };\n}\nfunction rn(t, e) {\n  e === void 0 && (e = t.length);\n  for (var n = {\n    clientX: 0,\n    clientY: 0,\n    originalClientX: 0,\n    originalClientY: 0\n  }, r = Math.min(t.length, e), s = 0; s < r; ++s) {\n    var o = t[s];\n    n.originalClientX += \"originalClientX\" in o ? o.originalClientX : o.clientX, n.originalClientY += \"originalClientY\" in o ? o.originalClientY : o.clientY, n.clientX += o.clientX, n.clientY += o.clientY;\n  }\n  return e ? {\n    clientX: n.clientX / e,\n    clientY: n.clientY / e,\n    originalClientX: n.originalClientX / e,\n    originalClientY: n.originalClientY / e\n  } : n;\n}\nvar xr = /* @__PURE__ */ function() {\n  function t(e) {\n    this.prevClients = [], this.startClients = [], this.movement = 0, this.length = 0, this.startClients = e, this.prevClients = e, this.length = e.length;\n  }\n  return t.prototype.getAngle = function(e) {\n    return e === void 0 && (e = this.prevClients), vr(e);\n  }, t.prototype.getRotation = function(e) {\n    return e === void 0 && (e = this.prevClients), vr(e) - vr(this.startClients);\n  }, t.prototype.getPosition = function(e, n) {\n    e === void 0 && (e = this.prevClients);\n    var r = Do(e || this.prevClients, this.prevClients, this.startClients), s = r.deltaX, o = r.deltaY;\n    return this.movement += Math.sqrt(s * s + o * o), this.prevClients = e, r;\n  }, t.prototype.getPositions = function(e) {\n    e === void 0 && (e = this.prevClients);\n    for (var n = this.prevClients, r = this.startClients, s = Math.min(this.length, n.length), o = [], i = 0; i < s; ++i)\n      o[i] = Do([e[i]], [n[i]], [r[i]]);\n    return o;\n  }, t.prototype.getMovement = function(e) {\n    var n = this.movement;\n    if (!e)\n      return n;\n    var r = rn(e, this.length), s = rn(this.prevClients, this.length), o = r.clientX - s.clientX, i = r.clientY - s.clientY;\n    return Math.sqrt(o * o + i * i) + n;\n  }, t.prototype.getDistance = function(e) {\n    return e === void 0 && (e = this.prevClients), mr(e);\n  }, t.prototype.getScale = function(e) {\n    return e === void 0 && (e = this.prevClients), mr(e) / mr(this.startClients);\n  }, t.prototype.move = function(e, n) {\n    this.startClients.forEach(function(r) {\n      r.clientX -= e, r.clientY -= n;\n    }), this.prevClients.forEach(function(r) {\n      r.clientX -= e, r.clientY -= n;\n    });\n  }, t;\n}(), bo = [\"textarea\", \"input\"], df = /* @__PURE__ */ function(t) {\n  af(e, t);\n  function e(n, r) {\n    r === void 0 && (r = {});\n    var s = t.call(this) || this;\n    s.options = {}, s.flag = !1, s.pinchFlag = !1, s.data = {}, s.isDrag = !1, s.isPinch = !1, s.clientStores = [], s.targets = [], s.prevTime = 0, s.doubleFlag = !1, s._useMouse = !1, s._useTouch = !1, s._useDrag = !1, s._dragFlag = !1, s._isTrusted = !1, s._isMouseEvent = !1, s._isSecondaryButton = !1, s._preventMouseEvent = !1, s._prevInputEvent = null, s._isDragAPI = !1, s._isIdle = !0, s._preventMouseEventId = 0, s._window = window, s.onDragStart = function(d, p) {\n      if (p === void 0 && (p = !0), !(!s.flag && d.cancelable === !1)) {\n        var g = d.type.indexOf(\"drag\") >= -1;\n        if (!(s.flag && g)) {\n          s._isDragAPI = !0;\n          var h = s.options, v = h.container, m = h.pinchOutside, S = h.preventWheelClick, x = h.preventRightClick, C = h.preventDefault, E = h.checkInput, D = h.dragFocusedInput, R = h.preventClickEventOnDragStart, y = h.preventClickEventOnDrag, M = h.preventClickEventByCondition, P = s._useTouch, _ = !s.flag;\n          if (s._isSecondaryButton = d.which === 3 || d.button === 2, S && (d.which === 2 || d.button === 1) || x && (d.which === 3 || d.button === 2))\n            return s.stop(), !1;\n          if (_) {\n            var O = s._window.document.activeElement, T = d.target;\n            if (T) {\n              var w = T.tagName.toLowerCase(), k = bo.indexOf(w) > -1, I = T.isContentEditable;\n              if (k || I) {\n                if (E || !D && O === T)\n                  return !1;\n                if (O && (O === T || I && O.isContentEditable && O.contains(T)))\n                  if (D)\n                    T.blur();\n                  else\n                    return !1;\n              } else if ((C || d.type === \"touchstart\") && O) {\n                var $ = O.tagName.toLowerCase();\n                (O.isContentEditable || bo.indexOf($) > -1) && O.blur();\n              }\n              (R || y || M) && Pt(s._window, \"click\", s._onClick, !0);\n            }\n            s.clientStores = [new xr(On(d))], s._isIdle = !1, s.flag = !0, s.isDrag = !1, s._isTrusted = p, s._dragFlag = !0, s._prevInputEvent = d, s.data = {}, s.doubleFlag = cn() - s.prevTime < 200, s._isMouseEvent = uf(d), !s._isMouseEvent && s._preventMouseEvent && s._allowMouseEvent();\n            var G = s._preventMouseEvent || s.emit(\"dragStart\", Ct(Ct({ data: s.data, datas: s.data, inputEvent: d, isMouseEvent: s._isMouseEvent, isSecondaryButton: s._isSecondaryButton, isTrusted: p, isDouble: s.doubleFlag }, s.getCurrentStore().getPosition()), { preventDefault: function() {\n              d.preventDefault();\n            }, preventDrag: function() {\n              s._dragFlag = !1;\n            } }));\n            G === !1 && s.stop(), s._isMouseEvent && s.flag && C && d.preventDefault();\n          }\n          if (!s.flag)\n            return !1;\n          var L = 0;\n          if (_ ? (s._attchDragEvent(), P && m && (L = setTimeout(function() {\n            Pt(v, \"touchstart\", s.onDragStart, {\n              passive: !1\n            });\n          }))) : P && m && Mt(v, \"touchstart\", s.onDragStart), s.flag && lf(d)) {\n            if (clearTimeout(L), _ && d.touches.length !== d.changedTouches.length)\n              return;\n            s.pinchFlag || s.onPinchStart(d);\n          }\n        }\n      }\n    }, s.onDrag = function(d, p) {\n      if (s.flag) {\n        var g = s.options.preventDefault;\n        !s._isMouseEvent && g && d.preventDefault(), s._prevInputEvent = d;\n        var h = On(d), v = s.moveClients(h, d, !1);\n        if (s._dragFlag) {\n          if (s.pinchFlag || v.deltaX || v.deltaY) {\n            var m = s._preventMouseEvent || s.emit(\"drag\", Ct(Ct({}, v), { isScroll: !!p, inputEvent: d }));\n            if (m === !1) {\n              s.stop();\n              return;\n            }\n          }\n          s.pinchFlag && s.onPinch(d, h);\n        }\n        s.getCurrentStore().getPosition(h, !0);\n      }\n    }, s.onDragEnd = function(d) {\n      if (s.flag) {\n        var p = s.options, g = p.pinchOutside, h = p.container, v = p.preventClickEventOnDrag, m = p.preventClickEventOnDragStart, S = p.preventClickEventByCondition, x = s.isDrag;\n        (v || m || S) && requestAnimationFrame(function() {\n          s._allowClickEvent();\n        }), !S && !m && v && !x && s._allowClickEvent(), s._useTouch && g && Mt(h, \"touchstart\", s.onDragStart), s.pinchFlag && s.onPinchEnd(d);\n        var C = d != null && d.touches ? On(d) : [], E = C.length;\n        E === 0 || !s.options.keepDragging ? s.flag = !1 : s._addStore(new xr(C));\n        var D = s._getPosition(), R = cn(), y = !x && s.doubleFlag;\n        s._prevInputEvent = null, s.prevTime = x || y ? 0 : R, s.flag || (s._dettachDragEvent(), s._preventMouseEvent || s.emit(\"dragEnd\", Ct({ data: s.data, datas: s.data, isDouble: y, isDrag: x, isClick: !x, isMouseEvent: s._isMouseEvent, isSecondaryButton: s._isSecondaryButton, inputEvent: d, isTrusted: s._isTrusted }, D)), s.clientStores = [], s._isMouseEvent || (s._preventMouseEvent = !0, clearTimeout(s._preventMouseEventId), s._preventMouseEventId = setTimeout(function() {\n          s._preventMouseEvent = !1;\n        }, 200)), s._isIdle = !0);\n      }\n    }, s.onBlur = function() {\n      s.onDragEnd();\n    }, s._allowClickEvent = function() {\n      Mt(s._window, \"click\", s._onClick, !0);\n    }, s._onClick = function(d) {\n      s._allowClickEvent(), s._allowMouseEvent();\n      var p = s.options.preventClickEventByCondition;\n      p != null && p(d) || (d.stopPropagation(), d.preventDefault());\n    }, s._onContextMenu = function(d) {\n      var p = s.options;\n      p.preventRightClick ? s.onDragEnd(d) : d.preventDefault();\n    }, s._passCallback = function() {\n    };\n    var o = [].concat(n), i = o[0];\n    s._window = Jo(i) ? i : ae(i), s.options = Ct({ checkInput: !1, container: i && !(\"document\" in i) ? ae(i) : i, preventRightClick: !0, preventWheelClick: !0, preventClickEventOnDragStart: !1, preventClickEventOnDrag: !1, preventClickEventByCondition: null, preventDefault: !0, checkWindowBlur: !1, keepDragging: !1, pinchThreshold: 0, events: [\"touch\", \"mouse\"] }, r);\n    var a = s.options, c = a.container, l = a.events, u = a.checkWindowBlur;\n    if (s._useDrag = l.indexOf(\"drag\") > -1, s._useTouch = l.indexOf(\"touch\") > -1, s._useMouse = l.indexOf(\"mouse\") > -1, s.targets = o, s._useDrag && o.forEach(function(d) {\n      Pt(d, \"dragstart\", s.onDragStart);\n    }), s._useMouse && (o.forEach(function(d) {\n      Pt(d, \"mousedown\", s.onDragStart), Pt(d, \"mousemove\", s._passCallback);\n    }), Pt(c, \"contextmenu\", s._onContextMenu)), u && Pt(ae(), \"blur\", s.onBlur), s._useTouch) {\n      var f = {\n        passive: !1\n      };\n      o.forEach(function(d) {\n        Pt(d, \"touchstart\", s.onDragStart, f), Pt(d, \"touchmove\", s._passCallback, f);\n      });\n    }\n    return s;\n  }\n  return e.prototype.stop = function() {\n    this.isDrag = !1, this.data = {}, this.clientStores = [], this.pinchFlag = !1, this.doubleFlag = !1, this.prevTime = 0, this.flag = !1, this._isIdle = !0, this._allowClickEvent(), this._dettachDragEvent(), this._isDragAPI = !1;\n  }, e.prototype.getMovement = function(n) {\n    return this.getCurrentStore().getMovement(n) + this.clientStores.slice(1).reduce(function(r, s) {\n      return r + s.movement;\n    }, 0);\n  }, e.prototype.isDragging = function() {\n    return this.isDrag;\n  }, e.prototype.isIdle = function() {\n    return this._isIdle;\n  }, e.prototype.isFlag = function() {\n    return this.flag;\n  }, e.prototype.isPinchFlag = function() {\n    return this.pinchFlag;\n  }, e.prototype.isDoubleFlag = function() {\n    return this.doubleFlag;\n  }, e.prototype.isPinching = function() {\n    return this.isPinch;\n  }, e.prototype.scrollBy = function(n, r, s, o) {\n    o === void 0 && (o = !0), this.flag && (this.clientStores[0].move(n, r), o && this.onDrag(s, !0));\n  }, e.prototype.move = function(n, r) {\n    var s = n[0], o = n[1], i = this.getCurrentStore(), a = i.prevClients;\n    return this.moveClients(a.map(function(c) {\n      var l = c.clientX, u = c.clientY;\n      return {\n        clientX: l + s,\n        clientY: u + o,\n        originalClientX: l,\n        originalClientY: u\n      };\n    }), r, !0);\n  }, e.prototype.triggerDragStart = function(n) {\n    this.onDragStart(n, !1);\n  }, e.prototype.setEventData = function(n) {\n    var r = this.data;\n    for (var s in n)\n      r[s] = n[s];\n    return this;\n  }, e.prototype.setEventDatas = function(n) {\n    return this.setEventData(n);\n  }, e.prototype.getCurrentEvent = function(n) {\n    return n === void 0 && (n = this._prevInputEvent), Ct(Ct({ data: this.data, datas: this.data }, this._getPosition()), { movement: this.getMovement(), isDrag: this.isDrag, isPinch: this.isPinch, isScroll: !1, inputEvent: n });\n  }, e.prototype.getEventData = function() {\n    return this.data;\n  }, e.prototype.getEventDatas = function() {\n    return this.data;\n  }, e.prototype.unset = function() {\n    var n = this, r = this.targets, s = this.options.container;\n    this.off(), Mt(this._window, \"blur\", this.onBlur), this._useDrag && r.forEach(function(o) {\n      Mt(o, \"dragstart\", n.onDragStart);\n    }), this._useMouse && (r.forEach(function(o) {\n      Mt(o, \"mousedown\", n.onDragStart);\n    }), Mt(s, \"contextmenu\", this._onContextMenu)), this._useTouch && (r.forEach(function(o) {\n      Mt(o, \"touchstart\", n.onDragStart);\n    }), Mt(s, \"touchstart\", this.onDragStart)), this._prevInputEvent = null, this._allowClickEvent(), this._dettachDragEvent();\n  }, e.prototype.onPinchStart = function(n) {\n    var r = this, s = this.options.pinchThreshold;\n    if (!(this.isDrag && this.getMovement() > s)) {\n      var o = new xr(On(n));\n      this.pinchFlag = !0, this._addStore(o);\n      var i = this.emit(\"pinchStart\", Ct(Ct({ data: this.data, datas: this.data, angle: o.getAngle(), touches: this.getCurrentStore().getPositions() }, o.getPosition()), { inputEvent: n, isTrusted: this._isTrusted, preventDefault: function() {\n        n.preventDefault();\n      }, preventDrag: function() {\n        r._dragFlag = !1;\n      } }));\n      i === !1 && (this.pinchFlag = !1);\n    }\n  }, e.prototype.onPinch = function(n, r) {\n    if (!(!this.flag || !this.pinchFlag || r.length < 2)) {\n      var s = this.getCurrentStore();\n      this.isPinch = !0, this.emit(\"pinch\", Ct(Ct({ data: this.data, datas: this.data, movement: this.getMovement(r), angle: s.getAngle(r), rotation: s.getRotation(r), touches: s.getPositions(r), scale: s.getScale(r), distance: s.getDistance(r) }, s.getPosition(r)), { inputEvent: n, isTrusted: this._isTrusted }));\n    }\n  }, e.prototype.onPinchEnd = function(n) {\n    if (this.pinchFlag) {\n      var r = this.isPinch;\n      this.isPinch = !1, this.pinchFlag = !1;\n      var s = this.getCurrentStore();\n      this.emit(\"pinchEnd\", Ct(Ct({ data: this.data, datas: this.data, isPinch: r, touches: s.getPositions() }, s.getPosition()), { inputEvent: n }));\n    }\n  }, e.prototype.getCurrentStore = function() {\n    return this.clientStores[0];\n  }, e.prototype.moveClients = function(n, r, s) {\n    var o = this._getPosition(n, s), i = this.isDrag;\n    (o.deltaX || o.deltaY) && (this.isDrag = !0);\n    var a = !1;\n    return !i && this.isDrag && (a = !0), Ct(Ct({ data: this.data, datas: this.data }, o), { movement: this.getMovement(n), isDrag: this.isDrag, isPinch: this.isPinch, isScroll: !1, isMouseEvent: this._isMouseEvent, isSecondaryButton: this._isSecondaryButton, inputEvent: r, isTrusted: this._isTrusted, isFirstDrag: a });\n  }, e.prototype._addStore = function(n) {\n    this.clientStores.splice(0, 0, n);\n  }, e.prototype._getPosition = function(n, r) {\n    var s = this.getCurrentStore(), o = s.getPosition(n, r), i = this.clientStores.slice(1).reduce(function(l, u) {\n      var f = u.getPosition();\n      return l.distX += f.distX, l.distY += f.distY, l;\n    }, o), a = i.distX, c = i.distY;\n    return Ct(Ct({}, o), { distX: a, distY: c });\n  }, e.prototype._attchDragEvent = function() {\n    var n = this._window, r = this.options.container, s = {\n      passive: !1\n    };\n    this._isDragAPI && (Pt(r, \"dragover\", this.onDrag, s), Pt(n, \"dragend\", this.onDragEnd)), this._useMouse && (Pt(r, \"mousemove\", this.onDrag), Pt(n, \"mouseup\", this.onDragEnd)), this._useTouch && (Pt(r, \"touchmove\", this.onDrag, s), Pt(n, \"touchend\", this.onDragEnd, s), Pt(n, \"touchcancel\", this.onDragEnd, s));\n  }, e.prototype._dettachDragEvent = function() {\n    var n = this._window, r = this.options.container;\n    this._isDragAPI && (Mt(r, \"dragover\", this.onDrag), Mt(n, \"dragend\", this.onDragEnd)), this._useMouse && (Mt(r, \"mousemove\", this.onDrag), Mt(n, \"mouseup\", this.onDragEnd)), this._useTouch && (Mt(r, \"touchstart\", this.onDragStart), Mt(r, \"touchmove\", this.onDrag), Mt(n, \"touchend\", this.onDragEnd), Mt(n, \"touchcancel\", this.onDragEnd));\n  }, e.prototype._allowMouseEvent = function() {\n    this._preventMouseEvent = !1, clearTimeout(this._preventMouseEventId);\n  }, e;\n}(Cs);\nfunction pf(t, e) {\n  const r = gt(e ? 4 : 3), s = `matrix${e ? \"3d\" : \"\"}(${r.join(\",\")})`;\n  return t === s || t === \"matrix(1,0,0,1,0,0)\";\n}\nconst ra = {\n  isPinch: !0,\n  name: \"beforeRenderable\",\n  props: [],\n  events: [\n    \"beforeRenderStart\",\n    \"beforeRender\",\n    \"beforeRenderEnd\",\n    \"beforeRenderGroupStart\",\n    \"beforeRenderGroup\",\n    \"beforeRenderGroupEnd\"\n  ],\n  dragRelation: \"weak\",\n  setTransform(t, e) {\n    const {\n      is3d: n,\n      targetMatrix: r,\n      inlineTransform: s\n    } = t.state, o = n ? `matrix3d(${r.join(\",\")})` : `matrix(${ei(r, !0)})`, i = !s || s === \"none\" ? o : s;\n    e.datas.startTransforms = pf(i, n) ? [] : ce(i);\n  },\n  resetStyle(t) {\n    const e = t.datas;\n    e.nextStyle = {}, e.nextTransforms = t.datas.startTransforms, e.nextTransformAppendedIndexes = [];\n  },\n  fillDragStartParams(t, e) {\n    return et(t, e, {\n      setTransform: (n) => {\n        e.datas.startTransforms = Rt(n) ? n : ce(n);\n      },\n      isPinch: !!e.isPinch\n    });\n  },\n  fillDragParams(t, e) {\n    return et(t, e, {\n      isPinch: !!e.isPinch\n    });\n  },\n  dragStart(t, e) {\n    this.setTransform(t, e), this.resetStyle(e), j(t, \"onBeforeRenderStart\", this.fillDragStartParams(t, e));\n  },\n  drag(t, e) {\n    e.datas.startTransforms || this.setTransform(t, e), this.resetStyle(e), j(t, \"onBeforeRender\", et(t, e, {\n      isPinch: !!e.isPinch\n    }));\n  },\n  dragEnd(t, e) {\n    e.datas.startTransforms || (this.setTransform(t, e), this.resetStyle(e)), j(t, \"onBeforeRenderEnd\", et(t, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag\n    }));\n  },\n  dragGroupStart(t, e) {\n    this.dragStart(t, e);\n    const n = Ht(t, \"beforeRenderable\", e), r = t.moveables, s = n.map((o, i) => {\n      const a = r[i];\n      return this.setTransform(a, o), this.resetStyle(o), this.fillDragStartParams(a, o);\n    });\n    j(t, \"onBeforeRenderGroupStart\", et(t, e, {\n      isPinch: !!e.isPinch,\n      targets: t.props.targets,\n      setTransform() {\n      },\n      events: s\n    }));\n  },\n  dragGroup(t, e) {\n    this.drag(t, e);\n    const n = Ht(t, \"beforeRenderable\", e), r = t.moveables, s = n.map((o, i) => {\n      const a = r[i];\n      return this.resetStyle(o), this.fillDragParams(a, o);\n    });\n    j(t, \"onBeforeRenderGroup\", et(t, e, {\n      isPinch: !!e.isPinch,\n      targets: t.props.targets,\n      events: s\n    }));\n  },\n  dragGroupEnd(t, e) {\n    this.dragEnd(t, e), j(t, \"onBeforeRenderGroupEnd\", et(t, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag,\n      targets: t.props.targets\n    }));\n  },\n  dragControlStart(t, e) {\n    return this.dragStart(t, e);\n  },\n  dragControl(t, e) {\n    return this.drag(t, e);\n  },\n  dragControlEnd(t, e) {\n    return this.dragEnd(t, e);\n  },\n  dragGroupControlStart(t, e) {\n    return this.dragGroupStart(t, e);\n  },\n  dragGroupControl(t, e) {\n    return this.dragGroup(t, e);\n  },\n  dragGroupControlEnd(t, e) {\n    return this.dragGroupEnd(t, e);\n  }\n}, sa = {\n  name: \"renderable\",\n  props: [],\n  events: [\n    \"renderStart\",\n    \"render\",\n    \"renderEnd\",\n    \"renderGroupStart\",\n    \"renderGroup\",\n    \"renderGroupEnd\"\n  ],\n  dragRelation: \"weak\",\n  dragStart(t, e) {\n    j(t, \"onRenderStart\", et(t, e, {\n      isPinch: !!e.isPinch\n    }));\n  },\n  drag(t, e) {\n    j(t, \"onRender\", this.fillDragParams(t, e));\n  },\n  dragAfter(t, e) {\n    return this.drag(t, e);\n  },\n  dragEnd(t, e) {\n    j(t, \"onRenderEnd\", this.fillDragEndParams(t, e));\n  },\n  dragGroupStart(t, e) {\n    j(t, \"onRenderGroupStart\", et(t, e, {\n      isPinch: !!e.isPinch,\n      targets: t.props.targets\n    }));\n  },\n  dragGroup(t, e) {\n    const n = Ht(t, \"beforeRenderable\", e), r = t.moveables, s = n.map((o, i) => {\n      const a = r[i];\n      return this.fillDragParams(a, o);\n    });\n    j(t, \"onRenderGroup\", et(t, e, {\n      isPinch: !!e.isPinch,\n      targets: t.props.targets,\n      transform: Dn(e),\n      transformObject: {},\n      ...It(bn(e)),\n      events: s\n    }));\n  },\n  dragGroupEnd(t, e) {\n    const n = Ht(t, \"beforeRenderable\", e), r = t.moveables, s = n.map((o, i) => {\n      const a = r[i];\n      return this.fillDragEndParams(a, o);\n    });\n    j(t, \"onRenderGroupEnd\", et(t, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag,\n      targets: t.props.targets,\n      events: s,\n      transformObject: {},\n      transform: Dn(e),\n      ...It(bn(e))\n    }));\n  },\n  dragControlStart(t, e) {\n    return this.dragStart(t, e);\n  },\n  dragControl(t, e) {\n    return this.drag(t, e);\n  },\n  dragControlAfter(t, e) {\n    return this.dragAfter(t, e);\n  },\n  dragControlEnd(t, e) {\n    return this.dragEnd(t, e);\n  },\n  dragGroupControlStart(t, e) {\n    return this.dragGroupStart(t, e);\n  },\n  dragGroupControl(t, e) {\n    return this.dragGroup(t, e);\n  },\n  dragGroupControlEnd(t, e) {\n    return this.dragGroupEnd(t, e);\n  },\n  fillDragParams(t, e) {\n    const n = {};\n    return $e(Gn(e) || []).forEach((r) => {\n      n[r.name] = r.functionValue;\n    }), et(t, e, {\n      isPinch: !!e.isPinch,\n      transformObject: n,\n      transform: Dn(e),\n      ...It(bn(e))\n    });\n  },\n  fillDragEndParams(t, e) {\n    const n = {};\n    return $e(Gn(e) || []).forEach((r) => {\n      n[r.name] = r.functionValue;\n    }), et(t, e, {\n      isPinch: !!e.isPinch,\n      isDrag: e.isDrag,\n      transformObject: n,\n      transform: Dn(e),\n      ...It(bn(e))\n    });\n  }\n};\nfunction sn(t, e, n, r, s, o, i) {\n  o.clientDistX = o.distX, o.clientDistY = o.distY;\n  const a = s === \"Start\", c = s === \"End\", l = s === \"After\", u = t.state.target, f = o.isRequest, d = r.indexOf(\"Control\") > -1;\n  if (!u || a && d && !f && t.areaElement === o.inputEvent.target)\n    return !1;\n  const p = [...e];\n  if (f) {\n    const P = o.requestAble;\n    p.some((_) => _.name === P) || p.push(...t.props.ables.filter((_) => _.name === P));\n  }\n  if (!p.length || p.every((P) => P.dragRelation))\n    return !1;\n  const g = o.inputEvent;\n  let h;\n  c && g && (h = document.elementFromPoint(o.clientX, o.clientY) || g.target);\n  let v = !1;\n  const m = () => {\n    var P;\n    v = !0, (P = o.stop) == null || P.call(o);\n  }, S = a && (!t.targetGesto || !t.controlGesto || !t.targetGesto.isFlag() || !t.controlGesto.isFlag());\n  S && t.updateRect(s, !0, !1);\n  const x = o.datas, C = d ? \"controlGesto\" : \"targetGesto\", E = t[C], D = (P, _, O) => {\n    if (!(_ in P) || E !== t[C])\n      return !1;\n    const T = P.name, w = x[T] || (x[T] = {});\n    if (a && (w.isEventStart = !O || !P[O] || P[O](t, o)), !w.isEventStart)\n      return !1;\n    const k = P[_](t, {\n      ...o,\n      stop: m,\n      datas: w,\n      originalDatas: x,\n      inputTarget: h\n    });\n    return t._emitter.off(), a && k === !1 && (w.isEventStart = !1), k;\n  };\n  S && p.forEach((P) => {\n    P.unset && P.unset(t);\n  }), D(ra, `drag${r}${s}`);\n  let R = 0, y = 0;\n  n.forEach((P) => {\n    if (v)\n      return !1;\n    const _ = `${P}${r}${s}`, O = `${P}${r}Condition`;\n    s === \"\" && !f && xu(t.state, o);\n    let T = p.filter((I) => I[_]);\n    T = T.filter((I, $) => I.name && T.indexOf(I) === $);\n    const k = T.filter((I) => D(I, _, O)).length;\n    v && ++R, k && ++y, !v && a && T.length && !k && (R += T.filter((I) => {\n      const $ = I.name;\n      return x[$].isEventStart ? I.dragRelation !== \"strong\" : !1;\n    }).length ? 1 : 0);\n  }), (!l || y) && D(sa, `drag${r}${s}`);\n  const M = E !== t[C] || R === n.length;\n  return (c || v || M) && (t.state.gestos = {}, t.moveables && t.moveables.forEach((P) => {\n    P.state.gestos = {};\n  }), p.forEach((P) => {\n    P.unset && P.unset(t);\n  })), a && !M && !f && y && t.props.preventDefault && (o == null || o.preventDefault()), t.isUnmounted || M ? !1 : ((!a && y && !i || c) && (t.props.flushSync || Bi)(() => {\n    t.updateRect(c ? s : \"\", !0, !1), t.forceUpdate();\n  }), !a && !c && !l && y && !i && sn(t, e, n, r, s + \"After\", o), !0);\n}\nfunction Rs(t, e) {\n  return (n, r = n.inputEvent.target) => {\n    var a;\n    const s = r, o = t.areaElement, i = t._dragTarget;\n    return !i || !e && ((a = t.controlGesto) != null && a.isFlag()) ? !1 : s === i || i.contains(s) || s === o || !t.isMoveableElement(s) && !t.controlBox.contains(s) || bt(s, \"moveable-area\") || bt(s, \"moveable-padding\") || bt(s, \"moveable-edgeDraggable\");\n  };\n}\nfunction oa(t, e, n) {\n  const r = t.controlBox, s = [], o = t.props, i = o.dragArea, a = t.state.target, c = o.dragTarget;\n  s.push(r), (!i || c) && s.push(e), !i && c && a && e !== a && o.dragTargetSelf && s.push(a);\n  const l = Rs(t);\n  return aa(t, s, \"targetAbles\", n, {\n    dragStart: l,\n    pinchStart: l\n  });\n}\nfunction ia(t, e) {\n  const n = t.controlBox, r = [];\n  r.push(n);\n  const s = Rs(t, !0), o = (i, a = i.inputEvent.target) => a === n ? !0 : !s(i, a);\n  return aa(t, r, \"controlAbles\", e, {\n    dragStart: o,\n    pinchStart: o\n  });\n}\nfunction aa(t, e, n, r, s = {}) {\n  const o = n === \"targetAbles\", {\n    pinchOutside: i,\n    pinchThreshold: a,\n    preventClickEventOnDrag: c,\n    preventClickDefault: l,\n    checkInput: u,\n    dragFocusedInput: f,\n    preventDefault: d = !0,\n    preventRightClick: p = !0,\n    preventWheelClick: g = !0,\n    dragContainer: h\n  } = t.props, v = Zt(h, !0), m = {\n    preventDefault: d,\n    preventRightClick: p,\n    preventWheelClick: g,\n    container: v || ae(t.getControlBoxElement()),\n    pinchThreshold: a,\n    pinchOutside: i,\n    preventClickEventOnDrag: o ? c : !1,\n    preventClickEventOnDragStart: o ? l : !1,\n    preventClickEventByCondition: o ? null : (C) => t.controlBox.contains(C.target),\n    checkInput: o ? u : !1,\n    dragFocusedInput: f\n  }, S = new df(e, m), x = r === \"Control\";\n  return [\"drag\", \"pinch\"].forEach((C) => {\n    [\"Start\", \"\", \"End\"].forEach((E) => {\n      S.on(`${C}${E}`, (D) => {\n        var O;\n        const R = D.eventType, y = C === \"drag\" && D.isPinch;\n        if (s[R] && !s[R](D)) {\n          D.stop();\n          return;\n        }\n        if (y)\n          return;\n        const M = C === \"drag\" ? [C] : [\"drag\", C], P = [...t[n]];\n        sn(t, P, M, r, E, D) ? (t.props.stopPropagation || E === \"Start\" && x) && ((O = D == null ? void 0 : D.inputEvent) == null || O.stopPropagation()) : D.stop();\n      });\n    });\n  }), S;\n}\nclass gf {\n  constructor(e, n, r) {\n    X(this, \"ables\", []);\n    X(this, \"_onEvent\", (e) => {\n      const n = this.eventName, r = this.moveable;\n      r.state.disableNativeEvent || this.ables.forEach((s) => {\n        s[n](r, {\n          inputEvent: e\n        });\n      });\n    });\n    this.target = e, this.moveable = n, this.eventName = r, e.addEventListener(r.toLowerCase(), this._onEvent);\n  }\n  setAbles(e) {\n    this.ables = e;\n  }\n  destroy() {\n    this.target.removeEventListener(\n      this.eventName.toLowerCase(),\n      this._onEvent\n    ), this.target = null, this.moveable = null;\n  }\n}\nfunction hf(t) {\n  for (var e = 5381, n = t.length; n; )\n    e = e * 33 ^ t.charCodeAt(--n);\n  return e >>> 0;\n}\nvar vf = hf;\nfunction mf(t) {\n  return vf(t).toString(36);\n}\nfunction xf(t) {\n  if (t && t.getRootNode) {\n    var e = t.getRootNode();\n    if (e.nodeType === 11)\n      return e;\n  }\n}\nfunction Sf(t, e, n) {\n  return n.original ? e : e.replace(/([^};{\\s}][^};{]*|^\\s*){/mg, function(r, s) {\n    var o = s.trim();\n    return (o ? xe(o) : [\"\"]).map(function(i) {\n      var a = i.trim();\n      return a.indexOf(\"@\") === 0 ? a : a.indexOf(\":global\") > -1 ? a.replace(/\\:global/g, \"\") : a.indexOf(\":host\") > -1 ? \"\".concat(a.replace(/\\:host/g, \".\".concat(t))) : a ? \".\".concat(t, \" \").concat(a) : \".\".concat(t);\n    }).join(\", \") + \" {\";\n  });\n}\nfunction Ef(t, e, n, r, s) {\n  var o = ts(r), i = o.createElement(\"style\");\n  return i.setAttribute(\"type\", \"text/css\"), i.setAttribute(\"data-styled-id\", t), i.setAttribute(\"data-styled-count\", \"1\"), n.nonce && i.setAttribute(\"nonce\", n.nonce), i.innerHTML = Sf(t, e, n), (s || o.head || o.body).appendChild(i), i;\n}\nfunction Cf(t) {\n  var e = \"rCS\" + mf(t);\n  return {\n    className: e,\n    inject: function(n, r) {\n      r === void 0 && (r = {});\n      var s = xf(n), o = (s || n.ownerDocument || document).querySelector('style[data-styled-id=\"'.concat(e, '\"]'));\n      if (!o)\n        o = Ef(e, t, r, n, s);\n      else {\n        var i = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n        o.setAttribute(\"data-styled-count\", \"\".concat(i + 1));\n      }\n      return {\n        destroy: function() {\n          var a, c = parseFloat(o.getAttribute(\"data-styled-count\")) || 0;\n          c <= 1 ? (o.remove ? o.remove() : (a = o.parentNode) === null || a === void 0 || a.removeChild(o), o = null) : o.setAttribute(\"data-styled-count\", \"\".concat(c - 1));\n        }\n      };\n    }\n  };\n}\nvar Wr = function() {\n  return Wr = Object.assign || function(e) {\n    for (var n, r = 1, s = arguments.length; r < s; r++) {\n      n = arguments[r];\n      for (var o in n) Object.prototype.hasOwnProperty.call(n, o) && (e[o] = n[o]);\n    }\n    return e;\n  }, Wr.apply(this, arguments);\n};\nfunction Df(t, e) {\n  var n = {};\n  for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && e.indexOf(r) < 0 && (n[r] = t[r]);\n  if (t != null && typeof Object.getOwnPropertySymbols == \"function\") for (var s = 0, r = Object.getOwnPropertySymbols(t); s < r.length; s++)\n    e.indexOf(r[s]) < 0 && Object.prototype.propertyIsEnumerable.call(t, r[s]) && (n[r[s]] = t[r[s]]);\n  return n;\n}\nfunction ca(t, e) {\n  var n = Cf(e), r = n.className;\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function(s, o) {\n    var i = s.className, a = i === void 0 ? \"\" : i;\n    s.cspNonce;\n    var c = Df(s, [\"className\", \"cspNonce\"]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(o, function() {\n      return l.current;\n    }, []), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n      var u = n.inject(l.current, {\n        nonce: s.cspNonce\n      });\n      return function() {\n        u.destroy();\n      };\n    }, []), (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(t, Wr({\n      ref: l,\n      \"data-styled-id\": r,\n      className: \"\".concat(a, \" \").concat(r)\n    }, c));\n  });\n}\nfunction bf(t, e, n = e, r) {\n  var I;\n  const {\n    matrixes: s,\n    is3d: o,\n    targetMatrix: i,\n    transformOrigin: a,\n    targetOrigin: c,\n    offsetContainer: l,\n    hasFixed: u,\n    zoom: f\n  } = ci(t, e), {\n    matrixes: d,\n    is3d: p,\n    offsetContainer: g,\n    zoom: h\n  } = tl(l, n), v = r, m = 4, S = t.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in t;\n  let x = i, C = gt(m), E = gt(m), D = gt(m), R = gt(m);\n  const y = s.length, M = d.map(($) => ({\n    ...$,\n    matrix: $.matrix ? [...$.matrix] : void 0\n  })).reverse();\n  s.reverse(), !o && v && (x = Ut(x, 3, 4), Br(s)), !p && v && Br(M), M.forEach(($) => {\n    E = dt(E, $.matrix, m);\n  });\n  const P = n || fe(t), _ = ((I = M[0]) == null ? void 0 : I.target) || fn(P, P, !0).offsetParent, O = M.slice(1).reduce(($, G) => dt($, G.matrix, m), gt(m));\n  s.forEach(($, G) => {\n    if (y - 2 === G && (D = C.slice()), y - 1 === G && (R = C.slice()), !$.matrix) {\n      const L = s[G + 1], z = gu(\n        $,\n        L,\n        _,\n        m,\n        dt(O, C, m)\n      );\n      $.matrix = Ce(z, m);\n    }\n    C = dt(C, $.matrix, m);\n  });\n  const T = !S && o;\n  x || (x = gt(T ? 4 : 3));\n  const w = Jn(\n    S && x.length === 16 ? Ut(x, 4, 3) : x,\n    T\n  ), k = E;\n  return E = Qo(E, m, m), {\n    hasZoom: f !== 1 || h !== 1,\n    hasFixed: u,\n    matrixes: s,\n    rootMatrix: E,\n    originalRootMatrix: k,\n    beforeMatrix: D,\n    offsetMatrix: R,\n    allMatrix: C,\n    targetMatrix: x,\n    targetTransform: w,\n    inlineTransform: t.style.transform,\n    transformOrigin: a,\n    targetOrigin: c,\n    is3d: v,\n    offsetContainer: l,\n    offsetRootContainer: g\n  };\n}\nfunction la(t, e, n = e, r) {\n  let s = 0, o = 0, i = 0, a = {};\n  const c = ki(t);\n  if (t && (s = c.offsetWidth, o = c.offsetHeight), t) {\n    const u = bf(\n      t,\n      e,\n      n,\n      r\n      // prevMatrix, prevRootMatrix, prevN,\n    ), f = ke(\n      u.allMatrix,\n      u.transformOrigin,\n      s,\n      o\n    );\n    a = {\n      ...u,\n      ...f\n    };\n    const d = ke(\n      u.allMatrix,\n      [50, 50],\n      100,\n      100\n    );\n    i = $i([d.pos1, d.pos2], d.direction);\n  }\n  const l = 4;\n  return {\n    hasZoom: !1,\n    width: s,\n    height: o,\n    rotation: i,\n    ...c,\n    originalRootMatrix: gt(l),\n    rootMatrix: gt(l),\n    beforeMatrix: gt(l),\n    offsetMatrix: gt(l),\n    allMatrix: gt(l),\n    targetMatrix: gt(l),\n    targetTransform: \"\",\n    inlineTransform: \"\",\n    transformOrigin: [0, 0],\n    targetOrigin: [0, 0],\n    is3d: !!r,\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    origin: [0, 0],\n    pos1: [0, 0],\n    pos2: [0, 0],\n    pos3: [0, 0],\n    pos4: [0, 0],\n    direction: 1,\n    hasFixed: !1,\n    offsetContainer: null,\n    offsetRootContainer: null,\n    matrixes: [],\n    ...a\n  };\n}\nfunction If(t, e, n = e) {\n  return la(t, e, n, !0);\n}\nfunction Yr(t, e, n, r, s, o = []) {\n  let i = 1, a = [0, 0], c = Rn(), l = Rn(), u = Rn(), f = Rn(), d = [0, 0];\n  const p = {}, g = la(\n    e,\n    n,\n    s,\n    !0\n  );\n  if (e) {\n    const h = Gt(e);\n    o.forEach((x) => {\n      p[x] = h(x);\n    });\n    const v = g.is3d ? 4 : 3, m = ke(\n      g.offsetMatrix,\n      at(g.transformOrigin, ti(g.targetMatrix, v)),\n      g.width,\n      g.height\n    );\n    i = m.direction, a = at(\n      m.origin,\n      [m.left - g.left, m.top - g.top]\n    ), f = nn(g.offsetRootContainer);\n    const S = fn(r, r, !0).offsetParent || g.offsetRootContainer;\n    if (g.hasZoom) {\n      const x = ke(\n        dt(g.originalRootMatrix, g.allMatrix),\n        g.transformOrigin,\n        g.width,\n        g.height\n      ), C = ke(\n        g.originalRootMatrix,\n        Ln(Gt(S)(\"transformOrigin\")).map((E) => parseFloat(E)),\n        S.offsetWidth,\n        S.offsetHeight\n      );\n      if (c = pr(x, f), u = pr(\n        C,\n        f,\n        S,\n        !0\n      ), t) {\n        const E = x.left, D = x.top;\n        l = pr({\n          left: E,\n          top: D,\n          bottom: D,\n          right: D\n        }, f);\n      }\n    } else {\n      c = nn(e), u = Qc(S), t && (l = nn(t));\n      const {\n        left: x,\n        top: C,\n        clientLeft: E,\n        clientTop: D\n      } = u, R = [\n        c.left - x,\n        c.top - C\n      ];\n      d = K(\n        We(g.rootMatrix, R, 4),\n        [E + g.left, D + g.top]\n      );\n    }\n  }\n  return {\n    targetClientRect: c,\n    containerClientRect: u,\n    moveableClientRect: l,\n    rootContainerClientRect: f,\n    beforeDirection: i,\n    beforeOrigin: a,\n    originalBeforeOrigin: a,\n    target: e,\n    style: p,\n    offsetDelta: d,\n    ...g\n  };\n}\nfunction yo(t) {\n  let {\n    pos1: e,\n    pos2: n,\n    pos3: r,\n    pos4: s\n  } = t;\n  if (!e || !n || !r || !s)\n    return null;\n  const o = be([e, n, r, s]), i = [o.minX, o.minY], a = K(t.origin, i);\n  return e = K(e, i), n = K(n, i), r = K(r, i), s = K(s, i), {\n    ...t,\n    left: t.left,\n    top: t.top,\n    posDelta: i,\n    pos1: e,\n    pos2: n,\n    pos3: r,\n    pos4: s,\n    origin: a,\n    beforeOrigin: a,\n    // originalBeforeOrigin: origin,\n    isPersisted: !0\n  };\n}\nclass ye extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n  constructor() {\n    super(...arguments);\n    X(this, \"state\", {\n      container: null,\n      gestos: {},\n      renderLines: [\n        [\n          [0, 0],\n          [0, 0]\n        ],\n        [\n          [0, 0],\n          [0, 0]\n        ],\n        [\n          [0, 0],\n          [0, 0]\n        ],\n        [\n          [0, 0],\n          [0, 0]\n        ]\n      ],\n      renderPoses: [\n        [0, 0],\n        [0, 0],\n        [0, 0],\n        [0, 0]\n      ],\n      disableNativeEvent: !1,\n      posDelta: [0, 0],\n      ...Yr(null)\n    });\n    X(this, \"renderState\", {});\n    X(this, \"enabledAbles\", []);\n    X(this, \"targetAbles\", []);\n    X(this, \"controlAbles\", []);\n    X(this, \"controlBox\");\n    X(this, \"areaElement\");\n    X(this, \"targetGesto\");\n    X(this, \"controlGesto\");\n    X(this, \"rotation\", 0);\n    X(this, \"scale\", [1, 1]);\n    X(this, \"isMoveableMounted\", !1);\n    X(this, \"isUnmounted\", !1);\n    X(this, \"events\", {\n      mouseEnter: null,\n      mouseLeave: null\n    });\n    X(this, \"_emitter\", new Cs());\n    X(this, \"_prevOriginalDragTarget\", null);\n    X(this, \"_originalDragTarget\", null);\n    X(this, \"_prevDragTarget\", null);\n    X(this, \"_dragTarget\", null);\n    X(this, \"_prevPropTarget\", null);\n    X(this, \"_propTarget\", null);\n    X(this, \"_prevDragArea\", !1);\n    X(this, \"_isPropTargetChanged\", !1);\n    X(this, \"_hasFirstTarget\", !1);\n    X(this, \"_reiszeObserver\", null);\n    X(this, \"_observerId\", 0);\n    X(this, \"_mutationObserver\", null);\n    X(this, \"_rootContainer\", null);\n    X(this, \"_viewContainer\", null);\n    X(this, \"_viewClassNames\", []);\n    X(this, \"_store\", {});\n    X(this, \"checkUpdateRect\", () => {\n      if (this.isDragging())\n        return;\n      const n = this.props.parentMoveable;\n      if (n) {\n        n.checkUpdateRect();\n        return;\n      }\n      Ec(this._observerId), this._observerId = Ho(() => {\n        this.isDragging() || this.updateRect();\n      });\n    });\n    X(this, \"_onPreventClick\", (n) => {\n      n.stopPropagation(), n.preventDefault();\n    });\n  }\n  render() {\n    const n = this.props, r = this.getState(), {\n      parentPosition: s,\n      className: o,\n      target: i,\n      zoom: a,\n      cspNonce: c,\n      translateZ: l,\n      cssStyled: u,\n      groupable: f,\n      linePadding: d,\n      controlPadding: p\n    } = n;\n    this._checkUpdateRootContainer(), this.checkUpdate(), this.updateRenderPoses();\n    const [g, h] = s || [0, 0], {\n      left: v,\n      top: m,\n      target: S,\n      direction: x,\n      hasFixed: C,\n      offsetDelta: E\n    } = r, D = n.targets, R = this.isDragging(), y = {};\n    this.getEnabledAbles().forEach((w) => {\n      y[`data-able-${w.name.toLowerCase()}`] = !0;\n    });\n    const M = this._getAbleClassName(), P = D && D.length && (S || f) || i || !this._hasFirstTarget && this.state.isPersisted, _ = this.controlBox || this.props.firstRenderState || this.props.persistData, O = [v - g, m - h];\n    !f && n.useAccuratePosition && (O[0] += E[0], O[1] += E[1]);\n    const T = {\n      position: C ? \"fixed\" : \"absolute\",\n      display: P ? \"block\" : \"none\",\n      visibility: _ ? \"visible\" : \"hidden\",\n      transform: `translate3d(${O[0]}px, ${O[1]}px, ${l})`,\n      \"--zoom\": a,\n      \"--zoompx\": `${a}px`\n    };\n    return d && (T[\"--moveable-line-padding\"] = d), p && (T[\"--moveable-control-padding\"] = p), /* @__PURE__ */ it.jsxs(\n      u,\n      {\n        cspNonce: c,\n        ref: Se(this, \"controlBox\"),\n        className: `${U(\"control-box\", x === -1 ? \"reverse\" : \"\", R ? \"dragging\" : \"\")} ${M} ${o}`,\n        ...y,\n        onClick: this._onPreventClick,\n        style: T,\n        children: [\n          this.renderAbles(),\n          this._renderLines()\n        ]\n      }\n    );\n  }\n  componentDidMount() {\n    this.isMoveableMounted = !0, this.isUnmounted = !1;\n    const n = this.props, { parentMoveable: r, container: s } = n;\n    this._checkUpdateRootContainer(), this._checkUpdateViewContainer(), this._updateTargets(), this._updateNativeEvents(), this._updateEvents(), this.updateCheckInput(), this._updateObserver(this.props), !s && !r && !this.state.isPersisted && (this.updateRect(\"\", !1, !1), this.forceUpdate());\n  }\n  componentDidUpdate(n) {\n    this._checkUpdateRootContainer(), this._checkUpdateViewContainer(), this._updateNativeEvents(), this._updateTargets(), this._updateEvents(), this.updateCheckInput(), this._updateObserver(n);\n  }\n  componentWillUnmount() {\n    var s, o;\n    this.isMoveableMounted = !1, this.isUnmounted = !0, this._emitter.off(), (s = this._reiszeObserver) == null || s.disconnect(), (o = this._mutationObserver) == null || o.disconnect(), this._viewContainer && this._changeAbleViewClassNames([]), ze(this, !1), ze(this, !0);\n    const r = this.events;\n    for (const i in r) {\n      const a = r[i];\n      a && a.destroy();\n    }\n  }\n  getTargets() {\n    const n = this.props.target;\n    return n ? [n] : [];\n  }\n  /**\n   * Get the able used in MoveableManager.\n   * @method Moveable#getAble\n   * @param - able name\n   */\n  getAble(n) {\n    const r = this.props.ables || [];\n    return kt(r, (s) => s.name === n);\n  }\n  getContainer() {\n    const { parentMoveable: n, wrapperMoveable: r, container: s } = this.props;\n    return s || r && r.getContainer() || n && n.getContainer() || this.controlBox.parentElement;\n  }\n  /**\n   * Returns the element of the control box.\n   * @method Moveable#getControlBoxElement\n   */\n  getControlBoxElement() {\n    return this.controlBox;\n  }\n  /**\n   * Target element to be dragged in moveable\n   * @method Moveable#getDragElement\n   */\n  getDragElement() {\n    return this._dragTarget;\n  }\n  /**\n   * Check if the target is an element included in the moveable.\n   * @method Moveable#isMoveableElement\n   * @param - the target\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"click\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *         moveable.target = e.target;\n   *     }\n   * });\n   */\n  isMoveableElement(n) {\n    var r;\n    return n && (((r = n.getAttribute) == null ? void 0 : r.call(n, \"class\")) || \"\").indexOf(Hr) > -1;\n  }\n  /**\n   * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n   * @method Moveable#dragStart\n   * @param - external `MouseEvent`or `TouchEvent`\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (!moveable.isMoveableElement(e.target)) {\n   *          moveable.dragStart(e);\n   *     }\n   * });\n   */\n  dragStart(n, r = n.target) {\n    const s = this.targetGesto, o = this.controlGesto;\n    return s && Rs(this)({ inputEvent: n }, r) ? s.isFlag() || s.triggerDragStart(n) : o && this.isMoveableElement(r) && (o.isFlag() || o.triggerDragStart(n)), this;\n  }\n  /**\n   * Hit test an element or rect on a moveable target.\n   * (100% = 100)\n   * @method Moveable#hitTest\n   * @param - element or rect to test\n   * @return - Get hit test rate (rate > 0 is hitted)\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (moveable.hitTest(e.target) > 0) {\n   *          console.log(\"hiited\");\n   *     }\n   * });\n   */\n  hitTest(n) {\n    const { target: r, pos1: s, pos2: o, pos3: i, pos4: a, targetClientRect: c } = this.state;\n    if (!r)\n      return 0;\n    let l;\n    if (ns(n)) {\n      const m = n.getBoundingClientRect();\n      l = {\n        left: m.left,\n        top: m.top,\n        width: m.width,\n        height: m.height\n      };\n    } else\n      l = { width: 0, height: 0, ...n };\n    const {\n      left: u,\n      top: f,\n      width: d,\n      height: p\n    } = l, g = mo([s, o, a, i], c), h = qu(g, [\n      [u, f],\n      [u + d, f],\n      [u + d, f + p],\n      [u, f + p]\n    ]), v = Qi(g);\n    return !h || !v ? 0 : Math.min(100, h / v * 100);\n  }\n  /**\n   * Whether the coordinates are inside Moveable\n   * @method Moveable#isInside\n   * @param - x coordinate\n   * @param - y coordinate\n   * @return - True if the coordinate is in moveable or false\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * document.body.addEventListener(\"mousedown\", e => {\n   *     if (moveable.isInside(e.clientX, e.clientY)) {\n   *          console.log(\"inside\");\n   *     }\n   * });\n   */\n  isInside(n, r) {\n    const { target: s, pos1: o, pos2: i, pos3: a, pos4: c, targetClientRect: l } = this.state;\n    return s ? Fr(\n      [n, r],\n      mo([o, i, c, a], l)\n    ) : !1;\n  }\n  /**\n   * If the width, height, left, and top of all elements change, update the shape of the moveable.\n   * @method Moveable#updateRect\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * window.addEventListener(\"resize\", e => {\n   *     moveable.updateRect();\n   * });\n   */\n  updateRect(n, r, s = !0) {\n    const o = this.props, i = !o.parentPosition && !o.wrapperMoveable;\n    i && Le(!0);\n    const a = o.parentMoveable, l = this.state.target || o.target, u = this.getContainer(), f = a ? a._rootContainer : this._rootContainer, d = Yr(\n      this.controlBox,\n      l,\n      u,\n      u,\n      f || u,\n      this._getRequestStyles()\n    );\n    if (!l && this._hasFirstTarget && o.persistData) {\n      const p = yo(o.persistData);\n      for (const g in p)\n        d[g] = p[g];\n    }\n    i && Le(), this.updateState(d, a ? !1 : s);\n  }\n  /**\n   * Check if the moveable state is being dragged.\n   * @method Moveable#isDragging\n   * @param - If you want to check if able is dragging, specify ableName.\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // false\n   * console.log(moveable.isDragging());\n   *\n   * moveable.on(\"drag\", () => {\n   *   // true\n   *   console.log(moveable.isDragging());\n   * });\n   */\n  isDragging(n) {\n    var o, i;\n    const r = this.targetGesto, s = this.controlGesto;\n    return r != null && r.isFlag() ? n ? !!((o = r.getEventData()[n]) != null && o.isEventStart) : !0 : s != null && s.isFlag() ? n ? !!((i = s.getEventData()[n]) != null && i.isEventStart) : !0 : !1;\n  }\n  /**\n   * If the width, height, left, and top of the only target change, update the shape of the moveable.\n   * Use `.updateRect()` method\n   * @method Moveable#updateTarget\n   * @deprecated\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.updateTarget();\n   */\n  updateTarget(n) {\n    this.updateRect(n, !0);\n  }\n  /**\n   * You can get the vertex information, position and offset size information of the target based on the container.\n   * @method Moveable#getRect\n   * @return - The Rect Info\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * const rectInfo = moveable.getRect();\n   */\n  getRect() {\n    const n = this.state, r = jt(this.state), [s, o, i, a] = r, c = Yt(r), { width: l, height: u } = n, { width: f, height: d, left: p, top: g } = c, h = [n.left, n.top], v = at(h, n.origin), m = at(h, n.beforeOrigin), S = n.transformOrigin;\n    return {\n      width: f,\n      height: d,\n      left: p,\n      top: g,\n      pos1: s,\n      pos2: o,\n      pos3: i,\n      pos4: a,\n      offsetWidth: l,\n      offsetHeight: u,\n      beforeOrigin: m,\n      origin: v,\n      transformOrigin: S,\n      rotation: this.getRotation()\n    };\n  }\n  /**\n   * Get a manager that manages the moveable's state and props.\n   * @method Moveable#getManager\n   * @return - The Rect Info\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * const manager = moveable.getManager(); // real moveable class instance\n   */\n  getManager() {\n    return this;\n  }\n  /**\n   * You can stop the dragging currently in progress through a method from outside.\n   * @method Moveable#stopDrag\n   * @return - The Rect Info\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.stopDrag();\n   */\n  stopDrag(n) {\n    if (!n || n === \"target\") {\n      const r = this.targetGesto;\n      (r == null ? void 0 : r.isIdle()) === !1 && zr(this, !1), r == null || r.stop();\n    }\n    if (!n || n === \"control\") {\n      const r = this.controlGesto;\n      (r == null ? void 0 : r.isIdle()) === !1 && zr(this, !0), r == null || r.stop();\n    }\n  }\n  getRotation() {\n    const { pos1: n, pos2: r, direction: s } = this.state;\n    return Cu(n, r, s);\n  }\n  /**\n   * Request able through a method rather than an event.\n   * At the moment of execution, requestStart is executed,\n   * and then request and requestEnd can be executed through Requester.\n   * @method Moveable#request\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n   * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}\n   * @param - ableName\n   * @param - request to be able params.\n   * @param - If isInstant is true, request and requestEnd are executed immediately.\n   * @return - Able Requester. If there is no request in able, nothing will work.\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * // Instantly Request (requestStart - request - requestEnd)\n   * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n   *\n   * // Start move\n   * const requester = moveable.request(\"draggable\");\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.request({ deltaX: 10, deltaY: 10 });\n   * requester.requestEnd();\n   */\n  request(n, r = {}, s) {\n    const o = this, i = o.props, a = i.parentMoveable || i.wrapperMoveable || o, c = a.props.ables, l = i.groupable, u = kt(c, (m) => m.name === n);\n    if (this.isDragging() || !u || !u.request)\n      return {\n        request() {\n          return this;\n        },\n        requestEnd() {\n          return this;\n        }\n      };\n    const f = u.request(o), d = s || r.isInstant, p = f.isControl ? \"controlAbles\" : \"targetAbles\", g = `${l ? \"Group\" : \"\"}${f.isControl ? \"Control\" : \"\"}`, h = [...a[p]], v = {\n      request(m) {\n        return sn(\n          o,\n          h,\n          [\"drag\"],\n          g,\n          \"\",\n          {\n            ...f.request(m),\n            requestAble: n,\n            isRequest: !0\n          },\n          d\n        ), v;\n      },\n      requestEnd() {\n        return sn(\n          o,\n          h,\n          [\"drag\"],\n          g,\n          \"End\",\n          {\n            ...f.requestEnd(),\n            requestAble: n,\n            isRequest: !0\n          },\n          d\n        ), v;\n      }\n    };\n    return sn(\n      o,\n      h,\n      [\"drag\"],\n      g,\n      \"Start\",\n      {\n        ...f.requestStart(r),\n        requestAble: n,\n        isRequest: !0\n      },\n      d\n    ), d ? v.request(r).requestEnd() : v;\n  }\n  /**\n   * moveable is the top level that manages targets\n   * `Single`: MoveableManager instance\n   * `Group`: MoveableGroup instance\n   * `IndividualGroup`: MoveableIndividaulGroup instance\n   * Returns leaf target MoveableManagers.\n   */\n  getMoveables() {\n    return [this];\n  }\n  /**\n   * Remove the Moveable object and the events.\n   * @method Moveable#destroy\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body);\n   *\n   * moveable.destroy();\n   */\n  destroy() {\n    this.componentWillUnmount();\n  }\n  updateRenderPoses() {\n    const n = this.getState(), r = this.props, s = r.padding, {\n      originalBeforeOrigin: o,\n      transformOrigin: i,\n      allMatrix: a,\n      is3d: c,\n      pos1: l,\n      pos2: u,\n      pos3: f,\n      pos4: d,\n      left: p,\n      top: g,\n      isPersisted: h\n    } = n, v = r.zoom || 1;\n    if (!s && v <= 1) {\n      n.renderPoses = [l, u, f, d], n.renderLines = [\n        [l, u],\n        [u, d],\n        [d, f],\n        [f, l]\n      ];\n      return;\n    }\n    const { left: m, top: S, bottom: x, right: C } = qi(s || {}), E = c ? 4 : 3;\n    let D = [];\n    h ? D = i : this.controlBox && r.groupable ? D = o : D = at(o, [p, g]);\n    const R = An(\n      E,\n      Ce(\n        D.map((O) => -O),\n        E\n      ),\n      a,\n      Ce(i, E)\n    ), y = Wt(R, l, [-m, -S], E), M = Wt(R, u, [C, -S], E), P = Wt(R, f, [-m, x], E), _ = Wt(R, d, [C, x], E);\n    if (n.renderPoses = [y, M, P, _], n.renderLines = [\n      [y, M],\n      [M, _],\n      [_, P],\n      [P, y]\n    ], v) {\n      const O = v / 2;\n      n.renderLines = [\n        [\n          Wt(R, l, [-m - O, -S], E),\n          Wt(R, u, [C + O, -S], E)\n        ],\n        [\n          Wt(R, u, [C, -S - O], E),\n          Wt(R, d, [C, x + O], E)\n        ],\n        [\n          Wt(R, d, [C + O, x], E),\n          Wt(R, f, [-m - O, x], E)\n        ],\n        [\n          Wt(R, f, [-m, x + O], E),\n          Wt(R, l, [-m, -S - O], E)\n        ]\n      ];\n    }\n  }\n  checkUpdate() {\n    this._isPropTargetChanged = !1;\n    const { target: n, container: r, parentMoveable: s } = this.props, { target: o, container: i } = this.state;\n    if (!o && !n)\n      return;\n    this.updateAbles();\n    const a = !Ar(o, n);\n    if (!(a || !Ar(i, r)))\n      return;\n    const l = r || this.controlBox;\n    l && this.unsetAbles(), this.updateState({ target: n, container: r }), !s && l && this.updateRect(\"End\", !1, !1), this._isPropTargetChanged = a;\n  }\n  waitToChangeTarget() {\n    return new Promise(() => {\n    });\n  }\n  triggerEvent(n, r) {\n    const s = this.props;\n    if (this._emitter.trigger(n, r), s.parentMoveable && r.isRequest && !r.isRequestChild)\n      return s.parentMoveable.triggerEvent(n, r, !0);\n    const o = s[n];\n    return o && o(r);\n  }\n  useCSS(n, r) {\n    const s = this.props.customStyledMap, o = n + r;\n    return s[o] || (s[o] = ca(n, r)), s[o];\n  }\n  getState() {\n    var i;\n    const n = this.props;\n    (n.target || (i = n.targets) != null && i.length) && (this._hasFirstTarget = !0);\n    const r = this.controlBox, s = n.persistData, o = n.firstRenderState;\n    if (o && !r)\n      return o;\n    if (!this._hasFirstTarget && s) {\n      const a = yo(s);\n      if (a)\n        return this.updateState(a, !1), this.state;\n    }\n    return this.state.isPersisted = !1, this.state;\n  }\n  updateSelectors() {\n  }\n  unsetAbles() {\n    this.targetAbles.forEach((n) => {\n      n.unset && n.unset(this);\n    });\n  }\n  updateAbles(n = this.props.ables, r = \"\") {\n    const o = this.props.triggerAblesSimultaneously, i = this.getEnabledAbles(n), a = `drag${r}Start`, c = `pinch${r}Start`, l = `drag${r}ControlStart`, u = Mn(\n      i,\n      [a, c],\n      o\n    ), f = Mn(\n      i,\n      [l],\n      o\n    );\n    this.enabledAbles = i, this.targetAbles = u, this.controlAbles = f;\n  }\n  updateState(n, r) {\n    if (r) {\n      if (this.isUnmounted)\n        return;\n      this.setState(n);\n    } else {\n      const s = this.state;\n      for (const o in n)\n        s[o] = n[o];\n    }\n  }\n  getEnabledAbles(n = this.props.ables) {\n    const r = this.props;\n    return n.filter(\n      (s) => s && (s.always && r[s.name] !== !1 || r[s.name])\n    );\n  }\n  renderAbles() {\n    const r = this.props.triggerAblesSimultaneously, s = {\n      createElement: react__WEBPACK_IMPORTED_MODULE_0__.createElement\n    };\n    return this.renderState = {}, mu(\n      Vi(\n        Mn(\n          this.getEnabledAbles(),\n          [\"render\"],\n          r\n        ).map(({ render: o }) => o(this, s) || [])\n      ).filter((o) => o),\n      ({ key: o }) => o\n    ).map((o) => o[0]);\n  }\n  updateCheckInput() {\n    this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);\n  }\n  _getRequestStyles() {\n    return this.getEnabledAbles().reduce(\n      (r, s) => {\n        var i;\n        const o = ((i = s.requestStyle) == null ? void 0 : i.call(s)) ?? [];\n        return [...r, ...o];\n      },\n      [...this.props.requestStyles || []]\n    );\n  }\n  _updateObserver(n) {\n    this._updateResizeObserver(n), this._updateMutationObserver(n);\n  }\n  _updateEvents() {\n    const n = this.targetAbles.length, r = this.controlAbles.length, s = this._dragTarget;\n    (!n && this.targetGesto || this._isTargetChanged(!0)) && (ze(this, !1), this.updateState({ gestos: {} })), r || ze(this, !0), s && n && !this.targetGesto && (this.targetGesto = oa(this, s, \"\")), !this.controlGesto && r && (this.controlGesto = ia(this, \"Control\"));\n  }\n  _updateTargets() {\n    const n = this.props;\n    this._prevPropTarget = this._propTarget, this._prevDragTarget = this._dragTarget, this._prevOriginalDragTarget = this._originalDragTarget, this._prevDragArea = n.dragArea, this._propTarget = n.target, this._originalDragTarget = n.dragTarget || n.target, this._dragTarget = Zt(this._originalDragTarget, !0);\n  }\n  _renderLines() {\n    const n = this.props, {\n      zoom: r,\n      hideDefaultLines: s,\n      hideChildMoveableDefaultLines: o,\n      parentMoveable: i\n    } = n;\n    if (s || i && o)\n      return [];\n    const a = this.getState(), c = {\n      createElement: react__WEBPACK_IMPORTED_MODULE_0__.createElement\n    };\n    return a.renderLines.map((l, u) => un(\n      c,\n      \"\",\n      l[0],\n      l[1],\n      r,\n      `render-line-${u}`\n    ));\n  }\n  _isTargetChanged(n) {\n    const r = this.props, s = r.dragTarget || r.target, o = this._prevOriginalDragTarget, i = this._prevDragArea, a = r.dragArea;\n    return !a && o !== s || (n || a) && i !== a || this._prevPropTarget != this._propTarget;\n  }\n  _updateNativeEvents() {\n    const r = this.props.dragArea ? this.areaElement : this.state.target, s = this.events, o = Ve(s);\n    if (this._isTargetChanged())\n      for (const a in s) {\n        const c = s[a];\n        c && c.destroy(), s[a] = null;\n      }\n    if (!r)\n      return;\n    const i = this.enabledAbles;\n    o.forEach((a) => {\n      const c = Mn(i, [a]), l = c.length > 0;\n      let u = s[a];\n      if (!l) {\n        u && (u.destroy(), s[a] = null);\n        return;\n      }\n      u || (u = new gf(r, this, a), s[a] = u), u.setAbles(c);\n    });\n  }\n  _checkUpdateRootContainer() {\n    const n = this.props.rootContainer;\n    !this._rootContainer && n && (this._rootContainer = Zt(n, !0));\n  }\n  _checkUpdateViewContainer() {\n    const n = this.props.viewContainer;\n    !this._viewContainer && n && (this._viewContainer = Zt(n, !0)), this._viewContainer && this._changeAbleViewClassNames([\n      ...this._getAbleViewClassNames(),\n      this.isDragging() ? _u : \"\"\n    ]);\n  }\n  _changeAbleViewClassNames(n) {\n    const r = this._viewContainer, s = Yi(n.filter(Boolean), (c) => c).map(\n      ([c]) => c\n    ), o = this._viewClassNames, { removed: i, added: a } = ps(o, s);\n    i.forEach((c) => {\n      Zo(r, o[c]);\n    }), a.forEach((c) => {\n      Ko(r, s[c]);\n    }), this._viewClassNames = s;\n  }\n  _getAbleViewClassNames() {\n    return (this.getEnabledAbles().map((n) => {\n      var r;\n      return ((r = n.viewClassName) == null ? void 0 : r.call(n, this)) || \"\";\n    }).join(\" \") + ` ${this._getAbleClassName(\"-view\")}`).split(/\\s+/g);\n  }\n  _getAbleClassName(n = \"\") {\n    const r = this.getEnabledAbles(), s = this.targetGesto, o = this.controlGesto, i = s != null && s.isFlag() ? s.getEventData() : {}, a = o != null && o.isFlag() ? o.getEventData() : {};\n    return r.map((c) => {\n      var f, d, p;\n      const l = c.name;\n      let u = ((f = c.className) == null ? void 0 : f.call(c, this)) || \"\";\n      return ((d = i[l]) != null && d.isEventStart || (p = a[l]) != null && p.isEventStart) && (u += ` ${U(`${l}${n}-dragging`)}`), u.trim();\n    }).filter(Boolean).join(\" \");\n  }\n  _updateResizeObserver(n) {\n    var a;\n    const r = this.props, s = r.target, o = ae(this.getControlBoxElement());\n    if (!o.ResizeObserver || !s || !r.useResizeObserver) {\n      (a = this._reiszeObserver) == null || a.disconnect();\n      return;\n    }\n    if (n.target === s && this._reiszeObserver)\n      return;\n    const i = new o.ResizeObserver(this.checkUpdateRect);\n    i.observe(s, {\n      box: \"border-box\"\n    }), this._reiszeObserver = i;\n  }\n  _updateMutationObserver(n) {\n    var a;\n    const r = this.props, s = r.target, o = ae(this.getControlBoxElement());\n    if (!o.MutationObserver || !s || !r.useMutationObserver) {\n      (a = this._mutationObserver) == null || a.disconnect();\n      return;\n    }\n    if (n.target === s && this._mutationObserver)\n      return;\n    const i = new o.MutationObserver((c) => {\n      for (const l of c)\n        l.type === \"attributes\" && l.attributeName === \"style\" && this.checkUpdateRect();\n    });\n    i.observe(s, {\n      attributes: !0\n    }), this._mutationObserver = i;\n  }\n}\nX(ye, \"defaultProps\", {\n  dragTargetSelf: !1,\n  target: null,\n  dragTarget: null,\n  container: null,\n  rootContainer: null,\n  origin: !0,\n  parentMoveable: null,\n  wrapperMoveable: null,\n  isWrapperMounted: !1,\n  parentPosition: null,\n  warpSelf: !1,\n  svgOrigin: \"\",\n  dragContainer: null,\n  useResizeObserver: !1,\n  useMutationObserver: !1,\n  preventDefault: !0,\n  preventRightClick: !0,\n  preventWheelClick: !0,\n  linePadding: 0,\n  controlPadding: 0,\n  ables: [],\n  pinchThreshold: 20,\n  dragArea: !1,\n  passDragArea: !1,\n  transformOrigin: \"\",\n  className: \"\",\n  zoom: 1,\n  triggerAblesSimultaneously: !1,\n  padding: {},\n  pinchOutside: !0,\n  checkInput: !1,\n  dragFocusedInput: !1,\n  groupable: !1,\n  hideDefaultLines: !1,\n  cspNonce: \"\",\n  translateZ: 0,\n  cssStyled: null,\n  customStyledMap: {},\n  props: {},\n  stopPropagation: !1,\n  preventClickDefault: !1,\n  preventClickEventOnDrag: !0,\n  flushSync: Bi,\n  firstRenderState: null,\n  persistData: null,\n  viewContainer: null,\n  requestStyles: [],\n  useAccuratePosition: !1\n});\nconst Ms = {\n  name: \"groupable\",\n  props: [\n    \"defaultGroupRotate\",\n    \"useDefaultGroupRotate\",\n    \"defaultGroupOrigin\",\n    \"groupable\",\n    \"groupableProps\",\n    \"targetGroups\",\n    \"hideChildMoveableDefaultLines\"\n  ],\n  events: [],\n  render(t, e) {\n    var d;\n    const n = t.props;\n    let r = n.targets || [];\n    const { left: s, top: o, isPersisted: i } = t.getState(), a = n.zoom || 1, c = t.renderGroupRects;\n    let l = ((d = n.persistData) == null ? void 0 : d.children) || [];\n    i ? r = l.map(() => null) : l = [];\n    const u = Ae(\n      t,\n      \"parentPosition\",\n      [s, o],\n      (p) => p.join(\",\")\n    ), f = Ae(\n      t,\n      \"requestStyles\",\n      t.getRequestChildStyles(),\n      (p) => p.join(\",\")\n    );\n    return t.moveables = t.moveables.slice(0, r.length), [\n      ...r.map((p, g) => /* @__PURE__ */ it.jsx(\n        ye,\n        {\n          ref: Yo(t, \"moveables\", g),\n          target: p,\n          origin: !1,\n          requestStyles: f,\n          cssStyled: n.cssStyled,\n          customStyledMap: n.customStyledMap,\n          useResizeObserver: n.useResizeObserver,\n          useMutationObserver: n.useMutationObserver,\n          hideChildMoveableDefaultLines: n.hideChildMoveableDefaultLines,\n          parentMoveable: t,\n          parentPosition: [s, o],\n          persistData: l[g],\n          zoom: a\n        },\n        \"moveable\" + g\n      )),\n      ...Vi(\n        c.map(({ pos1: p, pos2: g, pos3: h, pos4: v }, m) => {\n          const S = [p, g, h, v];\n          return [\n            [0, 1],\n            [1, 3],\n            [3, 2],\n            [2, 0]\n          ].map(([x, C], E) => un(\n            e,\n            \"\",\n            K(S[x], u),\n            K(S[C], u),\n            a,\n            `group-rect-${m}-${E}`\n          ));\n        })\n      )\n    ];\n  }\n}, yf = dn(\"clickable\", {\n  props: [\n    \"clickable\"\n  ],\n  events: [\n    \"click\",\n    \"clickGroup\"\n  ],\n  always: !0,\n  dragRelation: \"weak\",\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  dragStart() {\n  },\n  dragControlStart() {\n  },\n  dragGroupStart(t, e) {\n    e.datas.inputTarget = e.inputEvent && e.inputEvent.target;\n  },\n  dragEnd(t, e) {\n    const n = t.props.target, r = e.inputEvent, s = e.inputTarget, i = !t.isMoveableElement(s) && t.controlBox.contains(s);\n    if (!r || !s || e.isDrag || t.isMoveableElement(s) || i)\n      return;\n    const a = n.contains(s);\n    j(t, \"onClick\", et(t, e, {\n      isDouble: e.isDouble,\n      inputTarget: s,\n      isTarget: n === s,\n      moveableTarget: t.props.target,\n      containsTarget: a\n    }));\n  },\n  dragGroupEnd(t, e) {\n    const n = e.inputEvent, r = e.inputTarget;\n    if (!n || !r || e.isDrag || t.isMoveableElement(r) || e.datas.inputTarget === r)\n      return;\n    const s = t.props.targets;\n    let o = s.indexOf(r);\n    const i = o > -1;\n    let a = !1;\n    o === -1 && (o = ne(s, (c) => c.contains(r)), a = o > -1), j(t, \"onClickGroup\", et(t, e, {\n      isDouble: e.isDouble,\n      targets: s,\n      inputTarget: r,\n      targetIndex: o,\n      isTarget: i,\n      containsTarget: a,\n      moveableTarget: s[o]\n    }));\n  },\n  dragControlEnd(t, e) {\n    this.dragEnd(t, e);\n  },\n  dragGroupControlEnd(t, e) {\n    this.dragEnd(t, e);\n  }\n});\nfunction Oe(t) {\n  let e = t.originalDatas.draggable;\n  return e || (t.originalDatas.draggable = {}, e = t.originalDatas.draggable), { ...t, datas: e };\n}\nconst Rf = dn(\"edgeDraggable\", {\n  css: [\n    `.edge.edgeDraggable.line {\ncursor: move;\n}`\n  ],\n  render(t, e) {\n    const n = t.props, r = n.edgeDraggable;\n    return r ? fi(\n      e,\n      \"edgeDraggable\",\n      r,\n      t.getState().renderPoses,\n      n.zoom\n    ) : [];\n  },\n  dragCondition(t, e) {\n    var s;\n    const n = t.props, r = (s = e.inputEvent) == null ? void 0 : s.target;\n    return !n.edgeDraggable || !r ? !1 : !n.draggable && bt(r, U(\"direction\")) && bt(r, U(\"edge\")) && bt(r, U(\"edgeDraggable\"));\n  },\n  dragStart(t, e) {\n    return Ot.dragStart(t, Oe(e));\n  },\n  drag(t, e) {\n    return Ot.drag(t, Oe(e));\n  },\n  dragEnd(t, e) {\n    return Ot.dragEnd(t, Oe(e));\n  },\n  dragGroupCondition(t, e) {\n    var s;\n    const n = t.props, r = (s = e.inputEvent) == null ? void 0 : s.target;\n    return !n.edgeDraggable || !r ? !1 : !n.draggable && bt(r, U(\"direction\")) && bt(r, U(\"line\"));\n  },\n  dragGroupStart(t, e) {\n    return Ot.dragGroupStart(t, Oe(e));\n  },\n  dragGroup(t, e) {\n    return Ot.dragGroup(t, Oe(e));\n  },\n  dragGroupEnd(t, e) {\n    return Ot.dragGroupEnd(t, Oe(e));\n  },\n  unset(t) {\n    return Ot.unset(t);\n  }\n}), ua = {\n  name: \"individualGroupable\",\n  props: [\n    \"individualGroupable\",\n    \"individualGroupableProps\"\n  ],\n  events: []\n}, Ps = [\n  ra,\n  Zi,\n  su,\n  bu,\n  Ot,\n  Rf,\n  Tr,\n  yu,\n  Mu,\n  wl,\n  Au,\n  Gu,\n  Tu,\n  ef,\n  tf,\n  of,\n  Ms,\n  ua,\n  yf,\n  Ki,\n  sa\n], Bf = /* @__PURE__ */ Ps.reduce((t, e) => ((e.events || []).forEach((n) => {\n  Uo(t, n);\n}), t), []), zf = /* @__PURE__ */ Ps.reduce((t, e) => ((e.props || []).forEach((n) => {\n  Uo(t, n);\n}), t), []);\nfunction Ro([t, e, n], r) {\n  return (t * r[0] + e * r[1] + n) / Math.sqrt(t * t + e * e);\n}\nfunction wn([t, e], n) {\n  return -t * n[0] - e * n[1];\n}\nfunction Mo(t, e) {\n  return Math.max(\n    ...t.map(([n, r, s, o]) => Math.max(n[e], r[e], s[e], o[e]))\n  );\n}\nfunction Po(t, e) {\n  return Math.min(\n    ...t.map(([n, r, s, o]) => Math.min(n[e], r[e], s[e], o[e]))\n  );\n}\nfunction Mf(t, e) {\n  let n = [0, 0], r = [0, 0], s = [0, 0], o = [0, 0], i = 0, a = 0;\n  if (!t.length)\n    return {\n      pos1: n,\n      pos2: r,\n      pos3: s,\n      pos4: o,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: i,\n      height: a,\n      rotation: e\n    };\n  const c = tt(e, Bt);\n  if (c % 90) {\n    const p = c / 180 * Math.PI, g = Math.tan(p), h = -1 / g, v = [Dr, Fs], m = [\n      [0, 0],\n      [0, 0]\n    ], S = [Dr, Fs], x = [\n      [0, 0],\n      [0, 0]\n    ];\n    t.forEach((O) => {\n      O.forEach((T) => {\n        const w = Ro([-g, 1, 0], T), k = Ro([-h, 1, 0], T);\n        v[0] > w && (m[0] = T, v[0] = w), v[1] < w && (m[1] = T, v[1] = w), S[0] > k && (x[0] = T, S[0] = k), S[1] < k && (x[1] = T, S[1] = k);\n      });\n    });\n    const [C, E] = m, [D, R] = x, y = [-g, 1, wn([-g, 1], C)], M = [-g, 1, wn([-g, 1], E)], P = [-h, 1, wn([-h, 1], D)], _ = [-h, 1, wn([-h, 1], R)];\n    [n, r, s, o] = [\n      [y, P],\n      [y, _],\n      [M, P],\n      [M, _]\n    ].map(\n      ([O, T]) => bs(O, T)[0]\n    ), i = S[1] - S[0], a = v[1] - v[0];\n  } else {\n    const p = Po(t, 0), g = Po(t, 1), h = Mo(t, 0), v = Mo(t, 1);\n    n = [p, g], r = [h, g], s = [p, v], o = [h, v], i = h - p, a = v - g, c % 180 && ([n, r, s, o] = [s, n, o, r], i = v - g, a = h - p);\n  }\n  c % 360 > 180 && ([n, r, s, o] = [o, s, r, n]);\n  const { minX: l, minY: u, maxX: f, maxY: d } = be([n, r, s, o]);\n  return {\n    pos1: n,\n    pos2: r,\n    pos3: s,\n    pos4: o,\n    width: i,\n    height: a,\n    minX: l,\n    minY: u,\n    maxX: f,\n    maxY: d,\n    rotation: e\n  };\n}\nfunction fa(t, e) {\n  const n = e.map((r) => {\n    if (Rt(r)) {\n      const s = fa(t, r), o = s.length;\n      return o > 1 ? s : o === 1 ? s[0] : null;\n    } else {\n      const s = kt(\n        t,\n        ({ manager: o }) => o.props.target === r\n      );\n      return s ? (s.finded = !0, s.manager) : null;\n    }\n  }).filter(Boolean);\n  return n.length === 1 && Rt(n[0]) ? n[0] : n;\n}\nclass da extends ye {\n  constructor() {\n    super(...arguments);\n    X(this, \"differ\", new _i());\n    X(this, \"moveables\", []);\n    X(this, \"transformOrigin\", \"50% 50%\");\n    X(this, \"renderGroupRects\", []);\n    X(this, \"_targetGroups\", []);\n    X(this, \"_hasFirstTargets\", !1);\n  }\n  componentDidMount() {\n    super.componentDidMount();\n  }\n  checkUpdate() {\n    this._isPropTargetChanged = !1, this.updateAbles();\n  }\n  getTargets() {\n    return this.props.targets;\n  }\n  updateRect(n, r, s = !0) {\n    var W;\n    const o = this.state;\n    if (!this.controlBox || o.isPersisted)\n      return;\n    Le(!0), this.moveables.forEach((J) => {\n      J.updateRect(n, !1, !1);\n    });\n    const i = this.props, a = this.moveables, c = o.target || i.target, l = a.map((J) => ({\n      finded: !1,\n      manager: J\n    })), u = this.props.targetGroups || [], f = fa(l, u), d = i.useDefaultGroupRotate;\n    f.push(\n      ...l.filter(({ finded: J }) => !J).map(({ manager: J }) => J)\n    );\n    const p = [], g = !r || n !== \"\" && i.updateGroup;\n    let h = i.defaultGroupRotate || 0;\n    if (!this._hasFirstTargets) {\n      const J = (W = i.persistData) == null ? void 0 : W.rotation;\n      J != null && (h = J);\n    }\n    function v(J, q, F) {\n      const H = J.map((ut) => {\n        if (Rt(ut)) {\n          const St = v(ut, q), Kt = [St.pos1, St.pos2, St.pos3, St.pos4];\n          return p.push(St), { poses: Kt, rotation: St.rotation };\n        } else\n          return {\n            poses: jt(ut.state),\n            rotation: ut.getRotation()\n          };\n      }), nt = H.map(({ rotation: ut }) => ut);\n      let lt = 0;\n      const vt = nt[0], st = nt.every((ut) => Math.abs(vt - ut) < 0.1);\n      g ? lt = !d && st ? vt : h : lt = !d && !F && st ? vt : q;\n      const Ft = H.map(({ poses: ut }) => ut);\n      return Mf(Ft, lt);\n    }\n    const m = v(\n      f,\n      this.rotation,\n      !0\n    );\n    g && (this.rotation = m.rotation, this.transformOrigin = i.defaultGroupOrigin || \"50% 50%\", this.scale = [1, 1]), this._targetGroups = u, this.renderGroupRects = p;\n    const S = this.transformOrigin, x = this.rotation, C = this.scale, { width: E, height: D, minX: R, minY: y } = m, M = Du(\n      [\n        [0, 0],\n        [E, 0],\n        [0, D],\n        [E, D]\n      ],\n      Es(S, E, D),\n      this.rotation / 180 * Math.PI\n    ), { minX: P, minY: _ } = be(M.result), O = ` rotate(${x}deg) scale(${wt(C[0])}, ${wt(C[1])})`, T = `translate(${-P}px, ${-_}px)${O}`;\n    this.controlBox.style.transform = `translate3d(${R}px, ${y}px, ${this.props.translateZ || 0})`, c.style.cssText += `left:0px;top:0px;transform-origin:${S};width:${E}px;height:${D}px;transform: ${T}`, o.width = E, o.height = D;\n    const w = this.getContainer(), k = Yr(\n      this.controlBox,\n      c,\n      this.controlBox,\n      this.getContainer(),\n      this._rootContainer || w,\n      []\n    ), I = [k.left, k.top], [$, G, L, z] = jt(k), N = be([$, G, L, z]), Z = [N.minX, N.minY], Y = wt(C[0] * C[1]);\n    k.pos1 = K($, Z), k.pos2 = K(G, Z), k.pos3 = K(L, Z), k.pos4 = K(z, Z), k.left = R - k.left + Z[0], k.top = y - k.top + Z[1], k.origin = K(at(I, k.origin), Z), k.beforeOrigin = K(at(I, k.beforeOrigin), Z), k.originalBeforeOrigin = at(I, k.originalBeforeOrigin), k.transformOrigin = K(at(I, k.transformOrigin), Z), c.style.transform = `translate(${-P - Z[0]}px, ${-_ - Z[1]}px)` + O, Le(), this.updateState(\n      {\n        ...k,\n        posDelta: Z,\n        direction: Y,\n        beforeDirection: Y\n      },\n      s\n    );\n  }\n  getRect() {\n    return {\n      ...super.getRect(),\n      children: this.moveables.map((n) => n.getRect())\n    };\n  }\n  triggerEvent(n, r, s) {\n    if (s || n.indexOf(\"Group\") > -1)\n      return super.triggerEvent(n, r);\n    this._emitter.trigger(n, r);\n  }\n  getRequestChildStyles() {\n    return this.getEnabledAbles().reduce(\n      (r, s) => {\n        var i;\n        const o = ((i = s.requestChildStyle) == null ? void 0 : i.call(s)) ?? [];\n        return [...r, ...o];\n      },\n      []\n    );\n  }\n  getMoveables() {\n    return [...this.moveables];\n  }\n  updateAbles() {\n    super.updateAbles([...this.props.ables, Ms], \"Group\");\n  }\n  _updateTargets() {\n    super._updateTargets(), this._originalDragTarget = this.props.dragTarget || this.areaElement, this._dragTarget = Zt(this._originalDragTarget, !0);\n  }\n  _updateEvents() {\n    const n = this.state, r = this.props, s = this._prevDragTarget, o = r.dragTarget || this.areaElement, i = r.targets, { added: a, changed: c, removed: l } = this.differ.update(i), u = a.length || l.length;\n    (u || this._prevOriginalDragTarget !== this._originalDragTarget) && (ze(this, !1), ze(this, !0), this.updateState({ gestos: {} })), s !== o && (n.target = null), n.target || (n.target = this.areaElement, this.controlBox.style.display = \"block\"), n.target && (this.targetGesto || (this.targetGesto = oa(this, this._dragTarget, \"Group\")), this.controlGesto || (this.controlGesto = ia(this, \"GroupControl\")));\n    const f = !Ar(n.container, r.container);\n    f && (n.container = r.container), (f || u || this.transformOrigin !== (r.defaultGroupOrigin || \"50% 50%\") || c.length || i.length && !Hi(this._targetGroups, r.targetGroups || [])) && (this.updateRect(), this._hasFirstTargets = !0), this._isPropTargetChanged = !!u;\n  }\n  _updateObserver() {\n  }\n}\nX(da, \"defaultProps\", {\n  ...ye.defaultProps,\n  transformOrigin: [\"50%\", \"50%\"],\n  groupable: !0,\n  dragArea: !0,\n  keepRatio: !0,\n  targets: [],\n  defaultGroupRotate: 0,\n  defaultGroupOrigin: \"50% 50%\"\n});\nclass Pf extends ye {\n  constructor() {\n    super(...arguments);\n    X(this, \"moveables\", []);\n  }\n  render() {\n    const n = this.props, { cspNonce: r, cssStyled: s, persistData: o } = n;\n    let i = n.targets || [];\n    const a = i.length, c = this.isUnmounted || !a;\n    let l = (o == null ? void 0 : o.children) ?? [];\n    return c && !a && l.length ? i = l.map(() => null) : c || (l = []), /* @__PURE__ */ it.jsx(\n      s,\n      {\n        cspNonce: r,\n        ref: Se(this, \"controlBox\"),\n        className: U(\"control-box\"),\n        children: i.map((u, f) => {\n          var p;\n          const d = ((p = n.individualGroupableProps) == null ? void 0 : p.call(n, u, f)) ?? {};\n          return /* @__PURE__ */ it.jsx(\n            ye,\n            {\n              ref: Yo(this, \"moveables\", f),\n              ...n,\n              ...d,\n              target: u,\n              wrapperMoveable: this,\n              isWrapperMounted: this.isMoveableMounted,\n              persistData: l[f]\n            },\n            \"moveable\" + f\n          );\n        })\n      }\n    );\n  }\n  componentDidMount() {\n  }\n  componentDidUpdate() {\n  }\n  getTargets() {\n    return this.props.targets;\n  }\n  updateRect(n, r, s = !0) {\n    Le(!0), this.moveables.forEach((o) => {\n      o.updateRect(n, r, s);\n    }), Le();\n  }\n  getRect() {\n    return {\n      ...super.getRect(),\n      children: this.moveables.map((n) => n.getRect())\n    };\n  }\n  request(n, r = {}, s) {\n    const o = this.moveables.map(\n      (c) => c.request(n, { ...r, isInstant: !1 }, !1)\n    ), i = s || r.isInstant, a = {\n      request(c) {\n        return o.forEach((l) => l.request(c)), this;\n      },\n      requestEnd() {\n        return o.forEach((c) => c.requestEnd()), this;\n      }\n    };\n    return i ? a.request(r).requestEnd() : a;\n  }\n  dragStart(n, r = n.target) {\n    const s = r, o = kt(this.moveables, (i) => {\n      const a = i.getTargets()[0], c = i.getControlBoxElement(), l = i.getDragElement();\n      return !a || !l ? !1 : l === s || l.contains(s) || l !== a && a === s || a.contains(s) || c === s || c.contains(s);\n    });\n    return o && o.dragStart(n, r), this;\n  }\n  hitTest() {\n    return 0;\n  }\n  isInside() {\n    return !1;\n  }\n  isDragging() {\n    return !1;\n  }\n  getDragElement() {\n    return null;\n  }\n  getMoveables() {\n    return [...this.moveables];\n  }\n  updateRenderPoses() {\n  }\n  checkUpdate() {\n  }\n  triggerEvent() {\n  }\n  updateAbles() {\n  }\n  _updateEvents() {\n  }\n  _updateObserver() {\n  }\n}\nfunction pa(t, e) {\n  const n = [];\n  return t.forEach((r) => {\n    if (r) {\n      if (re(r)) {\n        e[r] && n.push(...e[r]);\n        return;\n      }\n      Rt(r) ? n.push(...pa(r, e)) : n.push(r);\n    }\n  }), n;\n}\nfunction ga(t, e) {\n  const n = [];\n  return t.forEach((r) => {\n    if (r) {\n      if (re(r)) {\n        e[r] && n.push(...e[r]);\n        return;\n      }\n      Rt(r) ? n.push(ga(r, e)) : n.push(r);\n    }\n  }), n;\n}\nfunction ha(t, e) {\n  return t.length !== e.length || t.some((n, r) => {\n    const s = e[r];\n    return !n && !s ? !1 : n != s ? Rt(n) && Rt(s) ? ha(n, s) : !0 : !1;\n  });\n}\nclass on extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n  constructor() {\n    super(...arguments);\n    // @withMethods(MOVEABLE_METHODS)\n    X(this, \"moveable\");\n    X(this, \"refTargets\", []);\n    X(this, \"selectorMap\", {});\n    X(this, \"_differ\", new _i());\n    X(this, \"_elementTargets\", []);\n    X(this, \"_tmpRefTargets\", []);\n    X(this, \"_tmpSelectorMap\", {});\n    X(this, \"_onChangeTargets\", null);\n  }\n  static makeStyled() {\n    const n = {};\n    this.getTotalAbles().forEach(({ css: o }) => {\n      o && o.forEach((i) => {\n        n[i] = !0;\n      });\n    });\n    const s = Ve(n).join(`\n`);\n    this.defaultStyled = ca(\"div\", lc(Hr, oc + s));\n  }\n  static getTotalAbles() {\n    return [\n      Zi,\n      Ms,\n      ua,\n      Ki,\n      ...this.defaultAbles\n    ];\n  }\n  render() {\n    const n = this.constructor;\n    n.defaultStyled || n.makeStyled();\n    const { ables: r, props: s, ...o } = this.props, [i, a] = this._updateRefs(!0), c = pa(i, a);\n    let l = c.length > 1;\n    const f = [...n.getTotalAbles(), ...r || []], d = {\n      ...o,\n      ...s || {},\n      ables: f,\n      cssStyled: n.defaultStyled,\n      customStyledMap: n.customStyledMap\n    };\n    this._elementTargets = c;\n    let p = null;\n    const g = this.moveable, h = o.persistData;\n    if (h != null && h.children && (l = !0), o.individualGroupable)\n      return /* @__PURE__ */ it.jsx(\n        Pf,\n        {\n          ref: Se(this, \"moveable\"),\n          ...d,\n          target: null,\n          targets: c\n        },\n        \"individual-group\"\n      );\n    if (l) {\n      const v = ga(i, a);\n      if (g && !g.props.groupable && !g.props.individualGroupable) {\n        const m = g.props.target;\n        m && c.indexOf(m) > -1 && (p = { ...g.state });\n      }\n      return /* @__PURE__ */ it.jsx(\n        da,\n        {\n          ref: Se(this, \"moveable\"),\n          ...d,\n          ...o.groupableProps ?? {},\n          target: null,\n          targets: c,\n          targetGroups: v,\n          firstRenderState: p\n        },\n        \"group\"\n      );\n    } else {\n      const v = c[0];\n      if (g && (g.props.groupable || g.props.individualGroupable)) {\n        const m = g.moveables || [], S = kt(\n          m,\n          (x) => x.props.target === v\n        );\n        S && (p = { ...S.state });\n      }\n      return /* @__PURE__ */ it.jsx(\n        ye,\n        {\n          ref: Se(this, \"moveable\"),\n          ...d,\n          target: v,\n          firstRenderState: p\n        },\n        \"single\"\n      );\n    }\n  }\n  componentDidMount() {\n    this._checkChangeTargets();\n  }\n  componentDidUpdate() {\n    this._checkChangeTargets();\n  }\n  componentWillUnmount() {\n    this.selectorMap = {}, this.refTargets = [];\n  }\n  /**\n   * Get targets set in moveable through target or targets of props.\n   * @method Moveable#getTargets\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body, {\n   *    target: [targetRef, \".target\", document.querySelectorAll(\".target\")],\n   * });\n   *\n   * console.log(moveable.getTargets());\n   */\n  getTargets() {\n    var n;\n    return ((n = this.moveable) == null ? void 0 : n.getTargets()) ?? [];\n  }\n  /**\n   * If the element list corresponding to the selector among the targets is changed, it is updated.\n   * @method Moveable#updateSelectors\n   * @example\n   * import Moveable from \"moveable\";\n   *\n   * const moveable = new Moveable(document.body, {\n   *    target: \".target\",\n   * });\n   *\n   * moveable.updateSelectors();\n   */\n  updateSelectors() {\n    this.selectorMap = {}, this._updateRefs(), this.forceUpdate();\n  }\n  /**\n   * User changes target and waits for target to change.\n   * @method Moveable#waitToChangeTarget\n   * @story combination-with-other-components--components-selecto\n   * @example\n   * document.querySelector(\".target\").addEventListener(\"mousedown\", e => {\n   *   moveable.waitToChangeTarget().then(() => {\n   *      moveable.dragStart(e, e.currentTarget);\n   *   });\n   *   moveable.target = e.currentTarget;\n   * });\n   */\n  waitToChangeTarget() {\n    let n;\n    return this._onChangeTargets = () => {\n      this._onChangeTargets = null, n();\n    }, new Promise((r) => {\n      n = r;\n    });\n  }\n  waitToChangeTargets() {\n    return this.waitToChangeTarget();\n  }\n  getManager() {\n    return this.moveable;\n  }\n  getMoveables() {\n    return this.moveable.getMoveables();\n  }\n  getDragElement() {\n    return this.moveable.getDragElement();\n  }\n  _updateRefs(n) {\n    const r = this.refTargets, s = Ss(\n      this.props.target || this.props.targets\n    ), o = typeof document < \"u\";\n    let i = ha(r, s);\n    const a = this.selectorMap, c = {};\n    return this.refTargets.forEach(function l(u) {\n      re(u) ? a[u] ? c[u] = a[u] : o && (i = !0, c[u] = [].slice.call(\n        document.querySelectorAll(u)\n      )) : Rt(u) && u.forEach(l);\n    }), this._tmpRefTargets = s, this._tmpSelectorMap = c, [s, c, !n && i];\n  }\n  _checkChangeTargets() {\n    var c, l, u;\n    this.refTargets = this._tmpRefTargets, this.selectorMap = this._tmpSelectorMap;\n    const { added: n, removed: r } = this._differ.update(this._elementTargets);\n    (n.length || r.length) && ((l = (c = this.props).onChangeTargets) == null || l.call(c, {\n      moveable: this.moveable,\n      targets: this._elementTargets\n    }), (u = this._onChangeTargets) == null || u.call(this));\n    const [o, i, a] = this._updateRefs();\n    this.refTargets = o, this.selectorMap = i, a && this.forceUpdate();\n  }\n}\nX(on, \"defaultAbles\", []), X(on, \"customStyledMap\", {}), X(on, \"defaultStyled\", null);\nclass _f extends on {\n}\nX(_f, \"defaultAbles\", Ps);\nfunction Gf(t) {\n  var e;\n  return e = class extends on {\n  }, X(e, \"defaultAbles\", t), e;\n}\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@interactify/moveable/dist/index.es.js\n");

/***/ })

};
;