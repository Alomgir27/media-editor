"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_designcombo_frames_dist_frames_js"],{

/***/ "(app-pages-browser)/./node_modules/@designcombo/frames/dist/frames.js":
/*!*********************************************************!*\
  !*** ./node_modules/@designcombo/frames/dist/frames.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_AUDIO_CONF: function() { return /* binding */ q; },\n/* harmony export */   EventTool: function() { return /* binding */ Ri; },\n/* harmony export */   Log: function() { return /* binding */ z; },\n/* harmony export */   MP4Clip: function() { return /* binding */ sn; },\n/* harmony export */   adjustAudioDataVolume: function() { return /* binding */ en; },\n/* harmony export */   audioResample: function() { return /* binding */ bi; },\n/* harmony export */   autoReadStream: function() { return /* binding */ fe; },\n/* harmony export */   concatFloat32Array: function() { return /* binding */ Me; },\n/* harmony export */   concatPCMFragments: function() { return /* binding */ mi; },\n/* harmony export */   createEl: function() { return /* binding */ Ve; },\n/* harmony export */   decodeImg: function() { return /* binding */ nn; },\n/* harmony export */   extractPCM4AudioBuffer: function() { return /* binding */ Oe; },\n/* harmony export */   extractPCM4AudioData: function() { return /* binding */ le; },\n/* harmony export */   fastConcatMP4: function() { return /* binding */ Xi; },\n/* harmony export */   file2stream: function() { return /* binding */ Wi; },\n/* harmony export */   fixFMP4Duration: function() { return /* binding */ an; },\n/* harmony export */   mixinMP4AndAudio: function() { return /* binding */ on; },\n/* harmony export */   mixinPCM: function() { return /* binding */ be; },\n/* harmony export */   recodemux: function() { return /* binding */ rn; },\n/* harmony export */   renderTxt2Img: function() { return /* binding */ We; },\n/* harmony export */   renderTxt2ImgBitmap: function() { return /* binding */ tn; },\n/* harmony export */   ringSliceFloat32Array: function() { return /* binding */ Si; },\n/* harmony export */   workerTimer: function() { return /* binding */ De; }\n/* harmony export */ });\nvar He = Object.defineProperty;\nvar pe = (l) => {\n  throw TypeError(l);\n};\nvar Ye = (l, r, h) => r in l ? He(l, r, { enumerable: !0, configurable: !0, writable: !0, value: h }) : l[r] = h;\nvar R = (l, r, h) => Ye(l, typeof r != \"symbol\" ? r + \"\" : r, h), _e = (l, r, h) => r.has(l) || pe(\"Cannot \" + h);\nvar m = (l, r, h) => (_e(l, r, \"read from private field\"), h ? h.call(l) : r.get(l)), A = (l, r, h) => r.has(l) ? pe(\"Cannot add the same private member more than once\") : r instanceof WeakSet ? r.add(l) : r.set(l, h), E = (l, r, h, a) => (_e(l, r, \"write to private field\"), a ? a.call(l, h) : r.set(l, h), h);\nfunction Ve(l) {\n  return document.createElement(l);\n}\nfunction We(l, r) {\n  const h = Ve(\"pre\");\n  h.style.cssText = `margin: 0; ${r}; visibility: hidden; position: fixed;`, h.textContent = l, document.body.appendChild(h);\n  const { width: a, height: f } = h.getBoundingClientRect();\n  h.remove(), h.style.visibility = \"visible\";\n  const d = new Image();\n  d.width = a, d.height = f;\n  const p = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${a}\" height=\"${f}\">\n    <foreignObject width=\"100%\" height=\"100%\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">${h.outerHTML}</div>\n    </foreignObject>\n    </svg>\n  `.replace(/\\t/g, \"\").replace(/#/g, \"%23\");\n  return d.src = `data:image/svg+xml;charset=utf-8,${p}`, d;\n}\nasync function tn(l, r) {\n  const h = We(l, r);\n  await new Promise((d) => {\n    h.onload = d;\n  });\n  const a = new OffscreenCanvas(h.width, h.height), f = a.getContext(\"2d\");\n  return f == null || f.drawImage(h, 0, 0, h.width, h.height), await createImageBitmap(a);\n}\nvar Be = (l) => {\n  throw TypeError(l);\n}, Fe = (l, r, h) => r.has(l) || Be(\"Cannot \" + h), I = (l, r, h) => (Fe(l, r, \"read from private field\"), h ? h.call(l) : r.get(l)), N = (l, r, h) => r.has(l) ? Be(\"Cannot add the same private member more than once\") : r instanceof WeakSet ? r.add(l) : r.set(l, h), M = (l, r, h, a) => (Fe(l, r, \"write to private field\"), r.set(l, h), h);\nconst Ie = \"KGZ1bmN0aW9uKCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHUobil7aWYobj09PSIvIilyZXR1cm57cGFyZW50Om51bGwsbmFtZToiIn07Y29uc3QgZT1uLnNwbGl0KCIvIikuZmlsdGVyKGk9PmkubGVuZ3RoPjApO2lmKGUubGVuZ3RoPT09MCl0aHJvdyBFcnJvcigiSW52YWxpZCBwYXRoIik7Y29uc3QgYT1lW2UubGVuZ3RoLTFdLHI9Ii8iK2Uuc2xpY2UoMCwtMSkuam9pbigiLyIpO3JldHVybntuYW1lOmEscGFyZW50OnJ9fWFzeW5jIGZ1bmN0aW9uIHcobixlKXtjb25zdHtwYXJlbnQ6YSxuYW1lOnJ9PXUobik7aWYoYT09bnVsbClyZXR1cm4gYXdhaXQgbmF2aWdhdG9yLnN0b3JhZ2UuZ2V0RGlyZWN0b3J5KCk7Y29uc3QgaT1hLnNwbGl0KCIvIikuZmlsdGVyKHQ9PnQubGVuZ3RoPjApO3RyeXtsZXQgdD1hd2FpdCBuYXZpZ2F0b3Iuc3RvcmFnZS5nZXREaXJlY3RvcnkoKTtmb3IoY29uc3QgcyBvZiBpKXQ9YXdhaXQgdC5nZXREaXJlY3RvcnlIYW5kbGUocyx7Y3JlYXRlOmUuY3JlYXRlfSk7aWYoZS5pc0ZpbGUpcmV0dXJuIGF3YWl0IHQuZ2V0RmlsZUhhbmRsZShyLHtjcmVhdGU6ZS5jcmVhdGV9KX1jYXRjaCh0KXtpZih0Lm5hbWU9PT0iTm90Rm91bmRFcnJvciIpcmV0dXJuIG51bGw7dGhyb3cgdH19Y29uc3QgZj17fTtzZWxmLm9ubWVzc2FnZT1hc3luYyBuPT57dmFyIGk7Y29uc3R7ZXZ0VHlwZTplLGFyZ3M6YX09bi5kYXRhO2xldCByPWZbYS5maWxlSWRdO3RyeXtsZXQgdDtjb25zdCBzPVtdO2lmKGU9PT0icmVnaXN0ZXIiKXtjb25zdCBsPWF3YWl0IHcoYS5maWxlUGF0aCx7Y3JlYXRlOiEwLGlzRmlsZTohMH0pO2lmKGw9PW51bGwpdGhyb3cgRXJyb3IoYG5vdCBmb3VuZCBmaWxlOiAke2EuZmlsZUlkfWApO3I9YXdhaXQgbC5jcmVhdGVTeW5jQWNjZXNzSGFuZGxlKHttb2RlOmEubW9kZX0pLGZbYS5maWxlSWRdPXJ9ZWxzZSBpZihlPT09ImNsb3NlIilhd2FpdCByLmNsb3NlKCksZGVsZXRlIGZbYS5maWxlSWRdO2Vsc2UgaWYoZT09PSJ0cnVuY2F0ZSIpYXdhaXQgci50cnVuY2F0ZShhLm5ld1NpemUpO2Vsc2UgaWYoZT09PSJ3cml0ZSIpe2NvbnN0e2RhdGE6bCxvcHRzOm99PW4uZGF0YS5hcmdzO3Q9YXdhaXQgci53cml0ZShsLG8pfWVsc2UgaWYoZT09PSJyZWFkIil7Y29uc3R7b2Zmc2V0Omwsc2l6ZTpvfT1uLmRhdGEuYXJncyxnPW5ldyBVaW50OEFycmF5KG8pLGQ9YXdhaXQgci5yZWFkKGcse2F0Omx9KSxjPWcuYnVmZmVyO3Q9ZD09PW8/YzooKGk9Yy50cmFuc2Zlcik9PW51bGw/dm9pZCAwOmkuY2FsbChjLGQpKT8/Yy5zbGljZSgwLGQpLHMucHVzaCh0KX1lbHNlIGU9PT0iZ2V0U2l6ZSI/dD1hd2FpdCByLmdldFNpemUoKTplPT09ImZsdXNoIiYmYXdhaXQgci5mbHVzaCgpO3NlbGYucG9zdE1lc3NhZ2Uoe2V2dFR5cGU6ImNhbGxiYWNrIixjYklkOm4uZGF0YS5jYklkLHJldHVyblZhbDp0fSxzKX1jYXRjaCh0KXtjb25zdCBzPXQ7c2VsZi5wb3N0TWVzc2FnZSh7ZXZ0VHlwZToidGhyb3dFcnJvciIsY2JJZDpuLmRhdGEuY2JJZCxlcnJNc2c6cy5uYW1lKyI6ICIrcy5tZXNzYWdlK2AKYCtKU09OLnN0cmluZ2lmeShuLmRhdGEpfSl9fX0pKCk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZnMtd29ya2VyLUY0UldscWNfLmpzLm1hcAo=\", Ze = (l) => Uint8Array.from(atob(l), (r) => r.charCodeAt(0)), ge = typeof self < \"u\" && self.Blob && new Blob([Ze(Ie)], { type: \"text/javascript;charset=utf-8\" });\nfunction Xe(l) {\n  let r;\n  try {\n    if (r = ge && (self.URL || self.webkitURL).createObjectURL(ge), !r) throw \"\";\n    const h = new Worker(r, {\n      name: l == null ? void 0 : l.name\n    });\n    return h.addEventListener(\"error\", () => {\n      (self.URL || self.webkitURL).revokeObjectURL(r);\n    }), h;\n  } catch {\n    return new Worker(\n      \"data:text/javascript;base64,\" + Ie,\n      {\n        name: l == null ? void 0 : l.name\n      }\n    );\n  } finally {\n    r && (self.URL || self.webkitURL).revokeObjectURL(r);\n  }\n}\nasync function je(l, r, h) {\n  const a = Ke();\n  return await a(\"register\", { fileId: l, filePath: r, mode: h }), {\n    read: async (f, d) => await a(\"read\", {\n      fileId: l,\n      offset: f,\n      size: d\n    }),\n    write: async (f, d) => await a(\n      \"write\",\n      {\n        fileId: l,\n        data: f,\n        opts: d\n      },\n      [ArrayBuffer.isView(f) ? f.buffer : f]\n    ),\n    close: async () => await a(\"close\", {\n      fileId: l\n    }),\n    truncate: async (f) => await a(\"truncate\", {\n      fileId: l,\n      newSize: f\n    }),\n    getSize: async () => await a(\"getSize\", {\n      fileId: l\n    }),\n    flush: async () => await a(\"flush\", {\n      fileId: l\n    })\n  };\n}\nconst Yt = [];\nlet ie = 0;\nfunction Ke() {\n  if (Yt.length < 3) {\n    const r = l();\n    return Yt.push(r), r;\n  } else {\n    const r = Yt[ie];\n    return ie = (ie + 1) % Yt.length, r;\n  }\n  function l() {\n    const r = new Xe();\n    let h = 0, a = {};\n    return r.onmessage = ({\n      data: f\n    }) => {\n      var d, p;\n      f.evtType === \"callback\" ? (d = a[f.cbId]) == null || d.resolve(f.returnVal) : f.evtType === \"throwError\" && ((p = a[f.cbId]) == null || p.reject(Error(f.errMsg))), delete a[f.cbId];\n    }, async function(f, d, p = []) {\n      h += 1;\n      const n = new Promise((v, b) => {\n        a[h] = { resolve: v, reject: b };\n      });\n      return r.postMessage(\n        {\n          cbId: h,\n          evtType: f,\n          args: d\n        },\n        p\n      ), n;\n    };\n  }\n}\nfunction te(l) {\n  if (l === \"/\") return { parent: null, name: \"\" };\n  const r = l.split(\"/\").filter((f) => f.length > 0);\n  if (r.length === 0) throw Error(\"Invalid path\");\n  const h = r[r.length - 1], a = \"/\" + r.slice(0, -1).join(\"/\");\n  return { name: h, parent: a };\n}\nasync function ot(l, r) {\n  const { parent: h, name: a } = te(l);\n  if (h == null) return await navigator.storage.getDirectory();\n  const f = h.split(\"/\").filter((d) => d.length > 0);\n  try {\n    let d = await navigator.storage.getDirectory();\n    for (const p of f)\n      d = await d.getDirectoryHandle(p, {\n        create: r.create\n      });\n    return r.isFile ? await d.getFileHandle(a, {\n      create: r.create\n    }) : await d.getDirectoryHandle(a, {\n      create: r.create\n    });\n  } catch (d) {\n    if (d.name === \"NotFoundError\")\n      return null;\n    throw d;\n  }\n}\nasync function Ce(l) {\n  const { parent: r, name: h } = te(l);\n  if (r == null) {\n    const f = await navigator.storage.getDirectory();\n    for await (const d of f.keys())\n      await f.removeEntry(d, { recursive: !0 });\n    return;\n  }\n  const a = await ot(r, {\n    create: !1,\n    isFile: !1\n  });\n  a != null && await a.removeEntry(h, { recursive: !0 });\n}\nfunction se(l, r) {\n  return `${l}/${r}`.replace(\"//\", \"/\");\n}\nfunction vt(l) {\n  return new ze(l);\n}\nvar H, Vt, At;\nclass ze {\n  constructor(r) {\n    N(this, H), N(this, Vt), N(this, At), M(this, H, r);\n    const { parent: h, name: a } = te(r);\n    M(this, Vt, a), M(this, At, h);\n  }\n  get kind() {\n    return \"dir\";\n  }\n  get name() {\n    return I(this, Vt);\n  }\n  get path() {\n    return I(this, H);\n  }\n  get parent() {\n    return I(this, At) == null ? null : vt(I(this, At));\n  }\n  /**\n   * Creates the directory.\n   * return A promise that resolves when the directory is created.\n   */\n  async create() {\n    return await ot(I(this, H), {\n      create: !0,\n      isFile: !1\n    }), vt(I(this, H));\n  }\n  /**\n   * Checks if the directory exists.\n   * return A promise that resolves to true if the directory exists, otherwise false.\n   */\n  async exists() {\n    return await ot(I(this, H), {\n      create: !1,\n      isFile: !1\n    }) instanceof FileSystemDirectoryHandle;\n  }\n  /**\n   * Removes the directory.\n   * return A promise that resolves when the directory is removed.\n   */\n  async remove() {\n    for (const r of await this.children())\n      try {\n        await r.remove();\n      } catch (h) {\n        console.warn(h);\n      }\n    try {\n      await Ce(I(this, H));\n    } catch (r) {\n      console.warn(r);\n    }\n  }\n  /**\n   * Retrieves the children of the directory.\n   * return A promise that resolves to an array of objects representing the children.\n   */\n  async children() {\n    const r = await ot(I(this, H), {\n      create: !1,\n      isFile: !1\n    });\n    if (r == null) return [];\n    const h = [];\n    for await (const a of r.values())\n      h.push((a.kind === \"file\" ? _t : vt)(se(I(this, H), a.name)));\n    return h;\n  }\n  /**\n   * If the dest folder exists, copy the current directory into the dest folder;\n   * if the dest folder does not exist, rename the current directory to dest name.\n   */\n  async copyTo(r) {\n    if (!await this.exists())\n      throw Error(`dir ${this.path} not exists`);\n    const h = await r.exists() ? vt(se(r.path, this.name)) : r;\n    return await h.create(), await Promise.all((await this.children()).map((a) => a.copyTo(h))), h;\n  }\n  /**\n   * move directory, copy then remove current\n   */\n  async moveTo(r) {\n    const h = await this.copyTo(r);\n    return await this.remove(), h;\n  }\n}\nH = /* @__PURE__ */ new WeakMap(), Vt = /* @__PURE__ */ new WeakMap(), At = /* @__PURE__ */ new WeakMap();\nconst ye = /* @__PURE__ */ new Map();\nfunction _t(l, r = \"rw\") {\n  if (r === \"rw\") {\n    const h = ye.get(l) ?? new jt(l, r);\n    return ye.set(l, h), h;\n  }\n  return new jt(l, r);\n}\nasync function Ct(l, r, h = { overwrite: !0 }) {\n  if (r instanceof jt) {\n    await Ct(l, await r.stream(), h);\n    return;\n  }\n  const a = await (l instanceof jt ? l : _t(l, \"rw\")).createWriter();\n  try {\n    if (h.overwrite && await a.truncate(0), r instanceof ReadableStream) {\n      const f = r.getReader();\n      for (; ; ) {\n        const { done: d, value: p } = await f.read();\n        if (d) break;\n        await a.write(p);\n      }\n    } else\n      await a.write(r);\n  } catch (f) {\n    throw f;\n  } finally {\n    await a.close();\n  }\n}\nlet Qe = 0;\nconst Je = () => ++Qe;\nvar Y, Bt, Wt, Ft, Zt, it, Xt, It;\nconst $e = class Te {\n  constructor(r, h) {\n    N(this, Y), N(this, Bt), N(this, Wt), N(this, Ft), N(this, Zt), N(this, it, 0), N(this, Xt, /* @__PURE__ */ (() => {\n      let d = null;\n      return () => (M(this, it, I(this, it) + 1), d ?? (d = new Promise(async (p, n) => {\n        try {\n          const v = await je(\n            I(this, Zt),\n            I(this, Y),\n            I(this, Ft)\n          );\n          p([\n            v,\n            async () => {\n              M(this, it, I(this, it) - 1), !(I(this, it) > 0) && (d = null, await v.close());\n            }\n          ]);\n        } catch (v) {\n          n(v);\n        }\n      })));\n    })()), N(this, It, !1), M(this, Zt, Je()), M(this, Y, r), M(this, Ft, {\n      r: \"read-only\",\n      rw: \"readwrite\",\n      \"rw-unsafe\": \"readwrite-unsafe\"\n    }[h]);\n    const { parent: a, name: f } = te(r);\n    M(this, Wt, f), M(this, Bt, a);\n  }\n  get kind() {\n    return \"file\";\n  }\n  get path() {\n    return I(this, Y);\n  }\n  get name() {\n    return I(this, Wt);\n  }\n  get parent() {\n    return I(this, Bt) == null ? null : vt(I(this, Bt));\n  }\n  /**\n   * Random write to file\n   */\n  async createWriter() {\n    if (I(this, Ft) === \"read-only\") throw Error(\"file is read-only\");\n    if (I(this, It)) throw Error(\"Other writer have not been closed\");\n    M(this, It, !0);\n    const r = new TextEncoder(), [h, a] = await I(this, Xt).call(this);\n    let f = await h.getSize(), d = !1;\n    return {\n      write: async (p, n = {}) => {\n        if (d) throw Error(\"Writer is closed\");\n        const v = typeof p == \"string\" ? r.encode(p) : p, b = n.at ?? f, y = v.byteLength;\n        return f = b + y, await h.write(v, { at: b });\n      },\n      truncate: async (p) => {\n        if (d) throw Error(\"Writer is closed\");\n        await h.truncate(p), f > p && (f = p);\n      },\n      flush: async () => {\n        if (d) throw Error(\"Writer is closed\");\n        await h.flush();\n      },\n      close: async () => {\n        if (d) throw Error(\"Writer is closed\");\n        d = !0, M(this, It, !1), await a();\n      }\n    };\n  }\n  /**\n   * Random access to file\n   */\n  async createReader() {\n    const [r, h] = await I(this, Xt).call(this);\n    let a = !1, f = 0;\n    return {\n      read: async (d, p = {}) => {\n        if (a) throw Error(\"Reader is closed\");\n        const n = p.at ?? f, v = await r.read(n, d);\n        return f = n + v.byteLength, v;\n      },\n      getSize: async () => {\n        if (a) throw Error(\"Reader is closed\");\n        return await r.getSize();\n      },\n      close: async () => {\n        a || (a = !0, await h());\n      }\n    };\n  }\n  async text() {\n    return new TextDecoder().decode(await this.arrayBuffer());\n  }\n  async arrayBuffer() {\n    const r = await ot(I(this, Y), { create: !1, isFile: !0 });\n    return r == null ? new ArrayBuffer(0) : (await r.getFile()).arrayBuffer();\n  }\n  async stream() {\n    const r = await this.getOriginFile();\n    return r == null ? new ReadableStream({\n      pull: (h) => {\n        h.close();\n      }\n    }) : r.stream();\n  }\n  async getOriginFile() {\n    var r;\n    return (r = await ot(I(this, Y), { create: !1, isFile: !0 })) == null ? void 0 : r.getFile();\n  }\n  async getSize() {\n    const r = await ot(I(this, Y), { create: !1, isFile: !0 });\n    return r == null ? 0 : (await r.getFile()).size;\n  }\n  async exists() {\n    return await ot(I(this, Y), {\n      create: !1,\n      isFile: !0\n    }) instanceof FileSystemFileHandle;\n  }\n  async remove() {\n    if (I(this, it)) throw Error(\"exists unclosed reader/writer\");\n    await Ce(I(this, Y));\n  }\n  /**\n   * If the target is a file, use current overwrite the target;\n   * if the target is a folder, copy the current file into that folder.\n   */\n  async copyTo(r) {\n    if (!await this.exists())\n      throw Error(`file ${this.path} not exists`);\n    if (r instanceof Te)\n      return _t(r.path) === this ? this : (await Ct(r.path, this), _t(r.path));\n    if (r instanceof ze)\n      return await this.copyTo(_t(se(r.path, this.name)));\n    throw Error(\"Illegal target type\");\n  }\n  /**\n   * move file, copy then remove current\n   */\n  async moveTo(r) {\n    const h = await this.copyTo(r);\n    return await this.remove(), h;\n  }\n};\nY = /* @__PURE__ */ new WeakMap(), Bt = /* @__PURE__ */ new WeakMap(), Wt = /* @__PURE__ */ new WeakMap(), Ft = /* @__PURE__ */ new WeakMap(), Zt = /* @__PURE__ */ new WeakMap(), it = /* @__PURE__ */ new WeakMap(), Xt = /* @__PURE__ */ new WeakMap(), It = /* @__PURE__ */ new WeakMap();\nlet jt = $e;\nconst he = \"/.opfs-tools-temp-dir\";\nasync function Pe(l) {\n  try {\n    if (l.kind === \"file\") {\n      if (!await l.exists()) return !0;\n      const r = await l.createWriter();\n      await r.truncate(0), await r.close(), await l.remove();\n    } else\n      await l.remove();\n    return !0;\n  } catch (r) {\n    return console.warn(r), !1;\n  }\n}\nfunction qe() {\n  setInterval(async () => {\n    for (const l of await vt(he).children()) {\n      const r = /^\\d+-(\\d+)$/.exec(l.name);\n      (r == null || Date.now() - Number(r[1]) > 2592e5) && await Pe(l);\n    }\n  }, 60 * 1e3);\n}\nconst re = [];\nlet me = !1;\nasync function ti() {\n  if (globalThis.localStorage == null) return;\n  const l = \"OPFS_TOOLS_EXPIRES_TMP_FILES\";\n  me || (me = !0, globalThis.addEventListener(\"unload\", () => {\n    re.length !== 0 && localStorage.setItem(\n      l,\n      `${localStorage.getItem(l) ?? \"\"},${re.join(\",\")}`\n    );\n  }));\n  let r = localStorage.getItem(l) ?? \"\";\n  for (const h of r.split(\",\"))\n    h.length !== 0 && await Pe(_t(`${he}/${h}`)) && (r = r.replace(h, \"\"));\n  localStorage.setItem(l, r.replace(/,{2,}/g, \",\"));\n}\n(async function() {\n  var l;\n  globalThis.__opfs_tools_tmpfile_init__ !== !0 && (globalThis.__opfs_tools_tmpfile_init__ = !0, !(globalThis.FileSystemDirectoryHandle == null || globalThis.FileSystemFileHandle == null || ((l = globalThis.navigator) == null ? void 0 : l.storage.getDirectory) == null) && (qe(), await ti()));\n})();\nfunction Kt() {\n  const l = `${Math.random().toString().slice(2)}-${Date.now()}`;\n  return re.push(l), _t(`${he}/${l}`);\n}\nfunction ei(l) {\n  return l instanceof Error ? String(l) : typeof l == \"object\" ? JSON.stringify(l, (r, h) => h instanceof Error ? String(h) : h) : String(l);\n}\nfunction ii() {\n  const l = /* @__PURE__ */ new Date();\n  return `${l.getHours()}:${l.getMinutes()}:${l.getSeconds()}.${l.getMilliseconds()}`;\n}\nlet Le = 1;\nconst ke = Kt();\nlet gt = null;\nconst ve = [\"debug\", \"info\", \"warn\", \"error\"].reduce(\n  (l, r, h) => Object.assign(l, {\n    [r]: (...a) => {\n      Le <= h && (console[r](...a), gt == null || gt.write(\n        `[${r}][${ii()}]  ${a.map((f) => ei(f)).join(\" \")}\n`\n      ));\n    }\n  }),\n  {}\n), Gt = /* @__PURE__ */ new Map(), z = {\n  setLogLevel: (l) => {\n    Le = Gt.get(l) ?? 1;\n  },\n  ...ve,\n  create: (l) => Object.fromEntries(\n    Object.entries(ve).map(([r, h]) => [\n      r,\n      (...a) => h(l, ...a)\n    ])\n  ),\n  async dump() {\n    return await si, await (gt == null ? void 0 : gt.flush()), await ke.text();\n  }\n};\nGt.set(z.debug, 0);\nGt.set(z.info, 1);\nGt.set(z.warn, 2);\nGt.set(z.error, 3);\nasync function ni() {\n  try {\n    gt = await ke.createWriter(), z.info(navigator.userAgent), z.info(\"date: \" + (/* @__PURE__ */ new Date()).toLocaleDateString());\n  } catch (l) {\n    if (!(l instanceof Error)) throw l;\n    if (l.message.includes(\"createSyncAccessHandle is not a function\"))\n      console.warn(l);\n    else\n      throw l;\n  }\n}\nconst si = globalThis.navigator == null ? null : ni(), ri = () => {\n  let l, r = 16.6;\n  self.onmessage = (h) => {\n    h.data.event === \"start\" && (self.clearInterval(l), l = self.setInterval(() => {\n      self.postMessage({});\n    }, r)), h.data.event === \"stop\" && self.clearInterval(l);\n  };\n}, ai = () => {\n  const l = new Blob([`(${ri.toString()})()`]), r = URL.createObjectURL(l);\n  return new Worker(r);\n}, mt = /* @__PURE__ */ new Map();\nlet ae = 1, nt = null;\nglobalThis.Worker != null && (nt = ai(), nt.onmessage = () => {\n  ae += 1;\n  for (const [l, r] of mt)\n    if (ae % l === 0) for (const h of r) h();\n});\nconst De = (l, r) => {\n  const h = Math.round(r / 16.6), a = mt.get(h) ?? /* @__PURE__ */ new Set();\n  return a.add(l), mt.set(h, a), mt.size === 1 && a.size === 1 && (nt == null || nt.postMessage({ event: \"start\" })), () => {\n    a.delete(l), a.size === 0 && mt.delete(h), mt.size === 0 && (ae = 0, nt == null || nt.postMessage({ event: \"stop\" }));\n  };\n};\nclass oi {\n  /**\n   * @param {number} scaleFrom the length of the original array.\n   * @param {number} scaleTo The length of the new array.\n   * @param {?Object} details The extra configuration, if needed.\n   */\n  constructor(r, h, a) {\n    this.length_ = r, this.scaleFactor_ = (r - 1) / h, this.interpolate = this.cubic, a.method === \"point\" ? this.interpolate = this.point : a.method === \"linear\" ? this.interpolate = this.linear : a.method === \"sinc\" && (this.interpolate = this.sinc), this.tangentFactor_ = 1 - Math.max(0, Math.min(1, a.tension || 0)), this.sincFilterSize_ = a.sincFilterSize || 1, this.kernel_ = li(a.sincWindow || hi);\n  }\n  /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */\n  point(r, h) {\n    return this.getClippedInput_(Math.round(this.scaleFactor_ * r), h);\n  }\n  /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */\n  linear(r, h) {\n    r = this.scaleFactor_ * r;\n    let a = Math.floor(r);\n    return r -= a, (1 - r) * this.getClippedInput_(a, h) + r * this.getClippedInput_(a + 1, h);\n  }\n  /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */\n  cubic(r, h) {\n    r = this.scaleFactor_ * r;\n    let a = Math.floor(r), f = [this.getTangent_(a, h), this.getTangent_(a + 1, h)], d = [\n      this.getClippedInput_(a, h),\n      this.getClippedInput_(a + 1, h)\n    ];\n    r -= a;\n    let p = r * r, n = r * p;\n    return (2 * n - 3 * p + 1) * d[0] + (n - 2 * p + r) * f[0] + (-2 * n + 3 * p) * d[1] + (n - p) * f[1];\n  }\n  /**\n   * @param {number} t The index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   */\n  sinc(r, h) {\n    r = this.scaleFactor_ * r;\n    let a = Math.floor(r), f = a - this.sincFilterSize_ + 1, d = a + this.sincFilterSize_, p = 0;\n    for (let n = f; n <= d; n++)\n      p += this.kernel_(r - n) * this.getClippedInput_(n, h);\n    return p;\n  }\n  /**\n   * @param {number} k The scaled index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The tangent.\n   * @private\n   */\n  getTangent_(r, h) {\n    return this.tangentFactor_ * (this.getClippedInput_(r + 1, h) - this.getClippedInput_(r - 1, h)) / 2;\n  }\n  /**\n   * @param {number} t The scaled index to interpolate.\n   * @param {Array|TypedArray} samples the original array.\n   * @return {number} The interpolated value.\n   * @private\n   */\n  getClippedInput_(r, h) {\n    return 0 <= r && r < this.length_ ? h[r] : 0;\n  }\n}\nfunction hi(l) {\n  return Math.exp(-l / 2 * l / 2);\n}\nfunction li(l) {\n  return function(r) {\n    return fi(r) * l(r);\n  };\n}\nfunction fi(l) {\n  return l === 0 ? 1 : Math.sin(Math.PI * l) / (Math.PI * l);\n}\nclass di {\n  /**\n   * @param {number} order The order of the filter.\n   * @param {number} sampleRate The sample rate.\n   * @param {number} cutOff The cut off frequency.\n   */\n  constructor(r, h, a) {\n    let f = 2 * Math.PI * a / h, d = 0;\n    this.filters = [];\n    for (let p = 0; p <= r; p++)\n      p - r / 2 === 0 ? this.filters[p] = f : (this.filters[p] = Math.sin(f * (p - r / 2)) / (p - r / 2), this.filters[p] *= 0.54 - 0.46 * Math.cos(2 * Math.PI * p / r)), d = d + this.filters[p];\n    for (let p = 0; p <= r; p++)\n      this.filters[p] /= d;\n    this.z = this.initZ_();\n  }\n  /**\n   * @param {number} sample A sample of a sequence.\n   * @return {number}\n   */\n  filter(r) {\n    this.z.buf[this.z.pointer] = r;\n    let h = 0;\n    for (let a = 0, f = this.z.buf.length; a < f; a++)\n      h += this.filters[a] * this.z.buf[(this.z.pointer + a) % this.z.buf.length];\n    return this.z.pointer = (this.z.pointer + 1) % this.z.buf.length, h;\n  }\n  /**\n   * Reset the filter.\n   */\n  reset() {\n    this.z = this.initZ_();\n  }\n  /**\n   * Return the default value for z.\n   * @private\n   */\n  initZ_() {\n    let r = [];\n    for (let h = 0; h < this.filters.length - 1; h++)\n      r.push(0);\n    return {\n      buf: r,\n      pointer: 0\n    };\n  }\n}\nclass ci {\n  /**\n   * @param {number} order The order of the filter.\n   * @param {number} sampleRate The sample rate.\n   * @param {number} cutOff The cut off frequency.\n   */\n  constructor(r, h, a) {\n    let f = [];\n    for (let d = 0; d < r; d++)\n      f.push(this.getCoeffs_({\n        Fs: h,\n        Fc: a,\n        Q: 0.5 / Math.sin(Math.PI / (r * 2) * (d + 0.5))\n      }));\n    this.stages = [];\n    for (let d = 0; d < f.length; d++)\n      this.stages[d] = {\n        b0: f[d].b[0],\n        b1: f[d].b[1],\n        b2: f[d].b[2],\n        a1: f[d].a[0],\n        a2: f[d].a[1],\n        k: f[d].k,\n        z: [0, 0]\n      };\n  }\n  /**\n   * @param {number} sample A sample of a sequence.\n   * @return {number}\n   */\n  filter(r) {\n    let h = r;\n    for (let a = 0, f = this.stages.length; a < f; a++)\n      h = this.runStage_(a, h);\n    return h;\n  }\n  getCoeffs_(r) {\n    let h = {};\n    h.z = [0, 0], h.a = [], h.b = [];\n    let a = this.preCalc_(r, h);\n    return h.k = 1, h.b.push((1 - a.cw) / (2 * a.a0)), h.b.push(2 * h.b[0]), h.b.push(h.b[0]), h;\n  }\n  preCalc_(r, h) {\n    let a = {}, f = 2 * Math.PI * r.Fc / r.Fs;\n    return a.alpha = Math.sin(f) / (2 * r.Q), a.cw = Math.cos(f), a.a0 = 1 + a.alpha, h.a0 = a.a0, h.a.push(-2 * a.cw / a.a0), h.k = 1, h.a.push((1 - a.alpha) / a.a0), a;\n  }\n  runStage_(r, h) {\n    let a = h * this.stages[r].k - this.stages[r].a1 * this.stages[r].z[0] - this.stages[r].a2 * this.stages[r].z[1], f = this.stages[r].b0 * a + this.stages[r].b1 * this.stages[r].z[0] + this.stages[r].b2 * this.stages[r].z[1];\n    return this.stages[r].z[1] = this.stages[r].z[0], this.stages[r].z[0] = a, f;\n  }\n  /**\n   * Reset the filter.\n   */\n  reset() {\n    for (let r = 0; r < this.stages.length; r++)\n      this.stages[r].z = [0, 0];\n  }\n}\nconst ui = {\n  point: !1,\n  linear: !1,\n  cubic: !0,\n  sinc: !0\n}, we = {\n  IIR: 16,\n  FIR: 71\n}, pi = {\n  IIR: ci,\n  FIR: di\n};\nfunction _i(l, r, h, a = {}) {\n  let f = (h - r) / r + 1, d = new Float64Array(l.length * f);\n  a.method = a.method || \"cubic\";\n  let p = new oi(\n    l.length,\n    d.length,\n    {\n      method: a.method,\n      tension: a.tension || 0,\n      sincFilterSize: a.sincFilterSize || 6,\n      sincWindow: a.sincWindow || void 0\n    }\n  );\n  if (a.LPF === void 0 && (a.LPF = ui[a.method]), a.LPF) {\n    a.LPFType = a.LPFType || \"IIR\";\n    const n = pi[a.LPFType];\n    if (h > r) {\n      let v = new n(\n        a.LPFOrder || we[a.LPFType],\n        h,\n        r / 2\n      );\n      gi(\n        l,\n        d,\n        p,\n        v\n      );\n    } else {\n      let v = new n(\n        a.LPFOrder || we[a.LPFType],\n        r,\n        h / 2\n      );\n      yi(\n        l,\n        d,\n        p,\n        v\n      );\n    }\n  } else\n    Re(l, d, p);\n  return d;\n}\nfunction Re(l, r, h) {\n  for (let a = 0, f = r.length; a < f; a++)\n    r[a] = h.interpolate(a, l);\n}\nfunction gi(l, r, h, a) {\n  for (let f = 0, d = r.length; f < d; f++)\n    r[f] = a.filter(h.interpolate(f, l));\n  a.reset();\n  for (let f = r.length - 1; f >= 0; f--)\n    r[f] = a.filter(r[f]);\n}\nfunction yi(l, r, h, a) {\n  for (let f = 0, d = l.length; f < d; f++)\n    l[f] = a.filter(l[f]);\n  a.reset();\n  for (let f = l.length - 1; f >= 0; f--)\n    l[f] = a.filter(l[f]);\n  Re(l, r, h);\n}\nfunction Me(l) {\n  const r = new Float32Array(\n    l.map((a) => a.length).reduce((a, f) => a + f)\n  );\n  let h = 0;\n  for (const a of l)\n    r.set(a, h), h += a.length;\n  return r;\n}\nfunction mi(l) {\n  const r = [];\n  for (let h = 0; h < l.length; h += 1)\n    for (let a = 0; a < l[h].length; a += 1)\n      r[a] == null && (r[a] = []), r[a].push(l[h][a]);\n  return r.map(Me);\n}\nfunction le(l) {\n  if (l.format === \"f32-planar\") {\n    const r = [];\n    for (let h = 0; h < l.numberOfChannels; h += 1) {\n      const a = l.allocationSize({ planeIndex: h }), f = new ArrayBuffer(a);\n      l.copyTo(f, { planeIndex: h }), r.push(new Float32Array(f));\n    }\n    return r;\n  } else if (l.format === \"f32\") {\n    const r = new ArrayBuffer(l.allocationSize({ planeIndex: 0 }));\n    return l.copyTo(r, { planeIndex: 0 }), wi(new Float32Array(r), l.numberOfChannels);\n  } else if (l.format === \"s16\") {\n    const r = new ArrayBuffer(l.allocationSize({ planeIndex: 0 }));\n    return l.copyTo(r, { planeIndex: 0 }), vi(new Int16Array(r), l.numberOfChannels);\n  }\n  throw Error(\"Unsupported audio data format\");\n}\nfunction vi(l, r) {\n  const h = l.length / r, a = Array.from(\n    { length: r },\n    () => new Float32Array(h)\n  );\n  for (let f = 0; f < h; f++)\n    for (let d = 0; d < r; d++) {\n      const p = l[f * r + d];\n      a[d][f] = p / 32768;\n    }\n  return a;\n}\nfunction wi(l, r) {\n  const h = l.length / r, a = Array.from(\n    { length: r },\n    () => new Float32Array(h)\n  );\n  for (let f = 0; f < h; f++)\n    for (let d = 0; d < r; d++)\n      a[d][f] = l[f * r + d];\n  return a;\n}\nfunction Oe(l) {\n  return Array(l.numberOfChannels).fill(0).map((r, h) => l.getChannelData(h));\n}\nfunction en(l, r) {\n  const h = new Float32Array(\n    Me(le(l))\n  ).map((f) => f * r), a = new AudioData({\n    sampleRate: l.sampleRate,\n    numberOfChannels: l.numberOfChannels,\n    timestamp: l.timestamp,\n    format: l.format,\n    numberOfFrames: l.numberOfFrames,\n    data: h\n  });\n  return l.close(), a;\n}\nasync function nn(l, r) {\n  var p;\n  const h = {\n    type: r,\n    data: l\n  }, a = new ImageDecoder(h);\n  await Promise.all([a.completed, a.tracks.ready]);\n  let f = ((p = a.tracks.selectedTrack) == null ? void 0 : p.frameCount) ?? 1;\n  const d = [];\n  for (let n = 0; n < f; n += 1)\n    d.push((await a.decode({ frameIndex: n })).image);\n  return d;\n}\nfunction be(l) {\n  var a, f;\n  const r = Math.max(...l.map((d) => {\n    var p;\n    return ((p = d[0]) == null ? void 0 : p.length) ?? 0;\n  })), h = new Float32Array(r * 2);\n  for (let d = 0; d < r; d++) {\n    let p = 0, n = 0;\n    for (let v = 0; v < l.length; v++) {\n      const b = ((a = l[v][0]) == null ? void 0 : a[d]) ?? 0, y = ((f = l[v][1]) == null ? void 0 : f[d]) ?? b;\n      p += b, n += y;\n    }\n    h[d] = p, h[d + r] = n;\n  }\n  return h;\n}\nasync function bi(l, r, h) {\n  const a = l.length, f = Array(h.chanCount).fill(0).map(() => new Float32Array(0));\n  if (a === 0) return f;\n  const d = Math.max(...l.map((b) => b.length));\n  if (d === 0) return f;\n  if (globalThis.OfflineAudioContext == null)\n    return l.map(\n      (b) => new Float32Array(\n        _i(b, r, h.rate, { method: \"sinc\", LPF: !1 })\n      )\n    );\n  const p = new globalThis.OfflineAudioContext(\n    h.chanCount,\n    d * h.rate / r,\n    h.rate\n  ), n = p.createBufferSource(), v = p.createBuffer(a, d, r);\n  return l.forEach((b, y) => v.copyToChannel(b, y)), n.buffer = v, n.connect(p.destination), n.start(), Oe(await p.startRendering());\n}\nfunction Ne(l) {\n  return new Promise((r) => {\n    const h = De(() => {\n      h(), r();\n    }, l);\n  });\n}\nfunction Si(l, r, h) {\n  const a = h - r, f = new Float32Array(a);\n  let d = 0;\n  for (; d < a; )\n    f[d] = l[(r + d) % l.length], d += 1;\n  return f;\n}\nfunction fe(l, r) {\n  let h = !1;\n  async function a() {\n    const f = l.getReader();\n    for (; !h; ) {\n      const { value: d, done: p } = await f.read();\n      if (p) {\n        r.onDone();\n        return;\n      }\n      await r.onChunk(d);\n    }\n    f.releaseLock(), await l.cancel();\n  }\n  return a().catch(z.error), () => {\n    h = !0;\n  };\n}\nfunction xi(l) {\n  return l && l.__esModule && Object.prototype.hasOwnProperty.call(l, \"default\") ? l.default : l;\n}\nvar Ge = {};\n(function(l) {\n  var r = /* @__PURE__ */ function() {\n    var t = /* @__PURE__ */ new Date(), e = 4, i = 3, s = 2, o = 1, c = e, u = {\n      setLogLevel: function(_) {\n        _ == this.debug ? c = o : _ == this.info ? c = s : _ == this.warn ? c = i : (_ == this.error, c = e);\n      },\n      debug: function(_, g) {\n        console.debug === void 0 && (console.debug = console.log), o >= c && console.debug(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n      },\n      log: function(_, g) {\n        this.debug(_.msg);\n      },\n      info: function(_, g) {\n        s >= c && console.info(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n      },\n      warn: function(_, g) {\n        i >= c && console.warn(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n      },\n      error: function(_, g) {\n        e >= c && console.error(\"[\" + r.getDurationString(/* @__PURE__ */ new Date() - t, 1e3) + \"]\", \"[\" + _ + \"]\", g);\n      }\n    };\n    return u;\n  }();\n  r.getDurationString = function(t, e) {\n    var i;\n    function s(w, S) {\n      for (var U = \"\" + w, C = U.split(\".\"); C[0].length < S; )\n        C[0] = \"0\" + C[0];\n      return C.join(\".\");\n    }\n    t < 0 ? (i = !0, t = -t) : i = !1;\n    var o = e || 1, c = t / o, u = Math.floor(c / 3600);\n    c -= u * 3600;\n    var _ = Math.floor(c / 60);\n    c -= _ * 60;\n    var g = c * 1e3;\n    return c = Math.floor(c), g -= c * 1e3, g = Math.floor(g), (i ? \"-\" : \"\") + u + \":\" + s(_, 2) + \":\" + s(c, 2) + \".\" + s(g, 3);\n  }, r.printRanges = function(t) {\n    var e = t.length;\n    if (e > 0) {\n      for (var i = \"\", s = 0; s < e; s++)\n        s > 0 && (i += \",\"), i += \"[\" + r.getDurationString(t.start(s)) + \",\" + r.getDurationString(t.end(s)) + \"]\";\n      return i;\n    } else\n      return \"(empty)\";\n  }, l.Log = r;\n  var h = function(t) {\n    if (t instanceof ArrayBuffer)\n      this.buffer = t, this.dataview = new DataView(t);\n    else\n      throw \"Needs an array buffer\";\n    this.position = 0;\n  };\n  h.prototype.getPosition = function() {\n    return this.position;\n  }, h.prototype.getEndPosition = function() {\n    return this.buffer.byteLength;\n  }, h.prototype.getLength = function() {\n    return this.buffer.byteLength;\n  }, h.prototype.seek = function(t) {\n    var e = Math.max(0, Math.min(this.buffer.byteLength, t));\n    return this.position = isNaN(e) || !isFinite(e) ? 0 : e, !0;\n  }, h.prototype.isEos = function() {\n    return this.getPosition() >= this.getEndPosition();\n  }, h.prototype.readAnyInt = function(t, e) {\n    var i = 0;\n    if (this.position + t <= this.buffer.byteLength) {\n      switch (t) {\n        case 1:\n          e ? i = this.dataview.getInt8(this.position) : i = this.dataview.getUint8(this.position);\n          break;\n        case 2:\n          e ? i = this.dataview.getInt16(this.position) : i = this.dataview.getUint16(this.position);\n          break;\n        case 3:\n          if (e)\n            throw \"No method for reading signed 24 bits values\";\n          i = this.dataview.getUint8(this.position) << 16, i |= this.dataview.getUint8(this.position + 1) << 8, i |= this.dataview.getUint8(this.position + 2);\n          break;\n        case 4:\n          e ? i = this.dataview.getInt32(this.position) : i = this.dataview.getUint32(this.position);\n          break;\n        case 8:\n          if (e)\n            throw \"No method for reading signed 64 bits values\";\n          i = this.dataview.getUint32(this.position) << 32, i |= this.dataview.getUint32(this.position + 4);\n          break;\n        default:\n          throw \"readInt method not implemented for size: \" + t;\n      }\n      return this.position += t, i;\n    } else\n      throw \"Not enough bytes in buffer\";\n  }, h.prototype.readUint8 = function() {\n    return this.readAnyInt(1, !1);\n  }, h.prototype.readUint16 = function() {\n    return this.readAnyInt(2, !1);\n  }, h.prototype.readUint24 = function() {\n    return this.readAnyInt(3, !1);\n  }, h.prototype.readUint32 = function() {\n    return this.readAnyInt(4, !1);\n  }, h.prototype.readUint64 = function() {\n    return this.readAnyInt(8, !1);\n  }, h.prototype.readString = function(t) {\n    if (this.position + t <= this.buffer.byteLength) {\n      for (var e = \"\", i = 0; i < t; i++)\n        e += String.fromCharCode(this.readUint8());\n      return e;\n    } else\n      throw \"Not enough bytes in buffer\";\n  }, h.prototype.readCString = function() {\n    for (var t = []; ; ) {\n      var e = this.readUint8();\n      if (e !== 0)\n        t.push(e);\n      else\n        break;\n    }\n    return String.fromCharCode.apply(null, t);\n  }, h.prototype.readInt8 = function() {\n    return this.readAnyInt(1, !0);\n  }, h.prototype.readInt16 = function() {\n    return this.readAnyInt(2, !0);\n  }, h.prototype.readInt32 = function() {\n    return this.readAnyInt(4, !0);\n  }, h.prototype.readInt64 = function() {\n    return this.readAnyInt(8, !1);\n  }, h.prototype.readUint8Array = function(t) {\n    for (var e = new Uint8Array(t), i = 0; i < t; i++)\n      e[i] = this.readUint8();\n    return e;\n  }, h.prototype.readInt16Array = function(t) {\n    for (var e = new Int16Array(t), i = 0; i < t; i++)\n      e[i] = this.readInt16();\n    return e;\n  }, h.prototype.readUint16Array = function(t) {\n    for (var e = new Int16Array(t), i = 0; i < t; i++)\n      e[i] = this.readUint16();\n    return e;\n  }, h.prototype.readUint32Array = function(t) {\n    for (var e = new Uint32Array(t), i = 0; i < t; i++)\n      e[i] = this.readUint32();\n    return e;\n  }, h.prototype.readInt32Array = function(t) {\n    for (var e = new Int32Array(t), i = 0; i < t; i++)\n      e[i] = this.readInt32();\n    return e;\n  }, l.MP4BoxStream = h;\n  var a = function(t, e, i) {\n    this._byteOffset = e || 0, t instanceof ArrayBuffer ? this.buffer = t : typeof t == \"object\" ? (this.dataView = t, e && (this._byteOffset += e)) : this.buffer = new ArrayBuffer(t || 0), this.position = 0, this.endianness = i ?? a.LITTLE_ENDIAN;\n  };\n  a.prototype = {}, a.prototype.getPosition = function() {\n    return this.position;\n  }, a.prototype._realloc = function(t) {\n    if (this._dynamicSize) {\n      var e = this._byteOffset + this.position + t, i = this._buffer.byteLength;\n      if (e <= i) {\n        e > this._byteLength && (this._byteLength = e);\n        return;\n      }\n      for (i < 1 && (i = 1); e > i; )\n        i *= 2;\n      var s = new ArrayBuffer(i), o = new Uint8Array(this._buffer), c = new Uint8Array(s, 0, o.length);\n      c.set(o), this.buffer = s, this._byteLength = e;\n    }\n  }, a.prototype._trimAlloc = function() {\n    if (this._byteLength != this._buffer.byteLength) {\n      var t = new ArrayBuffer(this._byteLength), e = new Uint8Array(t), i = new Uint8Array(this._buffer, 0, e.length);\n      e.set(i), this.buffer = t;\n    }\n  }, a.BIG_ENDIAN = !1, a.LITTLE_ENDIAN = !0, a.prototype._byteLength = 0, Object.defineProperty(\n    a.prototype,\n    \"byteLength\",\n    { get: function() {\n      return this._byteLength - this._byteOffset;\n    } }\n  ), Object.defineProperty(\n    a.prototype,\n    \"buffer\",\n    {\n      get: function() {\n        return this._trimAlloc(), this._buffer;\n      },\n      set: function(t) {\n        this._buffer = t, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._buffer.byteLength;\n      }\n    }\n  ), Object.defineProperty(\n    a.prototype,\n    \"byteOffset\",\n    {\n      get: function() {\n        return this._byteOffset;\n      },\n      set: function(t) {\n        this._byteOffset = t, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._buffer.byteLength;\n      }\n    }\n  ), Object.defineProperty(\n    a.prototype,\n    \"dataView\",\n    {\n      get: function() {\n        return this._dataView;\n      },\n      set: function(t) {\n        this._byteOffset = t.byteOffset, this._buffer = t.buffer, this._dataView = new DataView(this._buffer, this._byteOffset), this._byteLength = this._byteOffset + t.byteLength;\n      }\n    }\n  ), a.prototype.seek = function(t) {\n    var e = Math.max(0, Math.min(this.byteLength, t));\n    this.position = isNaN(e) || !isFinite(e) ? 0 : e;\n  }, a.prototype.isEof = function() {\n    return this.position >= this._byteLength;\n  }, a.prototype.mapUint8Array = function(t) {\n    this._realloc(t * 1);\n    var e = new Uint8Array(this._buffer, this.byteOffset + this.position, t);\n    return this.position += t * 1, e;\n  }, a.prototype.readInt32Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 4;\n    var i = new Int32Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readInt16Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 2;\n    var i = new Int16Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readInt8Array = function(t) {\n    t = t ?? this.byteLength - this.position;\n    var e = new Int8Array(t);\n    return a.memcpy(\n      e.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * e.BYTES_PER_ELEMENT\n    ), this.position += e.byteLength, e;\n  }, a.prototype.readUint32Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 4;\n    var i = new Uint32Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readUint16Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 2;\n    var i = new Uint16Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readUint8Array = function(t) {\n    t = t ?? this.byteLength - this.position;\n    var e = new Uint8Array(t);\n    return a.memcpy(\n      e.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * e.BYTES_PER_ELEMENT\n    ), this.position += e.byteLength, e;\n  }, a.prototype.readFloat64Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 8;\n    var i = new Float64Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readFloat32Array = function(t, e) {\n    t = t ?? this.byteLength - this.position / 4;\n    var i = new Float32Array(t);\n    return a.memcpy(\n      i.buffer,\n      0,\n      this.buffer,\n      this.byteOffset + this.position,\n      t * i.BYTES_PER_ELEMENT\n    ), a.arrayToNative(i, e ?? this.endianness), this.position += i.byteLength, i;\n  }, a.prototype.readInt32 = function(t) {\n    var e = this._dataView.getInt32(this.position, t ?? this.endianness);\n    return this.position += 4, e;\n  }, a.prototype.readInt16 = function(t) {\n    var e = this._dataView.getInt16(this.position, t ?? this.endianness);\n    return this.position += 2, e;\n  }, a.prototype.readInt8 = function() {\n    var t = this._dataView.getInt8(this.position);\n    return this.position += 1, t;\n  }, a.prototype.readUint32 = function(t) {\n    var e = this._dataView.getUint32(this.position, t ?? this.endianness);\n    return this.position += 4, e;\n  }, a.prototype.readUint16 = function(t) {\n    var e = this._dataView.getUint16(this.position, t ?? this.endianness);\n    return this.position += 2, e;\n  }, a.prototype.readUint8 = function() {\n    var t = this._dataView.getUint8(this.position);\n    return this.position += 1, t;\n  }, a.prototype.readFloat32 = function(t) {\n    var e = this._dataView.getFloat32(this.position, t ?? this.endianness);\n    return this.position += 4, e;\n  }, a.prototype.readFloat64 = function(t) {\n    var e = this._dataView.getFloat64(this.position, t ?? this.endianness);\n    return this.position += 8, e;\n  }, a.endianness = new Int8Array(new Int16Array([1]).buffer)[0] > 0, a.memcpy = function(t, e, i, s, o) {\n    var c = new Uint8Array(t, e, o), u = new Uint8Array(i, s, o);\n    c.set(u);\n  }, a.arrayToNative = function(t, e) {\n    return e == this.endianness ? t : this.flipArrayEndianness(t);\n  }, a.nativeToEndian = function(t, e) {\n    return this.endianness == e ? t : this.flipArrayEndianness(t);\n  }, a.flipArrayEndianness = function(t) {\n    for (var e = new Uint8Array(t.buffer, t.byteOffset, t.byteLength), i = 0; i < t.byteLength; i += t.BYTES_PER_ELEMENT)\n      for (var s = i + t.BYTES_PER_ELEMENT - 1, o = i; s > o; s--, o++) {\n        var c = e[o];\n        e[o] = e[s], e[s] = c;\n      }\n    return t;\n  }, a.prototype.failurePosition = 0, String.fromCharCodeUint8 = function(t) {\n    for (var e = [], i = 0; i < t.length; i++)\n      e[i] = t[i];\n    return String.fromCharCode.apply(null, e);\n  }, a.prototype.readString = function(t, e) {\n    return e == null || e == \"ASCII\" ? String.fromCharCodeUint8.apply(null, [this.mapUint8Array(t ?? this.byteLength - this.position)]) : new TextDecoder(e).decode(this.mapUint8Array(t));\n  }, a.prototype.readCString = function(t) {\n    var e = this.byteLength - this.position, i = new Uint8Array(this._buffer, this._byteOffset + this.position), s = e;\n    t != null && (s = Math.min(t, e));\n    for (var o = 0; o < s && i[o] !== 0; o++) ;\n    var c = String.fromCharCodeUint8.apply(null, [this.mapUint8Array(o)]);\n    return t != null ? this.position += s - o : o != e && (this.position += 1), c;\n  };\n  var f = Math.pow(2, 32);\n  a.prototype.readInt64 = function() {\n    return this.readInt32() * f + this.readUint32();\n  }, a.prototype.readUint64 = function() {\n    return this.readUint32() * f + this.readUint32();\n  }, a.prototype.readInt64 = function() {\n    return this.readUint32() * f + this.readUint32();\n  }, a.prototype.readUint24 = function() {\n    return (this.readUint8() << 16) + (this.readUint8() << 8) + this.readUint8();\n  }, l.DataStream = a, a.prototype.save = function(t) {\n    var e = new Blob([this.buffer]);\n    if (window.URL && URL.createObjectURL) {\n      var i = window.URL.createObjectURL(e), s = document.createElement(\"a\");\n      document.body.appendChild(s), s.setAttribute(\"href\", i), s.setAttribute(\"download\", t), s.setAttribute(\"target\", \"_self\"), s.click(), window.URL.revokeObjectURL(i);\n    } else\n      throw \"DataStream.save: Can't create object URL.\";\n  }, a.prototype._dynamicSize = !0, Object.defineProperty(\n    a.prototype,\n    \"dynamicSize\",\n    {\n      get: function() {\n        return this._dynamicSize;\n      },\n      set: function(t) {\n        t || this._trimAlloc(), this._dynamicSize = t;\n      }\n    }\n  ), a.prototype.shift = function(t) {\n    var e = new ArrayBuffer(this._byteLength - t), i = new Uint8Array(e), s = new Uint8Array(this._buffer, t, i.length);\n    i.set(s), this.buffer = e, this.position -= t;\n  }, a.prototype.writeInt32Array = function(t, e) {\n    if (this._realloc(t.length * 4), t instanceof Int32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapInt32Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeInt32(t[i], e);\n  }, a.prototype.writeInt16Array = function(t, e) {\n    if (this._realloc(t.length * 2), t instanceof Int16Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapInt16Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeInt16(t[i], e);\n  }, a.prototype.writeInt8Array = function(t) {\n    if (this._realloc(t.length * 1), t instanceof Int8Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapInt8Array(t.length);\n    else\n      for (var e = 0; e < t.length; e++)\n        this.writeInt8(t[e]);\n  }, a.prototype.writeUint32Array = function(t, e) {\n    if (this._realloc(t.length * 4), t instanceof Uint32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapUint32Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeUint32(t[i], e);\n  }, a.prototype.writeUint16Array = function(t, e) {\n    if (this._realloc(t.length * 2), t instanceof Uint16Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapUint16Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeUint16(t[i], e);\n  }, a.prototype.writeUint8Array = function(t) {\n    if (this._realloc(t.length * 1), t instanceof Uint8Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapUint8Array(t.length);\n    else\n      for (var e = 0; e < t.length; e++)\n        this.writeUint8(t[e]);\n  }, a.prototype.writeFloat64Array = function(t, e) {\n    if (this._realloc(t.length * 8), t instanceof Float64Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapFloat64Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeFloat64(t[i], e);\n  }, a.prototype.writeFloat32Array = function(t, e) {\n    if (this._realloc(t.length * 4), t instanceof Float32Array && this.byteOffset + this.position % t.BYTES_PER_ELEMENT === 0)\n      a.memcpy(\n        this._buffer,\n        this.byteOffset + this.position,\n        t.buffer,\n        0,\n        t.byteLength\n      ), this.mapFloat32Array(t.length, e);\n    else\n      for (var i = 0; i < t.length; i++)\n        this.writeFloat32(t[i], e);\n  }, a.prototype.writeInt32 = function(t, e) {\n    this._realloc(4), this._dataView.setInt32(this.position, t, e ?? this.endianness), this.position += 4;\n  }, a.prototype.writeInt16 = function(t, e) {\n    this._realloc(2), this._dataView.setInt16(this.position, t, e ?? this.endianness), this.position += 2;\n  }, a.prototype.writeInt8 = function(t) {\n    this._realloc(1), this._dataView.setInt8(this.position, t), this.position += 1;\n  }, a.prototype.writeUint32 = function(t, e) {\n    this._realloc(4), this._dataView.setUint32(this.position, t, e ?? this.endianness), this.position += 4;\n  }, a.prototype.writeUint16 = function(t, e) {\n    this._realloc(2), this._dataView.setUint16(this.position, t, e ?? this.endianness), this.position += 2;\n  }, a.prototype.writeUint8 = function(t) {\n    this._realloc(1), this._dataView.setUint8(this.position, t), this.position += 1;\n  }, a.prototype.writeFloat32 = function(t, e) {\n    this._realloc(4), this._dataView.setFloat32(this.position, t, e ?? this.endianness), this.position += 4;\n  }, a.prototype.writeFloat64 = function(t, e) {\n    this._realloc(8), this._dataView.setFloat64(this.position, t, e ?? this.endianness), this.position += 8;\n  }, a.prototype.writeUCS2String = function(t, e, i) {\n    i == null && (i = t.length);\n    for (var s = 0; s < t.length && s < i; s++)\n      this.writeUint16(t.charCodeAt(s), e);\n    for (; s < i; s++)\n      this.writeUint16(0);\n  }, a.prototype.writeString = function(t, e, i) {\n    var s = 0;\n    if (e == null || e == \"ASCII\")\n      if (i != null) {\n        var o = Math.min(t.length, i);\n        for (s = 0; s < o; s++)\n          this.writeUint8(t.charCodeAt(s));\n        for (; s < i; s++)\n          this.writeUint8(0);\n      } else\n        for (s = 0; s < t.length; s++)\n          this.writeUint8(t.charCodeAt(s));\n    else\n      this.writeUint8Array(new TextEncoder(e).encode(t.substring(0, i)));\n  }, a.prototype.writeCString = function(t, e) {\n    var i = 0;\n    if (e != null) {\n      var s = Math.min(t.length, e);\n      for (i = 0; i < s; i++)\n        this.writeUint8(t.charCodeAt(i));\n      for (; i < e; i++)\n        this.writeUint8(0);\n    } else {\n      for (i = 0; i < t.length; i++)\n        this.writeUint8(t.charCodeAt(i));\n      this.writeUint8(0);\n    }\n  }, a.prototype.writeStruct = function(t, e) {\n    for (var i = 0; i < t.length; i += 2) {\n      var s = t[i + 1];\n      this.writeType(s, e[t[i]], e);\n    }\n  }, a.prototype.writeType = function(t, e, i) {\n    var s;\n    if (typeof t == \"function\")\n      return t(this, e);\n    if (typeof t == \"object\" && !(t instanceof Array))\n      return t.set(this, e, i);\n    var o = null, c = \"ASCII\", u = this.position;\n    switch (typeof t == \"string\" && /:/.test(t) && (s = t.split(\":\"), t = s[0], o = parseInt(s[1])), typeof t == \"string\" && /,/.test(t) && (s = t.split(\",\"), t = s[0], c = parseInt(s[1])), t) {\n      case \"uint8\":\n        this.writeUint8(e);\n        break;\n      case \"int8\":\n        this.writeInt8(e);\n        break;\n      case \"uint16\":\n        this.writeUint16(e, this.endianness);\n        break;\n      case \"int16\":\n        this.writeInt16(e, this.endianness);\n        break;\n      case \"uint32\":\n        this.writeUint32(e, this.endianness);\n        break;\n      case \"int32\":\n        this.writeInt32(e, this.endianness);\n        break;\n      case \"float32\":\n        this.writeFloat32(e, this.endianness);\n        break;\n      case \"float64\":\n        this.writeFloat64(e, this.endianness);\n        break;\n      case \"uint16be\":\n        this.writeUint16(e, a.BIG_ENDIAN);\n        break;\n      case \"int16be\":\n        this.writeInt16(e, a.BIG_ENDIAN);\n        break;\n      case \"uint32be\":\n        this.writeUint32(e, a.BIG_ENDIAN);\n        break;\n      case \"int32be\":\n        this.writeInt32(e, a.BIG_ENDIAN);\n        break;\n      case \"float32be\":\n        this.writeFloat32(e, a.BIG_ENDIAN);\n        break;\n      case \"float64be\":\n        this.writeFloat64(e, a.BIG_ENDIAN);\n        break;\n      case \"uint16le\":\n        this.writeUint16(e, a.LITTLE_ENDIAN);\n        break;\n      case \"int16le\":\n        this.writeInt16(e, a.LITTLE_ENDIAN);\n        break;\n      case \"uint32le\":\n        this.writeUint32(e, a.LITTLE_ENDIAN);\n        break;\n      case \"int32le\":\n        this.writeInt32(e, a.LITTLE_ENDIAN);\n        break;\n      case \"float32le\":\n        this.writeFloat32(e, a.LITTLE_ENDIAN);\n        break;\n      case \"float64le\":\n        this.writeFloat64(e, a.LITTLE_ENDIAN);\n        break;\n      case \"cstring\":\n        this.writeCString(e, o);\n        break;\n      case \"string\":\n        this.writeString(e, c, o);\n        break;\n      case \"u16string\":\n        this.writeUCS2String(e, this.endianness, o);\n        break;\n      case \"u16stringle\":\n        this.writeUCS2String(e, a.LITTLE_ENDIAN, o);\n        break;\n      case \"u16stringbe\":\n        this.writeUCS2String(e, a.BIG_ENDIAN, o);\n        break;\n      default:\n        if (t.length == 3) {\n          for (var _ = t[1], g = 0; g < e.length; g++)\n            this.writeType(_, e[g]);\n          break;\n        } else {\n          this.writeStruct(t, e);\n          break;\n        }\n    }\n    o != null && (this.position = u, this._realloc(o), this.position = u + o);\n  }, a.prototype.writeUint64 = function(t) {\n    var e = Math.floor(t / f);\n    this.writeUint32(e), this.writeUint32(t & 4294967295);\n  }, a.prototype.writeUint24 = function(t) {\n    this.writeUint8((t & 16711680) >> 16), this.writeUint8((t & 65280) >> 8), this.writeUint8(t & 255);\n  }, a.prototype.adjustUint32 = function(t, e) {\n    var i = this.position;\n    this.seek(t), this.writeUint32(e), this.seek(i);\n  }, a.prototype.mapInt32Array = function(t, e) {\n    this._realloc(t * 4);\n    var i = new Int32Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n  }, a.prototype.mapInt16Array = function(t, e) {\n    this._realloc(t * 2);\n    var i = new Int16Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 2, i;\n  }, a.prototype.mapInt8Array = function(t) {\n    this._realloc(t * 1);\n    var e = new Int8Array(this._buffer, this.byteOffset + this.position, t);\n    return this.position += t * 1, e;\n  }, a.prototype.mapUint32Array = function(t, e) {\n    this._realloc(t * 4);\n    var i = new Uint32Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n  }, a.prototype.mapUint16Array = function(t, e) {\n    this._realloc(t * 2);\n    var i = new Uint16Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 2, i;\n  }, a.prototype.mapFloat64Array = function(t, e) {\n    this._realloc(t * 8);\n    var i = new Float64Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 8, i;\n  }, a.prototype.mapFloat32Array = function(t, e) {\n    this._realloc(t * 4);\n    var i = new Float32Array(this._buffer, this.byteOffset + this.position, t);\n    return a.arrayToNative(i, e ?? this.endianness), this.position += t * 4, i;\n  };\n  var d = function(t) {\n    this.buffers = [], this.bufferIndex = -1, t && (this.insertBuffer(t), this.bufferIndex = 0);\n  };\n  d.prototype = new a(new ArrayBuffer(), 0, a.BIG_ENDIAN), d.prototype.initialized = function() {\n    var t;\n    return this.bufferIndex > -1 ? !0 : this.buffers.length > 0 ? (t = this.buffers[0], t.fileStart === 0 ? (this.buffer = t, this.bufferIndex = 0, r.debug(\"MultiBufferStream\", \"Stream ready for parsing\"), !0) : (r.warn(\"MultiBufferStream\", \"The first buffer should have a fileStart of 0\"), this.logBufferLevel(), !1)) : (r.warn(\"MultiBufferStream\", \"No buffer to start parsing from\"), this.logBufferLevel(), !1);\n  }, ArrayBuffer.concat = function(t, e) {\n    r.debug(\"ArrayBuffer\", \"Trying to create a new buffer of size: \" + (t.byteLength + e.byteLength));\n    var i = new Uint8Array(t.byteLength + e.byteLength);\n    return i.set(new Uint8Array(t), 0), i.set(new Uint8Array(e), t.byteLength), i.buffer;\n  }, d.prototype.reduceBuffer = function(t, e, i) {\n    var s;\n    return s = new Uint8Array(i), s.set(new Uint8Array(t, e, i)), s.buffer.fileStart = t.fileStart + e, s.buffer.usedBytes = 0, s.buffer;\n  }, d.prototype.insertBuffer = function(t) {\n    for (var e = !0, i = 0; i < this.buffers.length; i++) {\n      var s = this.buffers[i];\n      if (t.fileStart <= s.fileStart) {\n        if (t.fileStart === s.fileStart)\n          if (t.byteLength > s.byteLength) {\n            this.buffers.splice(i, 1), i--;\n            continue;\n          } else\n            r.warn(\"MultiBufferStream\", \"Buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \") already appended, ignoring\");\n        else\n          t.fileStart + t.byteLength <= s.fileStart || (t = this.reduceBuffer(t, 0, s.fileStart - t.fileStart)), r.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \")\"), this.buffers.splice(i, 0, t), i === 0 && (this.buffer = t);\n        e = !1;\n        break;\n      } else if (t.fileStart < s.fileStart + s.byteLength) {\n        var o = s.fileStart + s.byteLength - t.fileStart, c = t.byteLength - o;\n        if (c > 0)\n          t = this.reduceBuffer(t, o, c);\n        else {\n          e = !1;\n          break;\n        }\n      }\n    }\n    e && (r.debug(\"MultiBufferStream\", \"Appending new buffer (fileStart: \" + t.fileStart + \" - Length: \" + t.byteLength + \")\"), this.buffers.push(t), i === 0 && (this.buffer = t));\n  }, d.prototype.logBufferLevel = function(t) {\n    var e, i, s, o, c = [], u, _ = \"\";\n    for (s = 0, o = 0, e = 0; e < this.buffers.length; e++)\n      i = this.buffers[e], e === 0 ? (u = {}, c.push(u), u.start = i.fileStart, u.end = i.fileStart + i.byteLength, _ += \"[\" + u.start + \"-\") : u.end === i.fileStart ? u.end = i.fileStart + i.byteLength : (u = {}, u.start = i.fileStart, _ += c[c.length - 1].end - 1 + \"], [\" + u.start + \"-\", u.end = i.fileStart + i.byteLength, c.push(u)), s += i.usedBytes, o += i.byteLength;\n    c.length > 0 && (_ += u.end - 1 + \"]\");\n    var g = t ? r.info : r.debug;\n    this.buffers.length === 0 ? g(\"MultiBufferStream\", \"No more buffer in memory\") : g(\"MultiBufferStream\", \"\" + this.buffers.length + \" stored buffer(s) (\" + s + \"/\" + o + \" bytes), continuous ranges: \" + _);\n  }, d.prototype.cleanBuffers = function() {\n    var t, e;\n    for (t = 0; t < this.buffers.length; t++)\n      e = this.buffers[t], e.usedBytes === e.byteLength && (r.debug(\"MultiBufferStream\", \"Removing buffer #\" + t), this.buffers.splice(t, 1), t--);\n  }, d.prototype.mergeNextBuffer = function() {\n    var t;\n    if (this.bufferIndex + 1 < this.buffers.length)\n      if (t = this.buffers[this.bufferIndex + 1], t.fileStart === this.buffer.fileStart + this.buffer.byteLength) {\n        var e = this.buffer.byteLength, i = this.buffer.usedBytes, s = this.buffer.fileStart;\n        return this.buffers[this.bufferIndex] = ArrayBuffer.concat(this.buffer, t), this.buffer = this.buffers[this.bufferIndex], this.buffers.splice(this.bufferIndex + 1, 1), this.buffer.usedBytes = i, this.buffer.fileStart = s, r.debug(\"ISOFile\", \"Concatenating buffer for box parsing (length: \" + e + \"->\" + this.buffer.byteLength + \")\"), !0;\n      } else\n        return !1;\n    else\n      return !1;\n  }, d.prototype.findPosition = function(t, e, i) {\n    var s, o = null, c = -1;\n    for (t === !0 ? s = 0 : s = this.bufferIndex; s < this.buffers.length && (o = this.buffers[s], o.fileStart <= e); ) {\n      c = s, i && (o.fileStart + o.byteLength <= e ? o.usedBytes = o.byteLength : o.usedBytes = e - o.fileStart, this.logBufferLevel());\n      s++;\n    }\n    return c !== -1 ? (o = this.buffers[c], o.fileStart + o.byteLength >= e ? (r.debug(\"MultiBufferStream\", \"Found position in existing buffer #\" + c), c) : -1) : -1;\n  }, d.prototype.findEndContiguousBuf = function(t) {\n    var e, i, s, o = t !== void 0 ? t : this.bufferIndex;\n    if (i = this.buffers[o], this.buffers.length > o + 1)\n      for (e = o + 1; e < this.buffers.length && (s = this.buffers[e], s.fileStart === i.fileStart + i.byteLength); e++)\n        i = s;\n    return i.fileStart + i.byteLength;\n  }, d.prototype.getEndFilePositionAfter = function(t) {\n    var e = this.findPosition(!0, t, !1);\n    return e !== -1 ? this.findEndContiguousBuf(e) : t;\n  }, d.prototype.addUsedBytes = function(t) {\n    this.buffer.usedBytes += t, this.logBufferLevel();\n  }, d.prototype.setAllUsedBytes = function() {\n    this.buffer.usedBytes = this.buffer.byteLength, this.logBufferLevel();\n  }, d.prototype.seek = function(t, e, i) {\n    var s;\n    return s = this.findPosition(e, t, i), s !== -1 ? (this.buffer = this.buffers[s], this.bufferIndex = s, this.position = t - this.buffer.fileStart, r.debug(\"MultiBufferStream\", \"Repositioning parser at buffer position: \" + this.position), !0) : (r.debug(\"MultiBufferStream\", \"Position \" + t + \" not found in buffered data\"), !1);\n  }, d.prototype.getPosition = function() {\n    if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null)\n      throw \"Error accessing position in the MultiBufferStream\";\n    return this.buffers[this.bufferIndex].fileStart + this.position;\n  }, d.prototype.getLength = function() {\n    return this.byteLength;\n  }, d.prototype.getEndPosition = function() {\n    if (this.bufferIndex === -1 || this.buffers[this.bufferIndex] === null)\n      throw \"Error accessing position in the MultiBufferStream\";\n    return this.buffers[this.bufferIndex].fileStart + this.byteLength;\n  }, l.MultiBufferStream = d;\n  var p = function() {\n    var t = 3, e = 4, i = 5, s = 6, o = [];\n    o[t] = \"ES_Descriptor\", o[e] = \"DecoderConfigDescriptor\", o[i] = \"DecoderSpecificInfo\", o[s] = \"SLConfigDescriptor\", this.getDescriptorName = function(_) {\n      return o[_];\n    };\n    var c = this, u = {};\n    return this.parseOneDescriptor = function(_) {\n      var g = 0, w, S, U;\n      for (w = _.readUint8(), U = _.readUint8(); U & 128; )\n        g = (U & 127) << 7, U = _.readUint8();\n      return g += U & 127, r.debug(\"MPEG4DescriptorParser\", \"Found \" + (o[w] || \"Descriptor \" + w) + \", size \" + g + \" at position \" + _.getPosition()), o[w] ? S = new u[o[w]](g) : S = new u.Descriptor(g), S.parse(_), S;\n    }, u.Descriptor = function(_, g) {\n      this.tag = _, this.size = g, this.descs = [];\n    }, u.Descriptor.prototype.parse = function(_) {\n      this.data = _.readUint8Array(this.size);\n    }, u.Descriptor.prototype.findDescriptor = function(_) {\n      for (var g = 0; g < this.descs.length; g++)\n        if (this.descs[g].tag == _)\n          return this.descs[g];\n      return null;\n    }, u.Descriptor.prototype.parseRemainingDescriptors = function(_) {\n      for (var g = _.position; _.position < g + this.size; ) {\n        var w = c.parseOneDescriptor(_);\n        this.descs.push(w);\n      }\n    }, u.ES_Descriptor = function(_) {\n      u.Descriptor.call(this, t, _);\n    }, u.ES_Descriptor.prototype = new u.Descriptor(), u.ES_Descriptor.prototype.parse = function(_) {\n      if (this.ES_ID = _.readUint16(), this.flags = _.readUint8(), this.size -= 3, this.flags & 128 ? (this.dependsOn_ES_ID = _.readUint16(), this.size -= 2) : this.dependsOn_ES_ID = 0, this.flags & 64) {\n        var g = _.readUint8();\n        this.URL = _.readString(g), this.size -= g + 1;\n      } else\n        this.URL = \"\";\n      this.flags & 32 ? (this.OCR_ES_ID = _.readUint16(), this.size -= 2) : this.OCR_ES_ID = 0, this.parseRemainingDescriptors(_);\n    }, u.ES_Descriptor.prototype.getOTI = function(_) {\n      var g = this.findDescriptor(e);\n      return g ? g.oti : 0;\n    }, u.ES_Descriptor.prototype.getAudioConfig = function(_) {\n      var g = this.findDescriptor(e);\n      if (!g) return null;\n      var w = g.findDescriptor(i);\n      if (w && w.data) {\n        var S = (w.data[0] & 248) >> 3;\n        return S === 31 && w.data.length >= 2 && (S = 32 + ((w.data[0] & 7) << 3) + ((w.data[1] & 224) >> 5)), S;\n      } else\n        return null;\n    }, u.DecoderConfigDescriptor = function(_) {\n      u.Descriptor.call(this, e, _);\n    }, u.DecoderConfigDescriptor.prototype = new u.Descriptor(), u.DecoderConfigDescriptor.prototype.parse = function(_) {\n      this.oti = _.readUint8(), this.streamType = _.readUint8(), this.bufferSize = _.readUint24(), this.maxBitrate = _.readUint32(), this.avgBitrate = _.readUint32(), this.size -= 13, this.parseRemainingDescriptors(_);\n    }, u.DecoderSpecificInfo = function(_) {\n      u.Descriptor.call(this, i, _);\n    }, u.DecoderSpecificInfo.prototype = new u.Descriptor(), u.SLConfigDescriptor = function(_) {\n      u.Descriptor.call(this, s, _);\n    }, u.SLConfigDescriptor.prototype = new u.Descriptor(), this;\n  };\n  l.MPEG4DescriptorParser = p;\n  var n = {\n    ERR_INVALID_DATA: -1,\n    ERR_NOT_ENOUGH_DATA: 0,\n    OK: 1,\n    // Boxes to be created with default parsing\n    BASIC_BOXES: [\"mdat\", \"idat\", \"free\", \"skip\", \"meco\", \"strk\"],\n    FULL_BOXES: [\"hmhd\", \"nmhd\", \"iods\", \"xml \", \"bxml\", \"ipro\", \"mere\"],\n    CONTAINER_BOXES: [\n      [\"moov\", [\"trak\", \"pssh\"]],\n      [\"trak\"],\n      [\"edts\"],\n      [\"mdia\"],\n      [\"minf\"],\n      [\"dinf\"],\n      [\"stbl\", [\"sgpd\", \"sbgp\"]],\n      [\"mvex\", [\"trex\"]],\n      [\"moof\", [\"traf\"]],\n      [\"traf\", [\"trun\", \"sgpd\", \"sbgp\"]],\n      [\"vttc\"],\n      [\"tref\"],\n      [\"iref\"],\n      [\"mfra\", [\"tfra\"]],\n      [\"meco\"],\n      [\"hnti\"],\n      [\"hinf\"],\n      [\"strk\"],\n      [\"strd\"],\n      [\"sinf\"],\n      [\"rinf\"],\n      [\"schi\"],\n      [\"trgr\"],\n      [\"udta\", [\"kind\"]],\n      [\"iprp\", [\"ipma\"]],\n      [\"ipco\"]\n    ],\n    // Boxes effectively created\n    boxCodes: [],\n    fullBoxCodes: [],\n    containerBoxCodes: [],\n    sampleEntryCodes: {},\n    sampleGroupEntryCodes: [],\n    trackGroupTypes: [],\n    UUIDBoxes: {},\n    UUIDs: [],\n    initialize: function() {\n      n.FullBox.prototype = new n.Box(), n.ContainerBox.prototype = new n.Box(), n.SampleEntry.prototype = new n.Box(), n.TrackGroupTypeBox.prototype = new n.FullBox(), n.BASIC_BOXES.forEach(function(t) {\n        n.createBoxCtor(t);\n      }), n.FULL_BOXES.forEach(function(t) {\n        n.createFullBoxCtor(t);\n      }), n.CONTAINER_BOXES.forEach(function(t) {\n        n.createContainerBoxCtor(t[0], null, t[1]);\n      });\n    },\n    Box: function(t, e, i) {\n      this.type = t, this.size = e, this.uuid = i;\n    },\n    FullBox: function(t, e, i) {\n      n.Box.call(this, t, e, i), this.flags = 0, this.version = 0;\n    },\n    ContainerBox: function(t, e, i) {\n      n.Box.call(this, t, e, i), this.boxes = [];\n    },\n    SampleEntry: function(t, e, i, s) {\n      n.ContainerBox.call(this, t, e), this.hdr_size = i, this.start = s;\n    },\n    SampleGroupEntry: function(t) {\n      this.grouping_type = t;\n    },\n    TrackGroupTypeBox: function(t, e) {\n      n.FullBox.call(this, t, e);\n    },\n    createBoxCtor: function(t, e) {\n      n.boxCodes.push(t), n[t + \"Box\"] = function(i) {\n        n.Box.call(this, t, i);\n      }, n[t + \"Box\"].prototype = new n.Box(), e && (n[t + \"Box\"].prototype.parse = e);\n    },\n    createFullBoxCtor: function(t, e) {\n      n[t + \"Box\"] = function(i) {\n        n.FullBox.call(this, t, i);\n      }, n[t + \"Box\"].prototype = new n.FullBox(), n[t + \"Box\"].prototype.parse = function(i) {\n        this.parseFullHeader(i), e && e.call(this, i);\n      };\n    },\n    addSubBoxArrays: function(t) {\n      if (t) {\n        this.subBoxNames = t;\n        for (var e = t.length, i = 0; i < e; i++)\n          this[t[i] + \"s\"] = [];\n      }\n    },\n    createContainerBoxCtor: function(t, e, i) {\n      n[t + \"Box\"] = function(s) {\n        n.ContainerBox.call(this, t, s), n.addSubBoxArrays.call(this, i);\n      }, n[t + \"Box\"].prototype = new n.ContainerBox(), e && (n[t + \"Box\"].prototype.parse = e);\n    },\n    createMediaSampleEntryCtor: function(t, e, i) {\n      n.sampleEntryCodes[t] = [], n[t + \"SampleEntry\"] = function(s, o) {\n        n.SampleEntry.call(this, s, o), n.addSubBoxArrays.call(this, i);\n      }, n[t + \"SampleEntry\"].prototype = new n.SampleEntry(), e && (n[t + \"SampleEntry\"].prototype.parse = e);\n    },\n    createSampleEntryCtor: function(t, e, i, s) {\n      n.sampleEntryCodes[t].push(e), n[e + \"SampleEntry\"] = function(o) {\n        n[t + \"SampleEntry\"].call(this, e, o), n.addSubBoxArrays.call(this, s);\n      }, n[e + \"SampleEntry\"].prototype = new n[t + \"SampleEntry\"](), i && (n[e + \"SampleEntry\"].prototype.parse = i);\n    },\n    createEncryptedSampleEntryCtor: function(t, e, i) {\n      n.createSampleEntryCtor.call(this, t, e, i, [\"sinf\"]);\n    },\n    createSampleGroupCtor: function(t, e) {\n      n[t + \"SampleGroupEntry\"] = function(i) {\n        n.SampleGroupEntry.call(this, t, i);\n      }, n[t + \"SampleGroupEntry\"].prototype = new n.SampleGroupEntry(), e && (n[t + \"SampleGroupEntry\"].prototype.parse = e);\n    },\n    createTrackGroupCtor: function(t, e) {\n      n[t + \"TrackGroupTypeBox\"] = function(i) {\n        n.TrackGroupTypeBox.call(this, t, i);\n      }, n[t + \"TrackGroupTypeBox\"].prototype = new n.TrackGroupTypeBox(), e && (n[t + \"TrackGroupTypeBox\"].prototype.parse = e);\n    },\n    createUUIDBox: function(t, e, i, s) {\n      n.UUIDs.push(t), n.UUIDBoxes[t] = function(o) {\n        e ? n.FullBox.call(this, \"uuid\", o, t) : i ? n.ContainerBox.call(this, \"uuid\", o, t) : n.Box.call(this, \"uuid\", o, t);\n      }, n.UUIDBoxes[t].prototype = e ? new n.FullBox() : i ? new n.ContainerBox() : new n.Box(), s && (e ? n.UUIDBoxes[t].prototype.parse = function(o) {\n        this.parseFullHeader(o), s && s.call(this, o);\n      } : n.UUIDBoxes[t].prototype.parse = s);\n    }\n  };\n  n.initialize(), n.TKHD_FLAG_ENABLED = 1, n.TKHD_FLAG_IN_MOVIE = 2, n.TKHD_FLAG_IN_PREVIEW = 4, n.TFHD_FLAG_BASE_DATA_OFFSET = 1, n.TFHD_FLAG_SAMPLE_DESC = 2, n.TFHD_FLAG_SAMPLE_DUR = 8, n.TFHD_FLAG_SAMPLE_SIZE = 16, n.TFHD_FLAG_SAMPLE_FLAGS = 32, n.TFHD_FLAG_DUR_EMPTY = 65536, n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF = 131072, n.TRUN_FLAGS_DATA_OFFSET = 1, n.TRUN_FLAGS_FIRST_FLAG = 4, n.TRUN_FLAGS_DURATION = 256, n.TRUN_FLAGS_SIZE = 512, n.TRUN_FLAGS_FLAGS = 1024, n.TRUN_FLAGS_CTS_OFFSET = 2048, n.Box.prototype.add = function(t) {\n    return this.addBox(new n[t + \"Box\"]());\n  }, n.Box.prototype.addBox = function(t) {\n    return this.boxes.push(t), this[t.type + \"s\"] ? this[t.type + \"s\"].push(t) : this[t.type] = t, t;\n  }, n.Box.prototype.set = function(t, e) {\n    return this[t] = e, this;\n  }, n.Box.prototype.addEntry = function(t, e) {\n    var i = e || \"entries\";\n    return this[i] || (this[i] = []), this[i].push(t), this;\n  }, l.BoxParser = n, n.parseUUID = function(t) {\n    return n.parseHex16(t);\n  }, n.parseHex16 = function(t) {\n    for (var e = \"\", i = 0; i < 16; i++) {\n      var s = t.readUint8().toString(16);\n      e += s.length === 1 ? \"0\" + s : s;\n    }\n    return e;\n  }, n.parseOneBox = function(t, e, i) {\n    var s, o = t.getPosition(), c = 0, u, _;\n    if (t.getEndPosition() - o < 8)\n      return r.debug(\"BoxParser\", \"Not enough data in stream to parse the type and size of the box\"), { code: n.ERR_NOT_ENOUGH_DATA };\n    if (i && i < 8)\n      return r.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a new box\"), { code: n.ERR_NOT_ENOUGH_DATA };\n    var g = t.readUint32(), w = t.readString(4), S = w;\n    if (r.debug(\"BoxParser\", \"Found box of type '\" + w + \"' and size \" + g + \" at position \" + o), c = 8, w == \"uuid\") {\n      if (t.getEndPosition() - t.getPosition() < 16 || i - c < 16)\n        return t.seek(o), r.debug(\"BoxParser\", \"Not enough bytes left in the parent box to parse a UUID box\"), { code: n.ERR_NOT_ENOUGH_DATA };\n      _ = n.parseUUID(t), c += 16, S = _;\n    }\n    if (g == 1) {\n      if (t.getEndPosition() - t.getPosition() < 8 || i && i - c < 8)\n        return t.seek(o), r.warn(\"BoxParser\", 'Not enough data in stream to parse the extended size of the \"' + w + '\" box'), { code: n.ERR_NOT_ENOUGH_DATA };\n      g = t.readUint64(), c += 8;\n    } else if (g === 0) {\n      if (i)\n        g = i;\n      else if (w !== \"mdat\")\n        return r.error(\"BoxParser\", \"Unlimited box size not supported for type: '\" + w + \"'\"), s = new n.Box(w, g), { code: n.OK, box: s, size: s.size };\n    }\n    return g !== 0 && g < c ? (r.error(\"BoxParser\", \"Box of type \" + w + \" has an invalid size \" + g + \" (too small to be a box)\"), { code: n.ERR_NOT_ENOUGH_DATA, type: w, size: g, hdr_size: c, start: o }) : g !== 0 && i && g > i ? (r.error(\"BoxParser\", \"Box of type '\" + w + \"' has a size \" + g + \" greater than its container size \" + i), { code: n.ERR_NOT_ENOUGH_DATA, type: w, size: g, hdr_size: c, start: o }) : g !== 0 && o + g > t.getEndPosition() ? (t.seek(o), r.info(\"BoxParser\", \"Not enough data in stream to parse the entire '\" + w + \"' box\"), { code: n.ERR_NOT_ENOUGH_DATA, type: w, size: g, hdr_size: c, start: o }) : e ? { code: n.OK, type: w, size: g, hdr_size: c, start: o } : (n[w + \"Box\"] ? s = new n[w + \"Box\"](g) : w !== \"uuid\" ? (r.warn(\"BoxParser\", \"Unknown box type: '\" + w + \"'\"), s = new n.Box(w, g), s.has_unparsed_data = !0) : n.UUIDBoxes[_] ? s = new n.UUIDBoxes[_](g) : (r.warn(\"BoxParser\", \"Unknown uuid type: '\" + _ + \"'\"), s = new n.Box(w, g), s.uuid = _, s.has_unparsed_data = !0), s.hdr_size = c, s.start = o, s.write === n.Box.prototype.write && s.type !== \"mdat\" && (r.info(\"BoxParser\", \"'\" + S + \"' box writing not yet implemented, keeping unparsed data in memory for later write\"), s.parseDataAndRewind(t)), s.parse(t), u = t.getPosition() - (s.start + s.size), u < 0 ? (r.warn(\"BoxParser\", \"Parsing of box '\" + S + \"' did not read the entire indicated box data size (missing \" + -u + \" bytes), seeking forward\"), t.seek(s.start + s.size)) : u > 0 && (r.error(\"BoxParser\", \"Parsing of box '\" + S + \"' read \" + u + \" more bytes than the indicated box data size, seeking backwards\"), s.size !== 0 && t.seek(s.start + s.size)), { code: n.OK, box: s, size: s.size });\n  }, n.Box.prototype.parse = function(t) {\n    this.type != \"mdat\" ? this.data = t.readUint8Array(this.size - this.hdr_size) : this.size === 0 ? t.seek(t.getEndPosition()) : t.seek(this.start + this.size);\n  }, n.Box.prototype.parseDataAndRewind = function(t) {\n    this.data = t.readUint8Array(this.size - this.hdr_size), t.position -= this.size - this.hdr_size;\n  }, n.FullBox.prototype.parseDataAndRewind = function(t) {\n    this.parseFullHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size), this.hdr_size -= 4, t.position -= this.size - this.hdr_size;\n  }, n.FullBox.prototype.parseFullHeader = function(t) {\n    this.version = t.readUint8(), this.flags = t.readUint24(), this.hdr_size += 4;\n  }, n.FullBox.prototype.parse = function(t) {\n    this.parseFullHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size);\n  }, n.ContainerBox.prototype.parse = function(t) {\n    for (var e, i; t.getPosition() < this.start + this.size; )\n      if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK)\n        if (i = e.box, this.boxes.push(i), this.subBoxNames && this.subBoxNames.indexOf(i.type) != -1)\n          this[this.subBoxNames[this.subBoxNames.indexOf(i.type)] + \"s\"].push(i);\n        else {\n          var s = i.type !== \"uuid\" ? i.type : i.uuid;\n          this[s] ? r.warn(\"Box of type \" + s + \" already stored in field of this type\") : this[s] = i;\n        }\n      else\n        return;\n  }, n.Box.prototype.parseLanguage = function(t) {\n    this.language = t.readUint16();\n    var e = [];\n    e[0] = this.language >> 10 & 31, e[1] = this.language >> 5 & 31, e[2] = this.language & 31, this.languageString = String.fromCharCode(e[0] + 96, e[1] + 96, e[2] + 96);\n  }, n.SAMPLE_ENTRY_TYPE_VISUAL = \"Visual\", n.SAMPLE_ENTRY_TYPE_AUDIO = \"Audio\", n.SAMPLE_ENTRY_TYPE_HINT = \"Hint\", n.SAMPLE_ENTRY_TYPE_METADATA = \"Metadata\", n.SAMPLE_ENTRY_TYPE_SUBTITLE = \"Subtitle\", n.SAMPLE_ENTRY_TYPE_SYSTEM = \"System\", n.SAMPLE_ENTRY_TYPE_TEXT = \"Text\", n.SampleEntry.prototype.parseHeader = function(t) {\n    t.readUint8Array(6), this.data_reference_index = t.readUint16(), this.hdr_size += 8;\n  }, n.SampleEntry.prototype.parse = function(t) {\n    this.parseHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size);\n  }, n.SampleEntry.prototype.parseDataAndRewind = function(t) {\n    this.parseHeader(t), this.data = t.readUint8Array(this.size - this.hdr_size), this.hdr_size -= 8, t.position -= this.size - this.hdr_size;\n  }, n.SampleEntry.prototype.parseFooter = function(t) {\n    n.ContainerBox.prototype.parse.call(this, t);\n  }, n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_HINT), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SYSTEM), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_TEXT), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, function(t) {\n    var e;\n    this.parseHeader(t), t.readUint16(), t.readUint16(), t.readUint32Array(3), this.width = t.readUint16(), this.height = t.readUint16(), this.horizresolution = t.readUint32(), this.vertresolution = t.readUint32(), t.readUint32(), this.frame_count = t.readUint16(), e = Math.min(31, t.readUint8()), this.compressorname = t.readString(e), e < 31 && t.readString(31 - e), this.depth = t.readUint16(), t.readUint16(), this.parseFooter(t);\n  }), n.createMediaSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, function(t) {\n    this.parseHeader(t), t.readUint32Array(2), this.channel_count = t.readUint16(), this.samplesize = t.readUint16(), t.readUint16(), t.readUint16(), this.samplerate = t.readUint32() / 65536, this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc2\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"avc4\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"av01\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"hvc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"hev1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvc1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvi1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvs1\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vvcN\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vp08\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"vp09\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"mp4a\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"ac-3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"ec-3\"), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"Opus\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_VISUAL, \"encv\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_AUDIO, \"enca\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"encu\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SYSTEM, \"encs\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_TEXT, \"enct\"), n.createEncryptedSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"encm\"), n.createBoxCtor(\"a1lx\", function(t) {\n    var e = t.readUint8() & 1, i = ((e & 1) + 1) * 16;\n    this.layer_size = [];\n    for (var s = 0; s < 3; s++)\n      i == 16 ? this.layer_size[s] = t.readUint16() : this.layer_size[s] = t.readUint32();\n  }), n.createBoxCtor(\"a1op\", function(t) {\n    this.op_index = t.readUint8();\n  }), n.createFullBoxCtor(\"auxC\", function(t) {\n    this.aux_type = t.readCString();\n    var e = this.size - this.hdr_size - (this.aux_type.length + 1);\n    this.aux_subtype = t.readUint8Array(e);\n  }), n.createBoxCtor(\"av1C\", function(t) {\n    var e = t.readUint8();\n    if (e >> 7 & !1) {\n      r.error(\"av1C marker problem\");\n      return;\n    }\n    if (this.version = e & 127, this.version !== 1) {\n      r.error(\"av1C version \" + this.version + \" not supported\");\n      return;\n    }\n    if (e = t.readUint8(), this.seq_profile = e >> 5 & 7, this.seq_level_idx_0 = e & 31, e = t.readUint8(), this.seq_tier_0 = e >> 7 & 1, this.high_bitdepth = e >> 6 & 1, this.twelve_bit = e >> 5 & 1, this.monochrome = e >> 4 & 1, this.chroma_subsampling_x = e >> 3 & 1, this.chroma_subsampling_y = e >> 2 & 1, this.chroma_sample_position = e & 3, e = t.readUint8(), this.reserved_1 = e >> 5 & 7, this.reserved_1 !== 0) {\n      r.error(\"av1C reserved_1 parsing problem\");\n      return;\n    }\n    if (this.initial_presentation_delay_present = e >> 4 & 1, this.initial_presentation_delay_present === 1)\n      this.initial_presentation_delay_minus_one = e & 15;\n    else if (this.reserved_2 = e & 15, this.reserved_2 !== 0) {\n      r.error(\"av1C reserved_2 parsing problem\");\n      return;\n    }\n    var i = this.size - this.hdr_size - 4;\n    this.configOBUs = t.readUint8Array(i);\n  }), n.createBoxCtor(\"avcC\", function(t) {\n    var e, i;\n    for (this.configurationVersion = t.readUint8(), this.AVCProfileIndication = t.readUint8(), this.profile_compatibility = t.readUint8(), this.AVCLevelIndication = t.readUint8(), this.lengthSizeMinusOne = t.readUint8() & 3, this.nb_SPS_nalus = t.readUint8() & 31, i = this.size - this.hdr_size - 6, this.SPS = [], e = 0; e < this.nb_SPS_nalus; e++)\n      this.SPS[e] = {}, this.SPS[e].length = t.readUint16(), this.SPS[e].nalu = t.readUint8Array(this.SPS[e].length), i -= 2 + this.SPS[e].length;\n    for (this.nb_PPS_nalus = t.readUint8(), i--, this.PPS = [], e = 0; e < this.nb_PPS_nalus; e++)\n      this.PPS[e] = {}, this.PPS[e].length = t.readUint16(), this.PPS[e].nalu = t.readUint8Array(this.PPS[e].length), i -= 2 + this.PPS[e].length;\n    i > 0 && (this.ext = t.readUint8Array(i));\n  }), n.createBoxCtor(\"btrt\", function(t) {\n    this.bufferSizeDB = t.readUint32(), this.maxBitrate = t.readUint32(), this.avgBitrate = t.readUint32();\n  }), n.createBoxCtor(\"clap\", function(t) {\n    this.cleanApertureWidthN = t.readUint32(), this.cleanApertureWidthD = t.readUint32(), this.cleanApertureHeightN = t.readUint32(), this.cleanApertureHeightD = t.readUint32(), this.horizOffN = t.readUint32(), this.horizOffD = t.readUint32(), this.vertOffN = t.readUint32(), this.vertOffD = t.readUint32();\n  }), n.createBoxCtor(\"clli\", function(t) {\n    this.max_content_light_level = t.readUint16(), this.max_pic_average_light_level = t.readUint16();\n  }), n.createFullBoxCtor(\"co64\", function(t) {\n    var e, i;\n    if (e = t.readUint32(), this.chunk_offsets = [], this.version === 0)\n      for (i = 0; i < e; i++)\n        this.chunk_offsets.push(t.readUint64());\n  }), n.createFullBoxCtor(\"CoLL\", function(t) {\n    this.maxCLL = t.readUint16(), this.maxFALL = t.readUint16();\n  }), n.createBoxCtor(\"colr\", function(t) {\n    if (this.colour_type = t.readString(4), this.colour_type === \"nclx\") {\n      this.colour_primaries = t.readUint16(), this.transfer_characteristics = t.readUint16(), this.matrix_coefficients = t.readUint16();\n      var e = t.readUint8();\n      this.full_range_flag = e >> 7;\n    } else this.colour_type === \"rICC\" ? this.ICC_profile = t.readUint8Array(this.size - 4) : this.colour_type === \"prof\" && (this.ICC_profile = t.readUint8Array(this.size - 4));\n  }), n.createFullBoxCtor(\"cprt\", function(t) {\n    this.parseLanguage(t), this.notice = t.readCString();\n  }), n.createFullBoxCtor(\"cslg\", function(t) {\n    this.version === 0 && (this.compositionToDTSShift = t.readInt32(), this.leastDecodeToDisplayDelta = t.readInt32(), this.greatestDecodeToDisplayDelta = t.readInt32(), this.compositionStartTime = t.readInt32(), this.compositionEndTime = t.readInt32());\n  }), n.createFullBoxCtor(\"ctts\", function(t) {\n    var e, i;\n    if (e = t.readUint32(), this.sample_counts = [], this.sample_offsets = [], this.version === 0)\n      for (i = 0; i < e; i++) {\n        this.sample_counts.push(t.readUint32());\n        var s = t.readInt32();\n        s < 0 && r.warn(\"BoxParser\", \"ctts box uses negative values without using version 1\"), this.sample_offsets.push(s);\n      }\n    else if (this.version == 1)\n      for (i = 0; i < e; i++)\n        this.sample_counts.push(t.readUint32()), this.sample_offsets.push(t.readInt32());\n  }), n.createBoxCtor(\"dac3\", function(t) {\n    var e = t.readUint8(), i = t.readUint8(), s = t.readUint8();\n    this.fscod = e >> 6, this.bsid = e >> 1 & 31, this.bsmod = (e & 1) << 2 | i >> 6 & 3, this.acmod = i >> 3 & 7, this.lfeon = i >> 2 & 1, this.bit_rate_code = i & 3 | s >> 5 & 7;\n  }), n.createBoxCtor(\"dec3\", function(t) {\n    var e = t.readUint16();\n    this.data_rate = e >> 3, this.num_ind_sub = e & 7, this.ind_subs = [];\n    for (var i = 0; i < this.num_ind_sub + 1; i++) {\n      var s = {};\n      this.ind_subs.push(s);\n      var o = t.readUint8(), c = t.readUint8(), u = t.readUint8();\n      s.fscod = o >> 6, s.bsid = o >> 1 & 31, s.bsmod = (o & 1) << 4 | c >> 4 & 15, s.acmod = c >> 1 & 7, s.lfeon = c & 1, s.num_dep_sub = u >> 1 & 15, s.num_dep_sub > 0 && (s.chan_loc = (u & 1) << 8 | t.readUint8());\n    }\n  }), n.createFullBoxCtor(\"dfLa\", function(t) {\n    var e = 127, i = 128, s = [], o = [\n      \"STREAMINFO\",\n      \"PADDING\",\n      \"APPLICATION\",\n      \"SEEKTABLE\",\n      \"VORBIS_COMMENT\",\n      \"CUESHEET\",\n      \"PICTURE\",\n      \"RESERVED\"\n    ];\n    this.parseFullHeader(t);\n    do {\n      var c = t.readUint8(), u = Math.min(\n        c & e,\n        o.length - 1\n      );\n      if (u ? t.readUint8Array(t.readUint24()) : (t.readUint8Array(13), this.samplerate = t.readUint32() >> 12, t.readUint8Array(20)), s.push(o[u]), c & i)\n        break;\n    } while (!0);\n    this.numMetadataBlocks = s.length + \" (\" + s.join(\", \") + \")\";\n  }), n.createBoxCtor(\"dimm\", function(t) {\n    this.bytessent = t.readUint64();\n  }), n.createBoxCtor(\"dmax\", function(t) {\n    this.time = t.readUint32();\n  }), n.createBoxCtor(\"dmed\", function(t) {\n    this.bytessent = t.readUint64();\n  }), n.createBoxCtor(\"dOps\", function(t) {\n    if (this.Version = t.readUint8(), this.OutputChannelCount = t.readUint8(), this.PreSkip = t.readUint16(), this.InputSampleRate = t.readUint32(), this.OutputGain = t.readInt16(), this.ChannelMappingFamily = t.readUint8(), this.ChannelMappingFamily !== 0) {\n      this.StreamCount = t.readUint8(), this.CoupledCount = t.readUint8(), this.ChannelMapping = [];\n      for (var e = 0; e < this.OutputChannelCount; e++)\n        this.ChannelMapping[e] = t.readUint8();\n    }\n  }), n.createFullBoxCtor(\"dref\", function(t) {\n    var e, i;\n    this.entries = [];\n    for (var s = t.readUint32(), o = 0; o < s; o++)\n      if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK)\n        i = e.box, this.entries.push(i);\n      else\n        return;\n  }), n.createBoxCtor(\"drep\", function(t) {\n    this.bytessent = t.readUint64();\n  }), n.createFullBoxCtor(\"elng\", function(t) {\n    this.extended_language = t.readString(this.size - this.hdr_size);\n  }), n.createFullBoxCtor(\"elst\", function(t) {\n    this.entries = [];\n    for (var e = t.readUint32(), i = 0; i < e; i++) {\n      var s = {};\n      this.entries.push(s), this.version === 1 ? (s.segment_duration = t.readUint64(), s.media_time = t.readInt64()) : (s.segment_duration = t.readUint32(), s.media_time = t.readInt32()), s.media_rate_integer = t.readInt16(), s.media_rate_fraction = t.readInt16();\n    }\n  }), n.createFullBoxCtor(\"emsg\", function(t) {\n    this.version == 1 ? (this.timescale = t.readUint32(), this.presentation_time = t.readUint64(), this.event_duration = t.readUint32(), this.id = t.readUint32(), this.scheme_id_uri = t.readCString(), this.value = t.readCString()) : (this.scheme_id_uri = t.readCString(), this.value = t.readCString(), this.timescale = t.readUint32(), this.presentation_time_delta = t.readUint32(), this.event_duration = t.readUint32(), this.id = t.readUint32());\n    var e = this.size - this.hdr_size - (4 * 4 + (this.scheme_id_uri.length + 1) + (this.value.length + 1));\n    this.version == 1 && (e -= 4), this.message_data = t.readUint8Array(e);\n  }), n.createFullBoxCtor(\"esds\", function(t) {\n    var e = t.readUint8Array(this.size - this.hdr_size);\n    if (typeof p < \"u\") {\n      var i = new p();\n      this.esd = i.parseOneDescriptor(new a(e.buffer, 0, a.BIG_ENDIAN));\n    }\n  }), n.createBoxCtor(\"fiel\", function(t) {\n    this.fieldCount = t.readUint8(), this.fieldOrdering = t.readUint8();\n  }), n.createBoxCtor(\"frma\", function(t) {\n    this.data_format = t.readString(4);\n  }), n.createBoxCtor(\"ftyp\", function(t) {\n    var e = this.size - this.hdr_size;\n    this.major_brand = t.readString(4), this.minor_version = t.readUint32(), e -= 8, this.compatible_brands = [];\n    for (var i = 0; e >= 4; )\n      this.compatible_brands[i] = t.readString(4), e -= 4, i++;\n  }), n.createFullBoxCtor(\"hdlr\", function(t) {\n    this.version === 0 && (t.readUint32(), this.handler = t.readString(4), t.readUint32Array(3), this.name = t.readString(this.size - this.hdr_size - 20), this.name[this.name.length - 1] === \"\\0\" && (this.name = this.name.slice(0, -1)));\n  }), n.createBoxCtor(\"hvcC\", function(t) {\n    var e, i, s, o;\n    this.configurationVersion = t.readUint8(), o = t.readUint8(), this.general_profile_space = o >> 6, this.general_tier_flag = (o & 32) >> 5, this.general_profile_idc = o & 31, this.general_profile_compatibility = t.readUint32(), this.general_constraint_indicator = t.readUint8Array(6), this.general_level_idc = t.readUint8(), this.min_spatial_segmentation_idc = t.readUint16() & 4095, this.parallelismType = t.readUint8() & 3, this.chroma_format_idc = t.readUint8() & 3, this.bit_depth_luma_minus8 = t.readUint8() & 7, this.bit_depth_chroma_minus8 = t.readUint8() & 7, this.avgFrameRate = t.readUint16(), o = t.readUint8(), this.constantFrameRate = o >> 6, this.numTemporalLayers = (o & 13) >> 3, this.temporalIdNested = (o & 4) >> 2, this.lengthSizeMinusOne = o & 3, this.nalu_arrays = [];\n    var c = t.readUint8();\n    for (e = 0; e < c; e++) {\n      var u = [];\n      this.nalu_arrays.push(u), o = t.readUint8(), u.completeness = (o & 128) >> 7, u.nalu_type = o & 63;\n      var _ = t.readUint16();\n      for (i = 0; i < _; i++) {\n        var g = {};\n        u.push(g), s = t.readUint16(), g.data = t.readUint8Array(s);\n      }\n    }\n  }), n.createFullBoxCtor(\"iinf\", function(t) {\n    var e;\n    this.version === 0 ? this.entry_count = t.readUint16() : this.entry_count = t.readUint32(), this.item_infos = [];\n    for (var i = 0; i < this.entry_count; i++)\n      if (e = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), e.code === n.OK)\n        e.box.type !== \"infe\" && r.error(\"BoxParser\", \"Expected 'infe' box, got \" + e.box.type), this.item_infos[i] = e.box;\n      else\n        return;\n  }), n.createFullBoxCtor(\"iloc\", function(t) {\n    var e;\n    e = t.readUint8(), this.offset_size = e >> 4 & 15, this.length_size = e & 15, e = t.readUint8(), this.base_offset_size = e >> 4 & 15, this.version === 1 || this.version === 2 ? this.index_size = e & 15 : this.index_size = 0, this.items = [];\n    var i = 0;\n    if (this.version < 2)\n      i = t.readUint16();\n    else if (this.version === 2)\n      i = t.readUint32();\n    else\n      throw \"version of iloc box not supported\";\n    for (var s = 0; s < i; s++) {\n      var o = {};\n      if (this.items.push(o), this.version < 2)\n        o.item_ID = t.readUint16();\n      else if (this.version === 2)\n        o.item_ID = t.readUint16();\n      else\n        throw \"version of iloc box not supported\";\n      switch (this.version === 1 || this.version === 2 ? o.construction_method = t.readUint16() & 15 : o.construction_method = 0, o.data_reference_index = t.readUint16(), this.base_offset_size) {\n        case 0:\n          o.base_offset = 0;\n          break;\n        case 4:\n          o.base_offset = t.readUint32();\n          break;\n        case 8:\n          o.base_offset = t.readUint64();\n          break;\n        default:\n          throw \"Error reading base offset size\";\n      }\n      var c = t.readUint16();\n      o.extents = [];\n      for (var u = 0; u < c; u++) {\n        var _ = {};\n        if (o.extents.push(_), this.version === 1 || this.version === 2)\n          switch (this.index_size) {\n            case 0:\n              _.extent_index = 0;\n              break;\n            case 4:\n              _.extent_index = t.readUint32();\n              break;\n            case 8:\n              _.extent_index = t.readUint64();\n              break;\n            default:\n              throw \"Error reading extent index\";\n          }\n        switch (this.offset_size) {\n          case 0:\n            _.extent_offset = 0;\n            break;\n          case 4:\n            _.extent_offset = t.readUint32();\n            break;\n          case 8:\n            _.extent_offset = t.readUint64();\n            break;\n          default:\n            throw \"Error reading extent index\";\n        }\n        switch (this.length_size) {\n          case 0:\n            _.extent_length = 0;\n            break;\n          case 4:\n            _.extent_length = t.readUint32();\n            break;\n          case 8:\n            _.extent_length = t.readUint64();\n            break;\n          default:\n            throw \"Error reading extent index\";\n        }\n      }\n    }\n  }), n.createBoxCtor(\"imir\", function(t) {\n    var e = t.readUint8();\n    this.reserved = e >> 7, this.axis = e & 1;\n  }), n.createFullBoxCtor(\"infe\", function(t) {\n    if ((this.version === 0 || this.version === 1) && (this.item_ID = t.readUint16(), this.item_protection_index = t.readUint16(), this.item_name = t.readCString(), this.content_type = t.readCString(), this.content_encoding = t.readCString()), this.version === 1) {\n      this.extension_type = t.readString(4), r.warn(\"BoxParser\", \"Cannot parse extension type\"), t.seek(this.start + this.size);\n      return;\n    }\n    this.version >= 2 && (this.version === 2 ? this.item_ID = t.readUint16() : this.version === 3 && (this.item_ID = t.readUint32()), this.item_protection_index = t.readUint16(), this.item_type = t.readString(4), this.item_name = t.readCString(), this.item_type === \"mime\" ? (this.content_type = t.readCString(), this.content_encoding = t.readCString()) : this.item_type === \"uri \" && (this.item_uri_type = t.readCString()));\n  }), n.createFullBoxCtor(\"ipma\", function(t) {\n    var e, i;\n    for (entry_count = t.readUint32(), this.associations = [], e = 0; e < entry_count; e++) {\n      var s = {};\n      this.associations.push(s), this.version < 1 ? s.id = t.readUint16() : s.id = t.readUint32();\n      var o = t.readUint8();\n      for (s.props = [], i = 0; i < o; i++) {\n        var c = t.readUint8(), u = {};\n        s.props.push(u), u.essential = (c & 128) >> 7 === 1, this.flags & 1 ? u.property_index = (c & 127) << 8 | t.readUint8() : u.property_index = c & 127;\n      }\n    }\n  }), n.createFullBoxCtor(\"iref\", function(t) {\n    var e, i;\n    for (this.references = []; t.getPosition() < this.start + this.size; )\n      if (e = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), e.code === n.OK)\n        this.version === 0 ? i = new n.SingleItemTypeReferenceBox(e.type, e.size, e.hdr_size, e.start) : i = new n.SingleItemTypeReferenceBoxLarge(e.type, e.size, e.hdr_size, e.start), i.write === n.Box.prototype.write && i.type !== \"mdat\" && (r.warn(\"BoxParser\", i.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), i.parseDataAndRewind(t)), i.parse(t), this.references.push(i);\n      else\n        return;\n  }), n.createBoxCtor(\"irot\", function(t) {\n    this.angle = t.readUint8() & 3;\n  }), n.createFullBoxCtor(\"ispe\", function(t) {\n    this.image_width = t.readUint32(), this.image_height = t.readUint32();\n  }), n.createFullBoxCtor(\"kind\", function(t) {\n    this.schemeURI = t.readCString(), this.value = t.readCString();\n  }), n.createFullBoxCtor(\"leva\", function(t) {\n    var e = t.readUint8();\n    this.levels = [];\n    for (var i = 0; i < e; i++) {\n      var s = {};\n      this.levels[i] = s, s.track_ID = t.readUint32();\n      var o = t.readUint8();\n      switch (s.padding_flag = o >> 7, s.assignment_type = o & 127, s.assignment_type) {\n        case 0:\n          s.grouping_type = t.readString(4);\n          break;\n        case 1:\n          s.grouping_type = t.readString(4), s.grouping_type_parameter = t.readUint32();\n          break;\n        case 2:\n          break;\n        case 3:\n          break;\n        case 4:\n          s.sub_track_id = t.readUint32();\n          break;\n        default:\n          r.warn(\"BoxParser\", \"Unknown leva assignement type\");\n      }\n    }\n  }), n.createBoxCtor(\"lsel\", function(t) {\n    this.layer_id = t.readUint16();\n  }), n.createBoxCtor(\"maxr\", function(t) {\n    this.period = t.readUint32(), this.bytes = t.readUint32();\n  }), n.createBoxCtor(\"mdcv\", function(t) {\n    this.display_primaries = [], this.display_primaries[0] = {}, this.display_primaries[0].x = t.readUint16(), this.display_primaries[0].y = t.readUint16(), this.display_primaries[1] = {}, this.display_primaries[1].x = t.readUint16(), this.display_primaries[1].y = t.readUint16(), this.display_primaries[2] = {}, this.display_primaries[2].x = t.readUint16(), this.display_primaries[2].y = t.readUint16(), this.white_point = {}, this.white_point.x = t.readUint16(), this.white_point.y = t.readUint16(), this.max_display_mastering_luminance = t.readUint32(), this.min_display_mastering_luminance = t.readUint32();\n  }), n.createFullBoxCtor(\"mdhd\", function(t) {\n    this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.timescale = t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.timescale = t.readUint32(), this.duration = t.readUint32()), this.parseLanguage(t), t.readUint16();\n  }), n.createFullBoxCtor(\"mehd\", function(t) {\n    this.flags & 1 && (r.warn(\"BoxParser\", \"mehd box incorrectly uses flags set to 1, converting version to 1\"), this.version = 1), this.version == 1 ? this.fragment_duration = t.readUint64() : this.fragment_duration = t.readUint32();\n  }), n.createFullBoxCtor(\"meta\", function(t) {\n    this.boxes = [], n.ContainerBox.prototype.parse.call(this, t);\n  }), n.createFullBoxCtor(\"mfhd\", function(t) {\n    this.sequence_number = t.readUint32();\n  }), n.createFullBoxCtor(\"mfro\", function(t) {\n    this._size = t.readUint32();\n  }), n.createFullBoxCtor(\"mvhd\", function(t) {\n    this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.timescale = t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.timescale = t.readUint32(), this.duration = t.readUint32()), this.rate = t.readUint32(), this.volume = t.readUint16() >> 8, t.readUint16(), t.readUint32Array(2), this.matrix = t.readUint32Array(9), t.readUint32Array(6), this.next_track_id = t.readUint32();\n  }), n.createBoxCtor(\"npck\", function(t) {\n    this.packetssent = t.readUint32();\n  }), n.createBoxCtor(\"nump\", function(t) {\n    this.packetssent = t.readUint64();\n  }), n.createFullBoxCtor(\"padb\", function(t) {\n    var e = t.readUint32();\n    this.padbits = [];\n    for (var i = 0; i < Math.floor((e + 1) / 2); i++)\n      this.padbits = t.readUint8();\n  }), n.createBoxCtor(\"pasp\", function(t) {\n    this.hSpacing = t.readUint32(), this.vSpacing = t.readUint32();\n  }), n.createBoxCtor(\"payl\", function(t) {\n    this.text = t.readString(this.size - this.hdr_size);\n  }), n.createBoxCtor(\"payt\", function(t) {\n    this.payloadID = t.readUint32();\n    var e = t.readUint8();\n    this.rtpmap_string = t.readString(e);\n  }), n.createFullBoxCtor(\"pdin\", function(t) {\n    var e = (this.size - this.hdr_size) / 8;\n    this.rate = [], this.initial_delay = [];\n    for (var i = 0; i < e; i++)\n      this.rate[i] = t.readUint32(), this.initial_delay[i] = t.readUint32();\n  }), n.createFullBoxCtor(\"pitm\", function(t) {\n    this.version === 0 ? this.item_id = t.readUint16() : this.item_id = t.readUint32();\n  }), n.createFullBoxCtor(\"pixi\", function(t) {\n    var e;\n    for (this.num_channels = t.readUint8(), this.bits_per_channels = [], e = 0; e < this.num_channels; e++)\n      this.bits_per_channels[e] = t.readUint8();\n  }), n.createBoxCtor(\"pmax\", function(t) {\n    this.bytes = t.readUint32();\n  }), n.createFullBoxCtor(\"prft\", function(t) {\n    this.ref_track_id = t.readUint32(), this.ntp_timestamp = t.readUint64(), this.version === 0 ? this.media_time = t.readUint32() : this.media_time = t.readUint64();\n  }), n.createFullBoxCtor(\"pssh\", function(t) {\n    if (this.system_id = n.parseHex16(t), this.version > 0) {\n      var e = t.readUint32();\n      this.kid = [];\n      for (var i = 0; i < e; i++)\n        this.kid[i] = n.parseHex16(t);\n    }\n    var s = t.readUint32();\n    s > 0 && (this.data = t.readUint8Array(s));\n  }), n.createFullBoxCtor(\"clef\", function(t) {\n    this.width = t.readUint32(), this.height = t.readUint32();\n  }), n.createFullBoxCtor(\"enof\", function(t) {\n    this.width = t.readUint32(), this.height = t.readUint32();\n  }), n.createFullBoxCtor(\"prof\", function(t) {\n    this.width = t.readUint32(), this.height = t.readUint32();\n  }), n.createContainerBoxCtor(\"tapt\", null, [\"clef\", \"prof\", \"enof\"]), n.createBoxCtor(\"rtp \", function(t) {\n    this.descriptionformat = t.readString(4), this.sdptext = t.readString(this.size - this.hdr_size - 4);\n  }), n.createFullBoxCtor(\"saio\", function(t) {\n    this.flags & 1 && (this.aux_info_type = t.readUint32(), this.aux_info_type_parameter = t.readUint32());\n    var e = t.readUint32();\n    this.offset = [];\n    for (var i = 0; i < e; i++)\n      this.version === 0 ? this.offset[i] = t.readUint32() : this.offset[i] = t.readUint64();\n  }), n.createFullBoxCtor(\"saiz\", function(t) {\n    this.flags & 1 && (this.aux_info_type = t.readUint32(), this.aux_info_type_parameter = t.readUint32()), this.default_sample_info_size = t.readUint8();\n    var e = t.readUint32();\n    if (this.sample_info_size = [], this.default_sample_info_size === 0)\n      for (var i = 0; i < e; i++)\n        this.sample_info_size[i] = t.readUint8();\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"mett\", function(t) {\n    this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"metx\", function(t) {\n    this.parseHeader(t), this.content_encoding = t.readCString(), this.namespace = t.readCString(), this.schema_location = t.readCString(), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"sbtt\", function(t) {\n    this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stpp\", function(t) {\n    this.parseHeader(t), this.namespace = t.readCString(), this.schema_location = t.readCString(), this.auxiliary_mime_types = t.readCString(), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"stxt\", function(t) {\n    this.parseHeader(t), this.content_encoding = t.readCString(), this.mime_format = t.readCString(), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_SUBTITLE, \"tx3g\", function(t) {\n    this.parseHeader(t), this.displayFlags = t.readUint32(), this.horizontal_justification = t.readInt8(), this.vertical_justification = t.readInt8(), this.bg_color_rgba = t.readUint8Array(4), this.box_record = t.readInt16Array(4), this.style_record = t.readUint8Array(12), this.parseFooter(t);\n  }), n.createSampleEntryCtor(n.SAMPLE_ENTRY_TYPE_METADATA, \"wvtt\", function(t) {\n    this.parseHeader(t), this.parseFooter(t);\n  }), n.createSampleGroupCtor(\"alst\", function(t) {\n    var e, i = t.readUint16();\n    for (this.first_output_sample = t.readUint16(), this.sample_offset = [], e = 0; e < i; e++)\n      this.sample_offset[e] = t.readUint32();\n    var s = this.description_length - 4 - 4 * i;\n    for (this.num_output_samples = [], this.num_total_samples = [], e = 0; e < s / 4; e++)\n      this.num_output_samples[e] = t.readUint16(), this.num_total_samples[e] = t.readUint16();\n  }), n.createSampleGroupCtor(\"avll\", function(t) {\n    this.layerNumber = t.readUint8(), this.accurateStatisticsFlag = t.readUint8(), this.avgBitRate = t.readUint16(), this.avgFrameRate = t.readUint16();\n  }), n.createSampleGroupCtor(\"avss\", function(t) {\n    this.subSequenceIdentifier = t.readUint16(), this.layerNumber = t.readUint8();\n    var e = t.readUint8();\n    this.durationFlag = e >> 7, this.avgRateFlag = e >> 6 & 1, this.durationFlag && (this.duration = t.readUint32()), this.avgRateFlag && (this.accurateStatisticsFlag = t.readUint8(), this.avgBitRate = t.readUint16(), this.avgFrameRate = t.readUint16()), this.dependency = [];\n    for (var i = t.readUint8(), s = 0; s < i; s++) {\n      var o = {};\n      this.dependency.push(o), o.subSeqDirectionFlag = t.readUint8(), o.layerNumber = t.readUint8(), o.subSequenceIdentifier = t.readUint16();\n    }\n  }), n.createSampleGroupCtor(\"dtrt\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"mvif\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"prol\", function(t) {\n    this.roll_distance = t.readInt16();\n  }), n.createSampleGroupCtor(\"rap \", function(t) {\n    var e = t.readUint8();\n    this.num_leading_samples_known = e >> 7, this.num_leading_samples = e & 127;\n  }), n.createSampleGroupCtor(\"rash\", function(t) {\n    if (this.operation_point_count = t.readUint16(), this.description_length !== 2 + (this.operation_point_count === 1 ? 2 : this.operation_point_count * 6) + 9)\n      r.warn(\"BoxParser\", \"Mismatch in \" + this.grouping_type + \" sample group length\"), this.data = t.readUint8Array(this.description_length - 2);\n    else {\n      if (this.operation_point_count === 1)\n        this.target_rate_share = t.readUint16();\n      else {\n        this.target_rate_share = [], this.available_bitrate = [];\n        for (var e = 0; e < this.operation_point_count; e++)\n          this.available_bitrate[e] = t.readUint32(), this.target_rate_share[e] = t.readUint16();\n      }\n      this.maximum_bitrate = t.readUint32(), this.minimum_bitrate = t.readUint32(), this.discard_priority = t.readUint8();\n    }\n  }), n.createSampleGroupCtor(\"roll\", function(t) {\n    this.roll_distance = t.readInt16();\n  }), n.SampleGroupEntry.prototype.parse = function(t) {\n    r.warn(\"BoxParser\", \"Unknown Sample Group type: \" + this.grouping_type), this.data = t.readUint8Array(this.description_length);\n  }, n.createSampleGroupCtor(\"scif\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"scnm\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"seig\", function(t) {\n    this.reserved = t.readUint8();\n    var e = t.readUint8();\n    this.crypt_byte_block = e >> 4, this.skip_byte_block = e & 15, this.isProtected = t.readUint8(), this.Per_Sample_IV_Size = t.readUint8(), this.KID = n.parseHex16(t), this.constant_IV_size = 0, this.constant_IV = 0, this.isProtected === 1 && this.Per_Sample_IV_Size === 0 && (this.constant_IV_size = t.readUint8(), this.constant_IV = t.readUint8Array(this.constant_IV_size));\n  }), n.createSampleGroupCtor(\"stsa\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"sync\", function(t) {\n    var e = t.readUint8();\n    this.NAL_unit_type = e & 63;\n  }), n.createSampleGroupCtor(\"tele\", function(t) {\n    var e = t.readUint8();\n    this.level_independently_decodable = e >> 7;\n  }), n.createSampleGroupCtor(\"tsas\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"tscl\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createSampleGroupCtor(\"vipr\", function(t) {\n    r.warn(\"BoxParser\", \"Sample Group type: \" + this.grouping_type + \" not fully parsed\");\n  }), n.createFullBoxCtor(\"sbgp\", function(t) {\n    this.grouping_type = t.readString(4), this.version === 1 ? this.grouping_type_parameter = t.readUint32() : this.grouping_type_parameter = 0, this.entries = [];\n    for (var e = t.readUint32(), i = 0; i < e; i++) {\n      var s = {};\n      this.entries.push(s), s.sample_count = t.readInt32(), s.group_description_index = t.readInt32();\n    }\n  }), n.createFullBoxCtor(\"schm\", function(t) {\n    this.scheme_type = t.readString(4), this.scheme_version = t.readUint32(), this.flags & 1 && (this.scheme_uri = t.readString(this.size - this.hdr_size - 8));\n  }), n.createBoxCtor(\"sdp \", function(t) {\n    this.sdptext = t.readString(this.size - this.hdr_size);\n  }), n.createFullBoxCtor(\"sdtp\", function(t) {\n    var e, i = this.size - this.hdr_size;\n    this.is_leading = [], this.sample_depends_on = [], this.sample_is_depended_on = [], this.sample_has_redundancy = [];\n    for (var s = 0; s < i; s++)\n      e = t.readUint8(), this.is_leading[s] = e >> 6, this.sample_depends_on[s] = e >> 4 & 3, this.sample_is_depended_on[s] = e >> 2 & 3, this.sample_has_redundancy[s] = e & 3;\n  }), n.createFullBoxCtor(\n    \"senc\"\n    /*, function(stream) {\n    \tthis.parseFullHeader(stream);\n    \tvar sample_count = stream.readUint32();\n    \tthis.samples = [];\n    \tfor (var i = 0; i < sample_count; i++) {\n    \t\tvar sample = {};\n    \t\t// tenc.default_Per_Sample_IV_Size or seig.Per_Sample_IV_Size\n    \t\tsample.InitializationVector = this.readUint8Array(Per_Sample_IV_Size*8);\n    \t\tif (this.flags & 0x2) {\n    \t\t\tsample.subsamples = [];\n    \t\t\tsubsample_count = stream.readUint16();\n    \t\t\tfor (var j = 0; j < subsample_count; j++) {\n    \t\t\t\tvar subsample = {};\n    \t\t\t\tsubsample.BytesOfClearData = stream.readUint16();\n    \t\t\t\tsubsample.BytesOfProtectedData = stream.readUint32();\n    \t\t\t\tsample.subsamples.push(subsample);\n    \t\t\t}\n    \t\t}\n    \t\t// TODO\n    \t\tthis.samples.push(sample);\n    \t}\n    }*/\n  ), n.createFullBoxCtor(\"sgpd\", function(t) {\n    this.grouping_type = t.readString(4), r.debug(\"BoxParser\", \"Found Sample Groups of type \" + this.grouping_type), this.version === 1 ? this.default_length = t.readUint32() : this.default_length = 0, this.version >= 2 && (this.default_group_description_index = t.readUint32()), this.entries = [];\n    for (var e = t.readUint32(), i = 0; i < e; i++) {\n      var s;\n      n[this.grouping_type + \"SampleGroupEntry\"] ? s = new n[this.grouping_type + \"SampleGroupEntry\"](this.grouping_type) : s = new n.SampleGroupEntry(this.grouping_type), this.entries.push(s), this.version === 1 ? this.default_length === 0 ? s.description_length = t.readUint32() : s.description_length = this.default_length : s.description_length = this.default_length, s.write === n.SampleGroupEntry.prototype.write && (r.info(\"BoxParser\", \"SampleGroup for type \" + this.grouping_type + \" writing not yet implemented, keeping unparsed data in memory for later write\"), s.data = t.readUint8Array(s.description_length), t.position -= s.description_length), s.parse(t);\n    }\n  }), n.createFullBoxCtor(\"sidx\", function(t) {\n    this.reference_ID = t.readUint32(), this.timescale = t.readUint32(), this.version === 0 ? (this.earliest_presentation_time = t.readUint32(), this.first_offset = t.readUint32()) : (this.earliest_presentation_time = t.readUint64(), this.first_offset = t.readUint64()), t.readUint16(), this.references = [];\n    for (var e = t.readUint16(), i = 0; i < e; i++) {\n      var s = {};\n      this.references.push(s);\n      var o = t.readUint32();\n      s.reference_type = o >> 31 & 1, s.referenced_size = o & 2147483647, s.subsegment_duration = t.readUint32(), o = t.readUint32(), s.starts_with_SAP = o >> 31 & 1, s.SAP_type = o >> 28 & 7, s.SAP_delta_time = o & 268435455;\n    }\n  }), n.SingleItemTypeReferenceBox = function(t, e, i, s) {\n    n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n  }, n.SingleItemTypeReferenceBox.prototype = new n.Box(), n.SingleItemTypeReferenceBox.prototype.parse = function(t) {\n    this.from_item_ID = t.readUint16();\n    var e = t.readUint16();\n    this.references = [];\n    for (var i = 0; i < e; i++)\n      this.references[i] = t.readUint16();\n  }, n.SingleItemTypeReferenceBoxLarge = function(t, e, i, s) {\n    n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n  }, n.SingleItemTypeReferenceBoxLarge.prototype = new n.Box(), n.SingleItemTypeReferenceBoxLarge.prototype.parse = function(t) {\n    this.from_item_ID = t.readUint32();\n    var e = t.readUint16();\n    this.references = [];\n    for (var i = 0; i < e; i++)\n      this.references[i] = t.readUint32();\n  }, n.createFullBoxCtor(\"SmDm\", function(t) {\n    this.primaryRChromaticity_x = t.readUint16(), this.primaryRChromaticity_y = t.readUint16(), this.primaryGChromaticity_x = t.readUint16(), this.primaryGChromaticity_y = t.readUint16(), this.primaryBChromaticity_x = t.readUint16(), this.primaryBChromaticity_y = t.readUint16(), this.whitePointChromaticity_x = t.readUint16(), this.whitePointChromaticity_y = t.readUint16(), this.luminanceMax = t.readUint32(), this.luminanceMin = t.readUint32();\n  }), n.createFullBoxCtor(\"smhd\", function(t) {\n    this.balance = t.readUint16(), t.readUint16();\n  }), n.createFullBoxCtor(\"ssix\", function(t) {\n    this.subsegments = [];\n    for (var e = t.readUint32(), i = 0; i < e; i++) {\n      var s = {};\n      this.subsegments.push(s), s.ranges = [];\n      for (var o = t.readUint32(), c = 0; c < o; c++) {\n        var u = {};\n        s.ranges.push(u), u.level = t.readUint8(), u.range_size = t.readUint24();\n      }\n    }\n  }), n.createFullBoxCtor(\"stco\", function(t) {\n    var e;\n    if (e = t.readUint32(), this.chunk_offsets = [], this.version === 0)\n      for (var i = 0; i < e; i++)\n        this.chunk_offsets.push(t.readUint32());\n  }), n.createFullBoxCtor(\"stdp\", function(t) {\n    var e = (this.size - this.hdr_size) / 2;\n    this.priority = [];\n    for (var i = 0; i < e; i++)\n      this.priority[i] = t.readUint16();\n  }), n.createFullBoxCtor(\"sthd\"), n.createFullBoxCtor(\"stri\", function(t) {\n    this.switch_group = t.readUint16(), this.alternate_group = t.readUint16(), this.sub_track_id = t.readUint32();\n    var e = (this.size - this.hdr_size - 8) / 4;\n    this.attribute_list = [];\n    for (var i = 0; i < e; i++)\n      this.attribute_list[i] = t.readUint32();\n  }), n.createFullBoxCtor(\"stsc\", function(t) {\n    var e, i;\n    if (e = t.readUint32(), this.first_chunk = [], this.samples_per_chunk = [], this.sample_description_index = [], this.version === 0)\n      for (i = 0; i < e; i++)\n        this.first_chunk.push(t.readUint32()), this.samples_per_chunk.push(t.readUint32()), this.sample_description_index.push(t.readUint32());\n  }), n.createFullBoxCtor(\"stsd\", function(t) {\n    var e, i, s, o;\n    for (this.entries = [], s = t.readUint32(), e = 1; e <= s; e++)\n      if (i = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), i.code === n.OK)\n        n[i.type + \"SampleEntry\"] ? (o = new n[i.type + \"SampleEntry\"](i.size), o.hdr_size = i.hdr_size, o.start = i.start) : (r.warn(\"BoxParser\", \"Unknown sample entry type: \" + i.type), o = new n.SampleEntry(i.type, i.size, i.hdr_size, i.start)), o.write === n.SampleEntry.prototype.write && (r.info(\"BoxParser\", \"SampleEntry \" + o.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), o.parseDataAndRewind(t)), o.parse(t), this.entries.push(o);\n      else\n        return;\n  }), n.createFullBoxCtor(\"stsg\", function(t) {\n    this.grouping_type = t.readUint32();\n    var e = t.readUint16();\n    this.group_description_index = [];\n    for (var i = 0; i < e; i++)\n      this.group_description_index[i] = t.readUint32();\n  }), n.createFullBoxCtor(\"stsh\", function(t) {\n    var e, i;\n    if (e = t.readUint32(), this.shadowed_sample_numbers = [], this.sync_sample_numbers = [], this.version === 0)\n      for (i = 0; i < e; i++)\n        this.shadowed_sample_numbers.push(t.readUint32()), this.sync_sample_numbers.push(t.readUint32());\n  }), n.createFullBoxCtor(\"stss\", function(t) {\n    var e, i;\n    if (i = t.readUint32(), this.version === 0)\n      for (this.sample_numbers = [], e = 0; e < i; e++)\n        this.sample_numbers.push(t.readUint32());\n  }), n.createFullBoxCtor(\"stsz\", function(t) {\n    var e;\n    if (this.sample_sizes = [], this.version === 0)\n      for (this.sample_size = t.readUint32(), this.sample_count = t.readUint32(), e = 0; e < this.sample_count; e++)\n        this.sample_size === 0 ? this.sample_sizes.push(t.readUint32()) : this.sample_sizes[e] = this.sample_size;\n  }), n.createFullBoxCtor(\"stts\", function(t) {\n    var e, i, s;\n    if (e = t.readUint32(), this.sample_counts = [], this.sample_deltas = [], this.version === 0)\n      for (i = 0; i < e; i++)\n        this.sample_counts.push(t.readUint32()), s = t.readInt32(), s < 0 && (r.warn(\"BoxParser\", \"File uses negative stts sample delta, using value 1 instead, sync may be lost!\"), s = 1), this.sample_deltas.push(s);\n  }), n.createFullBoxCtor(\"stvi\", function(t) {\n    var e = t.readUint32();\n    this.single_view_allowed = e & 3, this.stereo_scheme = t.readUint32();\n    var i = t.readUint32();\n    this.stereo_indication_type = t.readString(i);\n    var s, o;\n    for (this.boxes = []; t.getPosition() < this.start + this.size; )\n      if (s = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), s.code === n.OK)\n        o = s.box, this.boxes.push(o), this[o.type] = o;\n      else\n        return;\n  }), n.createBoxCtor(\"styp\", function(t) {\n    n.ftypBox.prototype.parse.call(this, t);\n  }), n.createFullBoxCtor(\"stz2\", function(t) {\n    var e, i;\n    if (this.sample_sizes = [], this.version === 0)\n      if (this.reserved = t.readUint24(), this.field_size = t.readUint8(), i = t.readUint32(), this.field_size === 4)\n        for (e = 0; e < i; e += 2) {\n          var s = t.readUint8();\n          this.sample_sizes[e] = s >> 4 & 15, this.sample_sizes[e + 1] = s & 15;\n        }\n      else if (this.field_size === 8)\n        for (e = 0; e < i; e++)\n          this.sample_sizes[e] = t.readUint8();\n      else if (this.field_size === 16)\n        for (e = 0; e < i; e++)\n          this.sample_sizes[e] = t.readUint16();\n      else\n        r.error(\"BoxParser\", \"Error in length field in stz2 box\");\n  }), n.createFullBoxCtor(\"subs\", function(t) {\n    var e, i, s, o;\n    for (s = t.readUint32(), this.entries = [], e = 0; e < s; e++) {\n      var c = {};\n      if (this.entries[e] = c, c.sample_delta = t.readUint32(), c.subsamples = [], o = t.readUint16(), o > 0)\n        for (i = 0; i < o; i++) {\n          var u = {};\n          c.subsamples.push(u), this.version == 1 ? u.size = t.readUint32() : u.size = t.readUint16(), u.priority = t.readUint8(), u.discardable = t.readUint8(), u.codec_specific_parameters = t.readUint32();\n        }\n    }\n  }), n.createFullBoxCtor(\"tenc\", function(t) {\n    if (t.readUint8(), this.version === 0)\n      t.readUint8();\n    else {\n      var e = t.readUint8();\n      this.default_crypt_byte_block = e >> 4 & 15, this.default_skip_byte_block = e & 15;\n    }\n    this.default_isProtected = t.readUint8(), this.default_Per_Sample_IV_Size = t.readUint8(), this.default_KID = n.parseHex16(t), this.default_isProtected === 1 && this.default_Per_Sample_IV_Size === 0 && (this.default_constant_IV_size = t.readUint8(), this.default_constant_IV = t.readUint8Array(this.default_constant_IV_size));\n  }), n.createFullBoxCtor(\"tfdt\", function(t) {\n    this.version == 1 ? this.baseMediaDecodeTime = t.readUint64() : this.baseMediaDecodeTime = t.readUint32();\n  }), n.createFullBoxCtor(\"tfhd\", function(t) {\n    var e = 0;\n    this.track_id = t.readUint32(), this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET ? (this.base_data_offset = t.readUint64(), e += 8) : this.base_data_offset = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_DESC ? (this.default_sample_description_index = t.readUint32(), e += 4) : this.default_sample_description_index = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_DUR ? (this.default_sample_duration = t.readUint32(), e += 4) : this.default_sample_duration = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_SIZE ? (this.default_sample_size = t.readUint32(), e += 4) : this.default_sample_size = 0, this.size - this.hdr_size > e && this.flags & n.TFHD_FLAG_SAMPLE_FLAGS ? (this.default_sample_flags = t.readUint32(), e += 4) : this.default_sample_flags = 0;\n  }), n.createFullBoxCtor(\"tfra\", function(t) {\n    this.track_ID = t.readUint32(), t.readUint24();\n    var e = t.readUint8();\n    this.length_size_of_traf_num = e >> 4 & 3, this.length_size_of_trun_num = e >> 2 & 3, this.length_size_of_sample_num = e & 3, this.entries = [];\n    for (var i = t.readUint32(), s = 0; s < i; s++)\n      this.version === 1 ? (this.time = t.readUint64(), this.moof_offset = t.readUint64()) : (this.time = t.readUint32(), this.moof_offset = t.readUint32()), this.traf_number = t[\"readUint\" + 8 * (this.length_size_of_traf_num + 1)](), this.trun_number = t[\"readUint\" + 8 * (this.length_size_of_trun_num + 1)](), this.sample_number = t[\"readUint\" + 8 * (this.length_size_of_sample_num + 1)]();\n  }), n.createFullBoxCtor(\"tkhd\", function(t) {\n    this.version == 1 ? (this.creation_time = t.readUint64(), this.modification_time = t.readUint64(), this.track_id = t.readUint32(), t.readUint32(), this.duration = t.readUint64()) : (this.creation_time = t.readUint32(), this.modification_time = t.readUint32(), this.track_id = t.readUint32(), t.readUint32(), this.duration = t.readUint32()), t.readUint32Array(2), this.layer = t.readInt16(), this.alternate_group = t.readInt16(), this.volume = t.readInt16() >> 8, t.readUint16(), this.matrix = t.readInt32Array(9), this.width = t.readUint32(), this.height = t.readUint32();\n  }), n.createBoxCtor(\"tmax\", function(t) {\n    this.time = t.readUint32();\n  }), n.createBoxCtor(\"tmin\", function(t) {\n    this.time = t.readUint32();\n  }), n.createBoxCtor(\"totl\", function(t) {\n    this.bytessent = t.readUint32();\n  }), n.createBoxCtor(\"tpay\", function(t) {\n    this.bytessent = t.readUint32();\n  }), n.createBoxCtor(\"tpyl\", function(t) {\n    this.bytessent = t.readUint64();\n  }), n.TrackGroupTypeBox.prototype.parse = function(t) {\n    this.parseFullHeader(t), this.track_group_id = t.readUint32();\n  }, n.createTrackGroupCtor(\"msrc\"), n.TrackReferenceTypeBox = function(t, e, i, s) {\n    n.Box.call(this, t, e), this.hdr_size = i, this.start = s;\n  }, n.TrackReferenceTypeBox.prototype = new n.Box(), n.TrackReferenceTypeBox.prototype.parse = function(t) {\n    this.track_ids = t.readUint32Array((this.size - this.hdr_size) / 4);\n  }, n.trefBox.prototype.parse = function(t) {\n    for (var e, i; t.getPosition() < this.start + this.size; )\n      if (e = n.parseOneBox(t, !0, this.size - (t.getPosition() - this.start)), e.code === n.OK)\n        i = new n.TrackReferenceTypeBox(e.type, e.size, e.hdr_size, e.start), i.write === n.Box.prototype.write && i.type !== \"mdat\" && (r.info(\"BoxParser\", \"TrackReference \" + i.type + \" box writing not yet implemented, keeping unparsed data in memory for later write\"), i.parseDataAndRewind(t)), i.parse(t), this.boxes.push(i);\n      else\n        return;\n  }, n.createFullBoxCtor(\"trep\", function(t) {\n    for (this.track_ID = t.readUint32(), this.boxes = []; t.getPosition() < this.start + this.size; )\n      if (ret = n.parseOneBox(t, !1, this.size - (t.getPosition() - this.start)), ret.code === n.OK)\n        box = ret.box, this.boxes.push(box);\n      else\n        return;\n  }), n.createFullBoxCtor(\"trex\", function(t) {\n    this.track_id = t.readUint32(), this.default_sample_description_index = t.readUint32(), this.default_sample_duration = t.readUint32(), this.default_sample_size = t.readUint32(), this.default_sample_flags = t.readUint32();\n  }), n.createBoxCtor(\"trpy\", function(t) {\n    this.bytessent = t.readUint64();\n  }), n.createFullBoxCtor(\"trun\", function(t) {\n    var e = 0;\n    if (this.sample_count = t.readUint32(), e += 4, this.size - this.hdr_size > e && this.flags & n.TRUN_FLAGS_DATA_OFFSET ? (this.data_offset = t.readInt32(), e += 4) : this.data_offset = 0, this.size - this.hdr_size > e && this.flags & n.TRUN_FLAGS_FIRST_FLAG ? (this.first_sample_flags = t.readUint32(), e += 4) : this.first_sample_flags = 0, this.sample_duration = [], this.sample_size = [], this.sample_flags = [], this.sample_composition_time_offset = [], this.size - this.hdr_size > e)\n      for (var i = 0; i < this.sample_count; i++)\n        this.flags & n.TRUN_FLAGS_DURATION && (this.sample_duration[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_SIZE && (this.sample_size[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_FLAGS && (this.sample_flags[i] = t.readUint32()), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.version === 0 ? this.sample_composition_time_offset[i] = t.readUint32() : this.sample_composition_time_offset[i] = t.readInt32());\n  }), n.createFullBoxCtor(\"tsel\", function(t) {\n    this.switch_group = t.readUint32();\n    var e = (this.size - this.hdr_size - 4) / 4;\n    this.attribute_list = [];\n    for (var i = 0; i < e; i++)\n      this.attribute_list[i] = t.readUint32();\n  }), n.createFullBoxCtor(\"txtC\", function(t) {\n    this.config = t.readCString();\n  }), n.createFullBoxCtor(\"url \", function(t) {\n    this.flags !== 1 && (this.location = t.readCString());\n  }), n.createFullBoxCtor(\"urn \", function(t) {\n    this.name = t.readCString(), this.size - this.hdr_size - this.name.length - 1 > 0 && (this.location = t.readCString());\n  }), n.createUUIDBox(\"a5d40b30e81411ddba2f0800200c9a66\", !0, !1, function(t) {\n    this.LiveServerManifest = t.readString(this.size - this.hdr_size).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n  }), n.createUUIDBox(\"d08a4f1810f34a82b6c832d8aba183d3\", !0, !1, function(t) {\n    this.system_id = n.parseHex16(t);\n    var e = t.readUint32();\n    e > 0 && (this.data = t.readUint8Array(e));\n  }), n.createUUIDBox(\n    \"a2394f525a9b4f14a2446c427c648df4\",\n    !0,\n    !1\n    /*, function(stream) {\n    \tif (this.flags & 0x1) {\n    \t\tthis.AlgorithmID = stream.readUint24();\n    \t\tthis.IV_size = stream.readUint8();\n    \t\tthis.KID = BoxParser.parseHex16(stream);\n    \t}\n    \tvar sample_count = stream.readUint32();\n    \tthis.samples = [];\n    \tfor (var i = 0; i < sample_count; i++) {\n    \t\tvar sample = {};\n    \t\tsample.InitializationVector = this.readUint8Array(this.IV_size*8);\n    \t\tif (this.flags & 0x2) {\n    \t\t\tsample.subsamples = [];\n    \t\t\tsample.NumberOfEntries = stream.readUint16();\n    \t\t\tfor (var j = 0; j < sample.NumberOfEntries; j++) {\n    \t\t\t\tvar subsample = {};\n    \t\t\t\tsubsample.BytesOfClearData = stream.readUint16();\n    \t\t\t\tsubsample.BytesOfProtectedData = stream.readUint32();\n    \t\t\t\tsample.subsamples.push(subsample);\n    \t\t\t}\n    \t\t}\n    \t\tthis.samples.push(sample);\n    \t}\n    }*/\n  ), n.createUUIDBox(\"8974dbce7be74c5184f97148f9882554\", !0, !1, function(t) {\n    this.default_AlgorithmID = t.readUint24(), this.default_IV_size = t.readUint8(), this.default_KID = n.parseHex16(t);\n  }), n.createUUIDBox(\"d4807ef2ca3946958e5426cb9e46a79f\", !0, !1, function(t) {\n    this.fragment_count = t.readUint8(), this.entries = [];\n    for (var e = 0; e < this.fragment_count; e++) {\n      var i = {}, s = 0, o = 0;\n      this.version === 1 ? (s = t.readUint64(), o = t.readUint64()) : (s = t.readUint32(), o = t.readUint32()), i.absolute_time = s, i.absolute_duration = o, this.entries.push(i);\n    }\n  }), n.createUUIDBox(\"6d1d9b0542d544e680e2141daff757b2\", !0, !1, function(t) {\n    this.version === 1 ? (this.absolute_time = t.readUint64(), this.duration = t.readUint64()) : (this.absolute_time = t.readUint32(), this.duration = t.readUint32());\n  }), n.createFullBoxCtor(\"vmhd\", function(t) {\n    this.graphicsmode = t.readUint16(), this.opcolor = t.readUint16Array(3);\n  }), n.createFullBoxCtor(\"vpcC\", function(t) {\n    var e;\n    this.version === 1 ? (this.profile = t.readUint8(), this.level = t.readUint8(), e = t.readUint8(), this.bitDepth = e >> 4, this.chromaSubsampling = e >> 1 & 7, this.videoFullRangeFlag = e & 1, this.colourPrimaries = t.readUint8(), this.transferCharacteristics = t.readUint8(), this.matrixCoefficients = t.readUint8(), this.codecIntializationDataSize = t.readUint16(), this.codecIntializationData = t.readUint8Array(this.codecIntializationDataSize)) : (this.profile = t.readUint8(), this.level = t.readUint8(), e = t.readUint8(), this.bitDepth = e >> 4 & 15, this.colorSpace = e & 15, e = t.readUint8(), this.chromaSubsampling = e >> 4 & 15, this.transferFunction = e >> 1 & 7, this.videoFullRangeFlag = e & 1, this.codecIntializationDataSize = t.readUint16(), this.codecIntializationData = t.readUint8Array(this.codecIntializationDataSize));\n  }), n.createBoxCtor(\"vttC\", function(t) {\n    this.text = t.readString(this.size - this.hdr_size);\n  }), n.createFullBoxCtor(\"vvcC\", function(t) {\n    var e, i, s = {\n      held_bits: void 0,\n      num_held_bits: 0,\n      stream_read_1_bytes: function(x) {\n        this.held_bits = x.readUint8(), this.num_held_bits = 8;\n      },\n      stream_read_2_bytes: function(x) {\n        this.held_bits = x.readUint16(), this.num_held_bits = 16;\n      },\n      extract_bits: function(x) {\n        var P = this.held_bits >> this.num_held_bits - x & (1 << x) - 1;\n        return this.num_held_bits -= x, P;\n      }\n    };\n    if (s.stream_read_1_bytes(t), s.extract_bits(5), this.lengthSizeMinusOne = s.extract_bits(2), this.ptl_present_flag = s.extract_bits(1), this.ptl_present_flag) {\n      s.stream_read_2_bytes(t), this.ols_idx = s.extract_bits(9), this.num_sublayers = s.extract_bits(3), this.constant_frame_rate = s.extract_bits(2), this.chroma_format_idc = s.extract_bits(2), s.stream_read_1_bytes(t), this.bit_depth_minus8 = s.extract_bits(3), s.extract_bits(5);\n      {\n        if (s.stream_read_2_bytes(t), s.extract_bits(2), this.num_bytes_constraint_info = s.extract_bits(6), this.general_profile_idc = s.extract_bits(7), this.general_tier_flag = s.extract_bits(1), this.general_level_idc = t.readUint8(), s.stream_read_1_bytes(t), this.ptl_frame_only_constraint_flag = s.extract_bits(1), this.ptl_multilayer_enabled_flag = s.extract_bits(1), this.general_constraint_info = new Uint8Array(this.num_bytes_constraint_info), this.num_bytes_constraint_info) {\n          for (e = 0; e < this.num_bytes_constraint_info - 1; e++) {\n            var o = s.extract_bits(6);\n            s.stream_read_1_bytes(t);\n            var c = s.extract_bits(2);\n            this.general_constraint_info[e] = o << 2 | c;\n          }\n          this.general_constraint_info[this.num_bytes_constraint_info - 1] = s.extract_bits(6);\n        } else\n          s.extract_bits(6);\n        for (s.stream_read_1_bytes(t), this.ptl_sublayer_present_mask = 0, i = this.num_sublayers - 2; i >= 0; --i) {\n          var u = s.extract_bits(1);\n          this.ptl_sublayer_present_mask |= u << i;\n        }\n        for (i = this.num_sublayers; i <= 8 && this.num_sublayers > 1; ++i)\n          s.extract_bits(1);\n        for (i = this.num_sublayers - 2; i >= 0; --i)\n          this.ptl_sublayer_present_mask & 1 << i && (this.sublayer_level_idc[i] = t.readUint8());\n        if (this.ptl_num_sub_profiles = t.readUint8(), this.general_sub_profile_idc = [], this.ptl_num_sub_profiles)\n          for (e = 0; e < this.ptl_num_sub_profiles; e++)\n            this.general_sub_profile_idc.push(t.readUint32());\n      }\n      this.max_picture_width = t.readUint16(), this.max_picture_height = t.readUint16(), this.avg_frame_rate = t.readUint16();\n    }\n    var _ = 12, g = 13;\n    this.nalu_arrays = [];\n    var w = t.readUint8();\n    for (e = 0; e < w; e++) {\n      var S = [];\n      this.nalu_arrays.push(S), s.stream_read_1_bytes(t), S.completeness = s.extract_bits(1), s.extract_bits(2), S.nalu_type = s.extract_bits(5);\n      var U = 1;\n      for (S.nalu_type != g && S.nalu_type != _ && (U = t.readUint16()), i = 0; i < U; i++) {\n        var C = t.readUint16();\n        S.push({\n          data: t.readUint8Array(C),\n          length: C\n        });\n      }\n    }\n  }), n.createFullBoxCtor(\"vvnC\", function(t) {\n    var e = strm.readUint8();\n    this.lengthSizeMinusOne = e & 3;\n  }), n.SampleEntry.prototype.isVideo = function() {\n    return !1;\n  }, n.SampleEntry.prototype.isAudio = function() {\n    return !1;\n  }, n.SampleEntry.prototype.isSubtitle = function() {\n    return !1;\n  }, n.SampleEntry.prototype.isMetadata = function() {\n    return !1;\n  }, n.SampleEntry.prototype.isHint = function() {\n    return !1;\n  }, n.SampleEntry.prototype.getCodec = function() {\n    return this.type.replace(\".\", \"\");\n  }, n.SampleEntry.prototype.getWidth = function() {\n    return \"\";\n  }, n.SampleEntry.prototype.getHeight = function() {\n    return \"\";\n  }, n.SampleEntry.prototype.getChannelCount = function() {\n    return \"\";\n  }, n.SampleEntry.prototype.getSampleRate = function() {\n    return \"\";\n  }, n.SampleEntry.prototype.getSampleSize = function() {\n    return \"\";\n  }, n.VisualSampleEntry.prototype.isVideo = function() {\n    return !0;\n  }, n.VisualSampleEntry.prototype.getWidth = function() {\n    return this.width;\n  }, n.VisualSampleEntry.prototype.getHeight = function() {\n    return this.height;\n  }, n.AudioSampleEntry.prototype.isAudio = function() {\n    return !0;\n  }, n.AudioSampleEntry.prototype.getChannelCount = function() {\n    return this.channel_count;\n  }, n.AudioSampleEntry.prototype.getSampleRate = function() {\n    return this.samplerate;\n  }, n.AudioSampleEntry.prototype.getSampleSize = function() {\n    return this.samplesize;\n  }, n.SubtitleSampleEntry.prototype.isSubtitle = function() {\n    return !0;\n  }, n.MetadataSampleEntry.prototype.isMetadata = function() {\n    return !0;\n  }, n.decimalToHex = function(t, e) {\n    var i = Number(t).toString(16);\n    for (e = typeof e > \"u\" || e === null ? e = 2 : e; i.length < e; )\n      i = \"0\" + i;\n    return i;\n  }, n.avc1SampleEntry.prototype.getCodec = n.avc2SampleEntry.prototype.getCodec = n.avc3SampleEntry.prototype.getCodec = n.avc4SampleEntry.prototype.getCodec = function() {\n    var t = n.SampleEntry.prototype.getCodec.call(this);\n    return this.avcC ? t + \".\" + n.decimalToHex(this.avcC.AVCProfileIndication) + n.decimalToHex(this.avcC.profile_compatibility) + n.decimalToHex(this.avcC.AVCLevelIndication) : t;\n  }, n.hev1SampleEntry.prototype.getCodec = n.hvc1SampleEntry.prototype.getCodec = function() {\n    var t, e = n.SampleEntry.prototype.getCodec.call(this);\n    if (this.hvcC) {\n      switch (e += \".\", this.hvcC.general_profile_space) {\n        case 0:\n          e += \"\";\n          break;\n        case 1:\n          e += \"A\";\n          break;\n        case 2:\n          e += \"B\";\n          break;\n        case 3:\n          e += \"C\";\n          break;\n      }\n      e += this.hvcC.general_profile_idc, e += \".\";\n      var i = this.hvcC.general_profile_compatibility, s = 0;\n      for (t = 0; t < 32 && (s |= i & 1, t != 31); t++)\n        s <<= 1, i >>= 1;\n      e += n.decimalToHex(s, 0), e += \".\", this.hvcC.general_tier_flag === 0 ? e += \"L\" : e += \"H\", e += this.hvcC.general_level_idc;\n      var o = !1, c = \"\";\n      for (t = 5; t >= 0; t--)\n        (this.hvcC.general_constraint_indicator[t] || o) && (c = \".\" + n.decimalToHex(this.hvcC.general_constraint_indicator[t], 0) + c, o = !0);\n      e += c;\n    }\n    return e;\n  }, n.vvc1SampleEntry.prototype.getCodec = n.vvi1SampleEntry.prototype.getCodec = function() {\n    var t, e = n.SampleEntry.prototype.getCodec.call(this);\n    if (this.vvcC) {\n      e += \".\" + this.vvcC.general_profile_idc, this.vvcC.general_tier_flag ? e += \".H\" : e += \".L\", e += this.vvcC.general_level_idc;\n      var i = \"\";\n      if (this.vvcC.general_constraint_info) {\n        var s = [], o = 0;\n        o |= this.vvcC.ptl_frame_only_constraint << 7, o |= this.vvcC.ptl_multilayer_enabled << 6;\n        var c;\n        for (t = 0; t < this.vvcC.general_constraint_info.length; ++t)\n          o |= this.vvcC.general_constraint_info[t] >> 2 & 63, s.push(o), o && (c = t), o = this.vvcC.general_constraint_info[t] >> 2 & 3;\n        if (c === void 0)\n          i = \".CA\";\n        else {\n          i = \".C\";\n          var u = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\", _ = 0, g = 0;\n          for (t = 0; t <= c; ++t)\n            for (_ = _ << 8 | s[t], g += 8; g >= 5; ) {\n              var w = _ >> g - 5 & 31;\n              i += u[w], g -= 5, _ &= (1 << g) - 1;\n            }\n          g && (_ <<= 5 - g, i += u[_ & 31]);\n        }\n      }\n      e += i;\n    }\n    return e;\n  }, n.mp4aSampleEntry.prototype.getCodec = function() {\n    var t = n.SampleEntry.prototype.getCodec.call(this);\n    if (this.esds && this.esds.esd) {\n      var e = this.esds.esd.getOTI(), i = this.esds.esd.getAudioConfig();\n      return t + \".\" + n.decimalToHex(e) + (i ? \".\" + i : \"\");\n    } else\n      return t;\n  }, n.stxtSampleEntry.prototype.getCodec = function() {\n    var t = n.SampleEntry.prototype.getCodec.call(this);\n    return this.mime_format ? t + \".\" + this.mime_format : t;\n  }, n.vp08SampleEntry.prototype.getCodec = n.vp09SampleEntry.prototype.getCodec = function() {\n    var t = n.SampleEntry.prototype.getCodec.call(this), e = this.vpcC.level;\n    e == 0 && (e = \"00\");\n    var i = this.vpcC.bitDepth;\n    return i == 8 && (i = \"08\"), t + \".0\" + this.vpcC.profile + \".\" + e + \".\" + i;\n  }, n.av01SampleEntry.prototype.getCodec = function() {\n    var t = n.SampleEntry.prototype.getCodec.call(this), e = this.av1C.seq_level_idx_0;\n    e < 10 && (e = \"0\" + e);\n    var i;\n    return this.av1C.seq_profile === 2 && this.av1C.high_bitdepth === 1 ? i = this.av1C.twelve_bit === 1 ? \"12\" : \"10\" : this.av1C.seq_profile <= 2 && (i = this.av1C.high_bitdepth === 1 ? \"10\" : \"08\"), t + \".\" + this.av1C.seq_profile + \".\" + e + (this.av1C.seq_tier_0 ? \"H\" : \"M\") + \".\" + i;\n  }, n.Box.prototype.writeHeader = function(t, e) {\n    this.size += 8, this.size > f && (this.size += 8), this.type === \"uuid\" && (this.size += 16), r.debug(\"BoxWriter\", \"Writing box \" + this.type + \" of size: \" + this.size + \" at position \" + t.getPosition() + (e || \"\")), this.size > f ? t.writeUint32(1) : (this.sizePosition = t.getPosition(), t.writeUint32(this.size)), t.writeString(this.type, null, 4), this.type === \"uuid\" && t.writeUint8Array(this.uuid), this.size > f && t.writeUint64(this.size);\n  }, n.FullBox.prototype.writeHeader = function(t) {\n    this.size += 4, n.Box.prototype.writeHeader.call(this, t, \" v=\" + this.version + \" f=\" + this.flags), t.writeUint8(this.version), t.writeUint24(this.flags);\n  }, n.Box.prototype.write = function(t) {\n    this.type === \"mdat\" ? this.data && (this.size = this.data.length, this.writeHeader(t), t.writeUint8Array(this.data)) : (this.size = this.data ? this.data.length : 0, this.writeHeader(t), this.data && t.writeUint8Array(this.data));\n  }, n.ContainerBox.prototype.write = function(t) {\n    this.size = 0, this.writeHeader(t);\n    for (var e = 0; e < this.boxes.length; e++)\n      this.boxes[e] && (this.boxes[e].write(t), this.size += this.boxes[e].size);\n    r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n  }, n.TrackReferenceTypeBox.prototype.write = function(t) {\n    this.size = this.track_ids.length * 4, this.writeHeader(t), t.writeUint32Array(this.track_ids);\n  }, n.avcCBox.prototype.write = function(t) {\n    var e;\n    for (this.size = 7, e = 0; e < this.SPS.length; e++)\n      this.size += 2 + this.SPS[e].length;\n    for (e = 0; e < this.PPS.length; e++)\n      this.size += 2 + this.PPS[e].length;\n    for (this.ext && (this.size += this.ext.length), this.writeHeader(t), t.writeUint8(this.configurationVersion), t.writeUint8(this.AVCProfileIndication), t.writeUint8(this.profile_compatibility), t.writeUint8(this.AVCLevelIndication), t.writeUint8(this.lengthSizeMinusOne + 252), t.writeUint8(this.SPS.length + 224), e = 0; e < this.SPS.length; e++)\n      t.writeUint16(this.SPS[e].length), t.writeUint8Array(this.SPS[e].nalu);\n    for (t.writeUint8(this.PPS.length), e = 0; e < this.PPS.length; e++)\n      t.writeUint16(this.PPS[e].length), t.writeUint8Array(this.PPS[e].nalu);\n    this.ext && t.writeUint8Array(this.ext);\n  }, n.co64Box.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 4 + 8 * this.chunk_offsets.length, this.writeHeader(t), t.writeUint32(this.chunk_offsets.length), e = 0; e < this.chunk_offsets.length; e++)\n      t.writeUint64(this.chunk_offsets[e]);\n  }, n.cslgBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 * 5, this.writeHeader(t), t.writeInt32(this.compositionToDTSShift), t.writeInt32(this.leastDecodeToDisplayDelta), t.writeInt32(this.greatestDecodeToDisplayDelta), t.writeInt32(this.compositionStartTime), t.writeInt32(this.compositionEndTime);\n  }, n.cttsBox.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 4 + 8 * this.sample_counts.length, this.writeHeader(t), t.writeUint32(this.sample_counts.length), e = 0; e < this.sample_counts.length; e++)\n      t.writeUint32(this.sample_counts[e]), this.version === 1 ? t.writeInt32(this.sample_offsets[e]) : t.writeUint32(this.sample_offsets[e]);\n  }, n.drefBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.entries.length);\n    for (var e = 0; e < this.entries.length; e++)\n      this.entries[e].write(t), this.size += this.entries[e].size;\n    r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n  }, n.elngBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = this.extended_language.length, this.writeHeader(t), t.writeString(this.extended_language);\n  }, n.elstBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 + 12 * this.entries.length, this.writeHeader(t), t.writeUint32(this.entries.length);\n    for (var e = 0; e < this.entries.length; e++) {\n      var i = this.entries[e];\n      t.writeUint32(i.segment_duration), t.writeInt32(i.media_time), t.writeInt16(i.media_rate_integer), t.writeInt16(i.media_rate_fraction);\n    }\n  }, n.emsgBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 * 4 + this.message_data.length + (this.scheme_id_uri.length + 1) + (this.value.length + 1), this.writeHeader(t), t.writeCString(this.scheme_id_uri), t.writeCString(this.value), t.writeUint32(this.timescale), t.writeUint32(this.presentation_time_delta), t.writeUint32(this.event_duration), t.writeUint32(this.id), t.writeUint8Array(this.message_data);\n  }, n.ftypBox.prototype.write = function(t) {\n    this.size = 8 + 4 * this.compatible_brands.length, this.writeHeader(t), t.writeString(this.major_brand, null, 4), t.writeUint32(this.minor_version);\n    for (var e = 0; e < this.compatible_brands.length; e++)\n      t.writeString(this.compatible_brands[e], null, 4);\n  }, n.hdlrBox.prototype.write = function(t) {\n    this.size = 5 * 4 + this.name.length + 1, this.version = 0, this.flags = 0, this.writeHeader(t), t.writeUint32(0), t.writeString(this.handler, null, 4), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeCString(this.name);\n  }, n.kindBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = this.schemeURI.length + 1 + (this.value.length + 1), this.writeHeader(t), t.writeCString(this.schemeURI), t.writeCString(this.value);\n  }, n.mdhdBox.prototype.write = function(t) {\n    this.size = 4 * 4 + 2 * 2, this.flags = 0, this.version = 0, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.timescale), t.writeUint32(this.duration), t.writeUint16(this.language), t.writeUint16(0);\n  }, n.mehdBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.fragment_duration);\n  }, n.mfhdBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4, this.writeHeader(t), t.writeUint32(this.sequence_number);\n  }, n.mvhdBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 23 * 4 + 2 * 2, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.timescale), t.writeUint32(this.duration), t.writeUint32(this.rate), t.writeUint16(this.volume << 8), t.writeUint16(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32Array(this.matrix), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(this.next_track_id);\n  }, n.SampleEntry.prototype.writeHeader = function(t) {\n    this.size = 8, n.Box.prototype.writeHeader.call(this, t), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint8(0), t.writeUint16(this.data_reference_index);\n  }, n.SampleEntry.prototype.writeFooter = function(t) {\n    for (var e = 0; e < this.boxes.length; e++)\n      this.boxes[e].write(t), this.size += this.boxes[e].size;\n    r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n  }, n.SampleEntry.prototype.write = function(t) {\n    this.writeHeader(t), t.writeUint8Array(this.data), this.size += this.data.length, r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n  }, n.VisualSampleEntry.prototype.write = function(t) {\n    this.writeHeader(t), this.size += 2 * 7 + 6 * 4 + 32, t.writeUint16(0), t.writeUint16(0), t.writeUint32(0), t.writeUint32(0), t.writeUint32(0), t.writeUint16(this.width), t.writeUint16(this.height), t.writeUint32(this.horizresolution), t.writeUint32(this.vertresolution), t.writeUint32(0), t.writeUint16(this.frame_count), t.writeUint8(Math.min(31, this.compressorname.length)), t.writeString(this.compressorname, null, 31), t.writeUint16(this.depth), t.writeInt16(-1), this.writeFooter(t);\n  }, n.AudioSampleEntry.prototype.write = function(t) {\n    this.writeHeader(t), this.size += 2 * 4 + 3 * 4, t.writeUint32(0), t.writeUint32(0), t.writeUint16(this.channel_count), t.writeUint16(this.samplesize), t.writeUint16(0), t.writeUint16(0), t.writeUint32(this.samplerate << 16), this.writeFooter(t);\n  }, n.stppSampleEntry.prototype.write = function(t) {\n    this.writeHeader(t), this.size += this.namespace.length + 1 + this.schema_location.length + 1 + this.auxiliary_mime_types.length + 1, t.writeCString(this.namespace), t.writeCString(this.schema_location), t.writeCString(this.auxiliary_mime_types), this.writeFooter(t);\n  }, n.SampleGroupEntry.prototype.write = function(t) {\n    t.writeUint8Array(this.data);\n  }, n.sbgpBox.prototype.write = function(t) {\n    this.version = 1, this.flags = 0, this.size = 12 + 8 * this.entries.length, this.writeHeader(t), t.writeString(this.grouping_type, null, 4), t.writeUint32(this.grouping_type_parameter), t.writeUint32(this.entries.length);\n    for (var e = 0; e < this.entries.length; e++) {\n      var i = this.entries[e];\n      t.writeInt32(i.sample_count), t.writeInt32(i.group_description_index);\n    }\n  }, n.sgpdBox.prototype.write = function(t) {\n    var e, i;\n    for (this.flags = 0, this.size = 12, e = 0; e < this.entries.length; e++)\n      i = this.entries[e], this.version === 1 && (this.default_length === 0 && (this.size += 4), this.size += i.data.length);\n    for (this.writeHeader(t), t.writeString(this.grouping_type, null, 4), this.version === 1 && t.writeUint32(this.default_length), this.version >= 2 && t.writeUint32(this.default_sample_description_index), t.writeUint32(this.entries.length), e = 0; e < this.entries.length; e++)\n      i = this.entries[e], this.version === 1 && this.default_length === 0 && t.writeUint32(i.description_length), i.write(t);\n  }, n.sidxBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 * 4 + 2 + 2 + 12 * this.references.length, this.writeHeader(t), t.writeUint32(this.reference_ID), t.writeUint32(this.timescale), t.writeUint32(this.earliest_presentation_time), t.writeUint32(this.first_offset), t.writeUint16(0), t.writeUint16(this.references.length);\n    for (var e = 0; e < this.references.length; e++) {\n      var i = this.references[e];\n      t.writeUint32(i.reference_type << 31 | i.referenced_size), t.writeUint32(i.subsegment_duration), t.writeUint32(i.starts_with_SAP << 31 | i.SAP_type << 28 | i.SAP_delta_time);\n    }\n  }, n.smhdBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 1, this.size = 4, this.writeHeader(t), t.writeUint16(this.balance), t.writeUint16(0);\n  }, n.stcoBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 + 4 * this.chunk_offsets.length, this.writeHeader(t), t.writeUint32(this.chunk_offsets.length), t.writeUint32Array(this.chunk_offsets);\n  }, n.stscBox.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 4 + 12 * this.first_chunk.length, this.writeHeader(t), t.writeUint32(this.first_chunk.length), e = 0; e < this.first_chunk.length; e++)\n      t.writeUint32(this.first_chunk[e]), t.writeUint32(this.samples_per_chunk[e]), t.writeUint32(this.sample_description_index[e]);\n  }, n.stsdBox.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 0, this.writeHeader(t), t.writeUint32(this.entries.length), this.size += 4, e = 0; e < this.entries.length; e++)\n      this.entries[e].write(t), this.size += this.entries[e].size;\n    r.debug(\"BoxWriter\", \"Adjusting box \" + this.type + \" with new size \" + this.size), t.adjustUint32(this.sizePosition, this.size);\n  }, n.stshBox.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 4 + 8 * this.shadowed_sample_numbers.length, this.writeHeader(t), t.writeUint32(this.shadowed_sample_numbers.length), e = 0; e < this.shadowed_sample_numbers.length; e++)\n      t.writeUint32(this.shadowed_sample_numbers[e]), t.writeUint32(this.sync_sample_numbers[e]);\n  }, n.stssBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 + 4 * this.sample_numbers.length, this.writeHeader(t), t.writeUint32(this.sample_numbers.length), t.writeUint32Array(this.sample_numbers);\n  }, n.stszBox.prototype.write = function(t) {\n    var e, i = !0;\n    if (this.version = 0, this.flags = 0, this.sample_sizes.length > 0)\n      for (e = 0; e + 1 < this.sample_sizes.length; )\n        if (this.sample_sizes[e + 1] !== this.sample_sizes[0]) {\n          i = !1;\n          break;\n        } else\n          e++;\n    else\n      i = !1;\n    this.size = 8, i || (this.size += 4 * this.sample_sizes.length), this.writeHeader(t), i ? t.writeUint32(this.sample_sizes[0]) : t.writeUint32(0), t.writeUint32(this.sample_sizes.length), i || t.writeUint32Array(this.sample_sizes);\n  }, n.sttsBox.prototype.write = function(t) {\n    var e;\n    for (this.version = 0, this.flags = 0, this.size = 4 + 8 * this.sample_counts.length, this.writeHeader(t), t.writeUint32(this.sample_counts.length), e = 0; e < this.sample_counts.length; e++)\n      t.writeUint32(this.sample_counts[e]), t.writeUint32(this.sample_deltas[e]);\n  }, n.tfdtBox.prototype.write = function(t) {\n    var e = Math.pow(2, 32) - 1;\n    this.version = this.baseMediaDecodeTime > e ? 1 : 0, this.flags = 0, this.size = 4, this.version === 1 && (this.size += 4), this.writeHeader(t), this.version === 1 ? t.writeUint64(this.baseMediaDecodeTime) : t.writeUint32(this.baseMediaDecodeTime);\n  }, n.tfhdBox.prototype.write = function(t) {\n    this.version = 0, this.size = 4, this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET && (this.size += 8), this.flags & n.TFHD_FLAG_SAMPLE_DESC && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_DUR && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_SIZE && (this.size += 4), this.flags & n.TFHD_FLAG_SAMPLE_FLAGS && (this.size += 4), this.writeHeader(t), t.writeUint32(this.track_id), this.flags & n.TFHD_FLAG_BASE_DATA_OFFSET && t.writeUint64(this.base_data_offset), this.flags & n.TFHD_FLAG_SAMPLE_DESC && t.writeUint32(this.default_sample_description_index), this.flags & n.TFHD_FLAG_SAMPLE_DUR && t.writeUint32(this.default_sample_duration), this.flags & n.TFHD_FLAG_SAMPLE_SIZE && t.writeUint32(this.default_sample_size), this.flags & n.TFHD_FLAG_SAMPLE_FLAGS && t.writeUint32(this.default_sample_flags);\n  }, n.tkhdBox.prototype.write = function(t) {\n    this.version = 0, this.size = 4 * 18 + 2 * 4, this.writeHeader(t), t.writeUint32(this.creation_time), t.writeUint32(this.modification_time), t.writeUint32(this.track_id), t.writeUint32(0), t.writeUint32(this.duration), t.writeUint32(0), t.writeUint32(0), t.writeInt16(this.layer), t.writeInt16(this.alternate_group), t.writeInt16(this.volume << 8), t.writeUint16(0), t.writeInt32Array(this.matrix), t.writeUint32(this.width), t.writeUint32(this.height);\n  }, n.trexBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = 4 * 5, this.writeHeader(t), t.writeUint32(this.track_id), t.writeUint32(this.default_sample_description_index), t.writeUint32(this.default_sample_duration), t.writeUint32(this.default_sample_size), t.writeUint32(this.default_sample_flags);\n  }, n.trunBox.prototype.write = function(t) {\n    this.version = 0, this.size = 4, this.flags & n.TRUN_FLAGS_DATA_OFFSET && (this.size += 4), this.flags & n.TRUN_FLAGS_FIRST_FLAG && (this.size += 4), this.flags & n.TRUN_FLAGS_DURATION && (this.size += 4 * this.sample_duration.length), this.flags & n.TRUN_FLAGS_SIZE && (this.size += 4 * this.sample_size.length), this.flags & n.TRUN_FLAGS_FLAGS && (this.size += 4 * this.sample_flags.length), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.size += 4 * this.sample_composition_time_offset.length), this.writeHeader(t), t.writeUint32(this.sample_count), this.flags & n.TRUN_FLAGS_DATA_OFFSET && (this.data_offset_position = t.getPosition(), t.writeInt32(this.data_offset)), this.flags & n.TRUN_FLAGS_FIRST_FLAG && t.writeUint32(this.first_sample_flags);\n    for (var e = 0; e < this.sample_count; e++)\n      this.flags & n.TRUN_FLAGS_DURATION && t.writeUint32(this.sample_duration[e]), this.flags & n.TRUN_FLAGS_SIZE && t.writeUint32(this.sample_size[e]), this.flags & n.TRUN_FLAGS_FLAGS && t.writeUint32(this.sample_flags[e]), this.flags & n.TRUN_FLAGS_CTS_OFFSET && (this.version === 0 ? t.writeUint32(this.sample_composition_time_offset[e]) : t.writeInt32(this.sample_composition_time_offset[e]));\n  }, n[\"url Box\"].prototype.write = function(t) {\n    this.version = 0, this.location ? (this.flags = 0, this.size = this.location.length + 1) : (this.flags = 1, this.size = 0), this.writeHeader(t), this.location && t.writeCString(this.location);\n  }, n[\"urn Box\"].prototype.write = function(t) {\n    this.version = 0, this.flags = 0, this.size = this.name.length + 1 + (this.location ? this.location.length + 1 : 0), this.writeHeader(t), t.writeCString(this.name), this.location && t.writeCString(this.location);\n  }, n.vmhdBox.prototype.write = function(t) {\n    this.version = 0, this.flags = 1, this.size = 8, this.writeHeader(t), t.writeUint16(this.graphicsmode), t.writeUint16Array(this.opcolor);\n  }, n.cttsBox.prototype.unpack = function(t) {\n    var e, i, s;\n    for (s = 0, e = 0; e < this.sample_counts.length; e++)\n      for (i = 0; i < this.sample_counts[e]; i++)\n        t[s].pts = t[s].dts + this.sample_offsets[e], s++;\n  }, n.sttsBox.prototype.unpack = function(t) {\n    var e, i, s;\n    for (s = 0, e = 0; e < this.sample_counts.length; e++)\n      for (i = 0; i < this.sample_counts[e]; i++)\n        s === 0 ? t[s].dts = 0 : t[s].dts = t[s - 1].dts + this.sample_deltas[e], s++;\n  }, n.stcoBox.prototype.unpack = function(t) {\n    var e;\n    for (e = 0; e < this.chunk_offsets.length; e++)\n      t[e].offset = this.chunk_offsets[e];\n  }, n.stscBox.prototype.unpack = function(t) {\n    var e, i, s, o, c;\n    for (o = 0, c = 0, e = 0; e < this.first_chunk.length; e++)\n      for (i = 0; i < (e + 1 < this.first_chunk.length ? this.first_chunk[e + 1] : 1 / 0); i++)\n        for (c++, s = 0; s < this.samples_per_chunk[e]; s++) {\n          if (t[o])\n            t[o].description_index = this.sample_description_index[e], t[o].chunk_index = c;\n          else\n            return;\n          o++;\n        }\n  }, n.stszBox.prototype.unpack = function(t) {\n    var e;\n    for (e = 0; e < this.sample_sizes.length; e++)\n      t[e].size = this.sample_sizes[e];\n  }, n.DIFF_BOXES_PROP_NAMES = [\n    \"boxes\",\n    \"entries\",\n    \"references\",\n    \"subsamples\",\n    \"items\",\n    \"item_infos\",\n    \"extents\",\n    \"associations\",\n    \"subsegments\",\n    \"ranges\",\n    \"seekLists\",\n    \"seekPoints\",\n    \"esd\",\n    \"levels\"\n  ], n.DIFF_PRIMITIVE_ARRAY_PROP_NAMES = [\n    \"compatible_brands\",\n    \"matrix\",\n    \"opcolor\",\n    \"sample_counts\",\n    \"sample_counts\",\n    \"sample_deltas\",\n    \"first_chunk\",\n    \"samples_per_chunk\",\n    \"sample_sizes\",\n    \"chunk_offsets\",\n    \"sample_offsets\",\n    \"sample_description_index\",\n    \"sample_duration\"\n  ], n.boxEqualFields = function(t, e) {\n    if (t && !e) return !1;\n    var i;\n    for (i in t)\n      if (!(n.DIFF_BOXES_PROP_NAMES.indexOf(i) > -1)) {\n        if (t[i] instanceof n.Box || e[i] instanceof n.Box)\n          continue;\n        if (typeof t[i] > \"u\" || typeof e[i] > \"u\")\n          continue;\n        if (typeof t[i] == \"function\" || typeof e[i] == \"function\")\n          continue;\n        if (t.subBoxNames && t.subBoxNames.indexOf(i.slice(0, 4)) > -1 || e.subBoxNames && e.subBoxNames.indexOf(i.slice(0, 4)) > -1)\n          continue;\n        if (i === \"data\" || i === \"start\" || i === \"size\" || i === \"creation_time\" || i === \"modification_time\")\n          continue;\n        if (n.DIFF_PRIMITIVE_ARRAY_PROP_NAMES.indexOf(i) > -1)\n          continue;\n        if (t[i] !== e[i])\n          return !1;\n      }\n    return !0;\n  }, n.boxEqual = function(t, e) {\n    if (!n.boxEqualFields(t, e))\n      return !1;\n    for (var i = 0; i < n.DIFF_BOXES_PROP_NAMES.length; i++) {\n      var s = n.DIFF_BOXES_PROP_NAMES[i];\n      if (t[s] && e[s] && !n.boxEqual(t[s], e[s]))\n        return !1;\n    }\n    return !0;\n  };\n  var v = function() {\n  };\n  v.prototype.parseSample = function(t) {\n    var e = {}, i;\n    e.resources = [];\n    var s = new h(t.data.buffer);\n    if (!t.subsamples || t.subsamples.length === 0)\n      e.documentString = s.readString(t.data.length);\n    else if (e.documentString = s.readString(t.subsamples[0].size), t.subsamples.length > 1)\n      for (i = 1; i < t.subsamples.length; i++)\n        e.resources[i] = s.readUint8Array(t.subsamples[i].size);\n    return typeof DOMParser < \"u\" && (e.document = new DOMParser().parseFromString(e.documentString, \"application/xml\")), e;\n  };\n  var b = function() {\n  };\n  b.prototype.parseSample = function(t) {\n    var e, i = new h(t.data.buffer);\n    return e = i.readString(t.data.length), e;\n  }, b.prototype.parseConfig = function(t) {\n    var e, i = new h(t.buffer);\n    return i.readUint32(), e = i.readCString(), e;\n  }, l.XMLSubtitlein4Parser = v, l.Textin4Parser = b;\n  var y = function(t) {\n    this.stream = t || new d(), this.boxes = [], this.mdats = [], this.moofs = [], this.isProgressive = !1, this.moovStartFound = !1, this.onMoovStart = null, this.moovStartSent = !1, this.onReady = null, this.readySent = !1, this.onSegment = null, this.onSamples = null, this.onError = null, this.sampleListBuilt = !1, this.fragmentedTracks = [], this.extractedTracks = [], this.isFragmentationInitialized = !1, this.sampleProcessingStarted = !1, this.nextMoofNumber = 0, this.itemListBuilt = !1, this.onSidx = null, this.sidxSent = !1;\n  };\n  y.prototype.setSegmentOptions = function(t, e, i) {\n    var s = this.getTrackById(t);\n    if (s) {\n      var o = {};\n      this.fragmentedTracks.push(o), o.id = t, o.user = e, o.trak = s, s.nextSample = 0, o.segmentStream = null, o.nb_samples = 1e3, o.rapAlignement = !0, i && (i.nbSamples && (o.nb_samples = i.nbSamples), i.rapAlignement && (o.rapAlignement = i.rapAlignement));\n    }\n  }, y.prototype.unsetSegmentOptions = function(t) {\n    for (var e = -1, i = 0; i < this.fragmentedTracks.length; i++) {\n      var s = this.fragmentedTracks[i];\n      s.id == t && (e = i);\n    }\n    e > -1 && this.fragmentedTracks.splice(e, 1);\n  }, y.prototype.setExtractionOptions = function(t, e, i) {\n    var s = this.getTrackById(t);\n    if (s) {\n      var o = {};\n      this.extractedTracks.push(o), o.id = t, o.user = e, o.trak = s, s.nextSample = 0, o.nb_samples = 1e3, o.samples = [], i && i.nbSamples && (o.nb_samples = i.nbSamples);\n    }\n  }, y.prototype.unsetExtractionOptions = function(t) {\n    for (var e = -1, i = 0; i < this.extractedTracks.length; i++) {\n      var s = this.extractedTracks[i];\n      s.id == t && (e = i);\n    }\n    e > -1 && this.extractedTracks.splice(e, 1);\n  }, y.prototype.parse = function() {\n    var t, e, i = !1;\n    if (!(this.restoreParsePosition && !this.restoreParsePosition()))\n      for (; ; )\n        if (this.hasIncompleteMdat && this.hasIncompleteMdat()) {\n          if (this.processIncompleteMdat())\n            continue;\n          return;\n        } else if (this.saveParsePosition && this.saveParsePosition(), t = n.parseOneBox(this.stream, i), t.code === n.ERR_NOT_ENOUGH_DATA)\n          if (this.processIncompleteBox) {\n            if (this.processIncompleteBox(t))\n              continue;\n            return;\n          } else\n            return;\n        else {\n          var s;\n          switch (e = t.box, s = e.type !== \"uuid\" ? e.type : e.uuid, this.boxes.push(e), s) {\n            case \"mdat\":\n              this.mdats.push(e);\n              break;\n            case \"moof\":\n              this.moofs.push(e);\n              break;\n            case \"moov\":\n              this.moovStartFound = !0, this.mdats.length === 0 && (this.isProgressive = !0);\n            default:\n              this[s] !== void 0 && r.warn(\"ISOFile\", \"Duplicate Box of type: \" + s + \", overriding previous occurrence\"), this[s] = e;\n              break;\n          }\n          this.updateUsedBytes && this.updateUsedBytes(e, t);\n        }\n  }, y.prototype.checkBuffer = function(t) {\n    if (t == null)\n      throw \"Buffer must be defined and non empty\";\n    if (t.fileStart === void 0)\n      throw \"Buffer must have a fileStart property\";\n    return t.byteLength === 0 ? (r.warn(\"ISOFile\", \"Ignoring empty buffer (fileStart: \" + t.fileStart + \")\"), this.stream.logBufferLevel(), !1) : (r.info(\"ISOFile\", \"Processing buffer (fileStart: \" + t.fileStart + \")\"), t.usedBytes = 0, this.stream.insertBuffer(t), this.stream.logBufferLevel(), this.stream.initialized() ? !0 : (r.warn(\"ISOFile\", \"Not ready to start parsing\"), !1));\n  }, y.prototype.appendBuffer = function(t, e) {\n    var i;\n    if (this.checkBuffer(t))\n      return this.parse(), this.moovStartFound && !this.moovStartSent && (this.moovStartSent = !0, this.onMoovStart && this.onMoovStart()), this.moov ? (this.sampleListBuilt || (this.buildSampleLists(), this.sampleListBuilt = !0), this.updateSampleLists(), this.onReady && !this.readySent && (this.readySent = !0, this.onReady(this.getInfo())), this.processSamples(e), this.nextSeekPosition ? (i = this.nextSeekPosition, this.nextSeekPosition = void 0) : i = this.nextParsePosition, this.stream.getEndFilePositionAfter && (i = this.stream.getEndFilePositionAfter(i))) : this.nextParsePosition ? i = this.nextParsePosition : i = 0, this.sidx && this.onSidx && !this.sidxSent && (this.onSidx(this.sidx), this.sidxSent = !0), this.meta && (this.flattenItemInfo && !this.itemListBuilt && (this.flattenItemInfo(), this.itemListBuilt = !0), this.processItems && this.processItems(this.onItem)), this.stream.cleanBuffers && (r.info(\"ISOFile\", \"Done processing buffer (fileStart: \" + t.fileStart + \") - next buffer to fetch should have a fileStart position of \" + i), this.stream.logBufferLevel(), this.stream.cleanBuffers(), this.stream.logBufferLevel(!0), r.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize())), i;\n  }, y.prototype.getInfo = function() {\n    var t, e, i = {}, s, o, c, u, _ = (/* @__PURE__ */ new Date(\"1904-01-01T00:00:00Z\")).getTime();\n    if (this.moov)\n      for (i.hasMoov = !0, i.duration = this.moov.mvhd.duration, i.timescale = this.moov.mvhd.timescale, i.isFragmented = this.moov.mvex != null, i.isFragmented && this.moov.mvex.mehd && (i.fragment_duration = this.moov.mvex.mehd.fragment_duration), i.isProgressive = this.isProgressive, i.hasIOD = this.moov.iods != null, i.brands = [], i.brands.push(this.ftyp.major_brand), i.brands = i.brands.concat(this.ftyp.compatible_brands), i.created = new Date(_ + this.moov.mvhd.creation_time * 1e3), i.modified = new Date(_ + this.moov.mvhd.modification_time * 1e3), i.tracks = [], i.audioTracks = [], i.videoTracks = [], i.subtitleTracks = [], i.metadataTracks = [], i.hintTracks = [], i.otherTracks = [], t = 0; t < this.moov.traks.length; t++) {\n        if (s = this.moov.traks[t], u = s.mdia.minf.stbl.stsd.entries[0], o = {}, i.tracks.push(o), o.id = s.tkhd.track_id, o.name = s.mdia.hdlr.name, o.references = [], s.tref)\n          for (e = 0; e < s.tref.boxes.length; e++)\n            c = {}, o.references.push(c), c.type = s.tref.boxes[e].type, c.track_ids = s.tref.boxes[e].track_ids;\n        s.edts && (o.edits = s.edts.elst.entries), o.created = new Date(_ + s.tkhd.creation_time * 1e3), o.modified = new Date(_ + s.tkhd.modification_time * 1e3), o.movie_duration = s.tkhd.duration, o.movie_timescale = i.timescale, o.layer = s.tkhd.layer, o.alternate_group = s.tkhd.alternate_group, o.volume = s.tkhd.volume, o.matrix = s.tkhd.matrix, o.track_width = s.tkhd.width / 65536, o.track_height = s.tkhd.height / 65536, o.timescale = s.mdia.mdhd.timescale, o.cts_shift = s.mdia.minf.stbl.cslg, o.duration = s.mdia.mdhd.duration, o.samples_duration = s.samples_duration, o.codec = u.getCodec(), o.kind = s.udta && s.udta.kinds.length ? s.udta.kinds[0] : { schemeURI: \"\", value: \"\" }, o.language = s.mdia.elng ? s.mdia.elng.extended_language : s.mdia.mdhd.languageString, o.nb_samples = s.samples.length, o.size = s.samples_size, o.bitrate = o.size * 8 * o.timescale / o.samples_duration, u.isAudio() ? (o.type = \"audio\", i.audioTracks.push(o), o.audio = {}, o.audio.sample_rate = u.getSampleRate(), o.audio.channel_count = u.getChannelCount(), o.audio.sample_size = u.getSampleSize()) : u.isVideo() ? (o.type = \"video\", i.videoTracks.push(o), o.video = {}, o.video.width = u.getWidth(), o.video.height = u.getHeight()) : u.isSubtitle() ? (o.type = \"subtitles\", i.subtitleTracks.push(o)) : u.isHint() ? (o.type = \"metadata\", i.hintTracks.push(o)) : u.isMetadata() ? (o.type = \"metadata\", i.metadataTracks.push(o)) : (o.type = \"metadata\", i.otherTracks.push(o));\n      }\n    else\n      i.hasMoov = !1;\n    if (i.mime = \"\", i.hasMoov && i.tracks) {\n      for (i.videoTracks && i.videoTracks.length > 0 ? i.mime += 'video/mp4; codecs=\"' : i.audioTracks && i.audioTracks.length > 0 ? i.mime += 'audio/mp4; codecs=\"' : i.mime += 'application/mp4; codecs=\"', t = 0; t < i.tracks.length; t++)\n        t !== 0 && (i.mime += \",\"), i.mime += i.tracks[t].codec;\n      i.mime += '\"; profiles=\"', i.mime += this.ftyp.compatible_brands.join(), i.mime += '\"';\n    }\n    return i;\n  }, y.prototype.processSamples = function(t) {\n    var e, i;\n    if (this.sampleProcessingStarted) {\n      if (this.isFragmentationInitialized && this.onSegment !== null)\n        for (e = 0; e < this.fragmentedTracks.length; e++) {\n          var s = this.fragmentedTracks[e];\n          for (i = s.trak; i.nextSample < i.samples.length && this.sampleProcessingStarted; ) {\n            r.debug(\"ISOFile\", \"Creating media fragment on track #\" + s.id + \" for sample \" + i.nextSample);\n            var o = this.createFragment(s.id, i.nextSample, s.segmentStream);\n            if (o)\n              s.segmentStream = o, i.nextSample++;\n            else\n              break;\n            if ((i.nextSample % s.nb_samples === 0 || t || i.nextSample >= i.samples.length) && (r.info(\"ISOFile\", \"Sending fragmented data on track #\" + s.id + \" for samples [\" + Math.max(0, i.nextSample - s.nb_samples) + \",\" + (i.nextSample - 1) + \"]\"), r.info(\"ISOFile\", \"Sample data size in memory: \" + this.getAllocatedSampleDataSize()), this.onSegment && this.onSegment(s.id, s.user, s.segmentStream.buffer, i.nextSample, t || i.nextSample >= i.samples.length), s.segmentStream = null, s !== this.fragmentedTracks[e]))\n              break;\n          }\n        }\n      if (this.onSamples !== null)\n        for (e = 0; e < this.extractedTracks.length; e++) {\n          var c = this.extractedTracks[e];\n          for (i = c.trak; i.nextSample < i.samples.length && this.sampleProcessingStarted; ) {\n            r.debug(\"ISOFile\", \"Exporting on track #\" + c.id + \" sample #\" + i.nextSample);\n            var u = this.getSample(i, i.nextSample);\n            if (u)\n              i.nextSample++, c.samples.push(u);\n            else\n              break;\n            if ((i.nextSample % c.nb_samples === 0 || i.nextSample >= i.samples.length) && (r.debug(\"ISOFile\", \"Sending samples on track #\" + c.id + \" for sample \" + i.nextSample), this.onSamples && this.onSamples(c.id, c.user, c.samples), c.samples = [], c !== this.extractedTracks[e]))\n              break;\n          }\n        }\n    }\n  }, y.prototype.getBox = function(t) {\n    var e = this.getBoxes(t, !0);\n    return e.length ? e[0] : null;\n  }, y.prototype.getBoxes = function(t, e) {\n    var i = [];\n    return y._sweep.call(this, t, i, e), i;\n  }, y._sweep = function(t, e, i) {\n    this.type && this.type == t && e.push(this);\n    for (var s in this.boxes) {\n      if (e.length && i) return;\n      y._sweep.call(this.boxes[s], t, e, i);\n    }\n  }, y.prototype.getTrackSamplesInfo = function(t) {\n    var e = this.getTrackById(t);\n    if (e)\n      return e.samples;\n  }, y.prototype.getTrackSample = function(t, e) {\n    var i = this.getTrackById(t), s = this.getSample(i, e);\n    return s;\n  }, y.prototype.releaseUsedSamples = function(t, e) {\n    var i = 0, s = this.getTrackById(t);\n    s.lastValidSample || (s.lastValidSample = 0);\n    for (var o = s.lastValidSample; o < e; o++)\n      i += this.releaseSample(s, o);\n    r.info(\"ISOFile\", \"Track #\" + t + \" released samples up to \" + e + \" (released size: \" + i + \", remaining: \" + this.samplesDataSize + \")\"), s.lastValidSample = e;\n  }, y.prototype.start = function() {\n    this.sampleProcessingStarted = !0, this.processSamples(!1);\n  }, y.prototype.stop = function() {\n    this.sampleProcessingStarted = !1;\n  }, y.prototype.flush = function() {\n    r.info(\"ISOFile\", \"Flushing remaining samples\"), this.updateSampleLists(), this.processSamples(!0), this.stream.cleanBuffers(), this.stream.logBufferLevel(!0);\n  }, y.prototype.seekTrack = function(t, e, i) {\n    var s, o, c = 1 / 0, u = 0, _ = 0, g;\n    if (i.samples.length === 0)\n      return r.info(\"ISOFile\", \"No sample in track, cannot seek! Using time \" + r.getDurationString(0, 1) + \" and offset: 0\"), { offset: 0, time: 0 };\n    for (s = 0; s < i.samples.length; s++) {\n      if (o = i.samples[s], s === 0)\n        _ = 0, g = o.timescale;\n      else if (o.cts > t * o.timescale) {\n        _ = s - 1;\n        break;\n      }\n      e && o.is_sync && (u = s);\n    }\n    for (e && (_ = u), t = i.samples[_].cts, i.nextSample = _; i.samples[_].alreadyRead === i.samples[_].size && i.samples[_ + 1]; )\n      _++;\n    return c = i.samples[_].offset + i.samples[_].alreadyRead, r.info(\"ISOFile\", \"Seeking to \" + (e ? \"RAP\" : \"\") + \" sample #\" + i.nextSample + \" on track \" + i.tkhd.track_id + \", time \" + r.getDurationString(t, g) + \" and offset: \" + c), { offset: c, time: t / g };\n  }, y.prototype.seek = function(t, e) {\n    var i = this.moov, s, o, c, u = { offset: 1 / 0, time: 1 / 0 };\n    if (this.moov) {\n      for (c = 0; c < i.traks.length; c++)\n        s = i.traks[c], o = this.seekTrack(t, e, s), o.offset < u.offset && (u.offset = o.offset), o.time < u.time && (u.time = o.time);\n      return r.info(\"ISOFile\", \"Seeking at time \" + r.getDurationString(u.time, 1) + \" needs a buffer with a fileStart position of \" + u.offset), u.offset === 1 / 0 ? u = { offset: this.nextParsePosition, time: 0 } : u.offset = this.stream.getEndFilePositionAfter(u.offset), r.info(\"ISOFile\", \"Adjusted seek position (after checking data already in buffer): \" + u.offset), u;\n    } else\n      throw \"Cannot seek: moov not received!\";\n  }, y.prototype.equal = function(t) {\n    for (var e = 0; e < this.boxes.length && e < t.boxes.length; ) {\n      var i = this.boxes[e], s = t.boxes[e];\n      if (!n.boxEqual(i, s))\n        return !1;\n      e++;\n    }\n    return !0;\n  }, l.ISOFile = y, y.prototype.lastBoxStartPosition = 0, y.prototype.parsingMdat = null, y.prototype.nextParsePosition = 0, y.prototype.discardMdatData = !1, y.prototype.processIncompleteBox = function(t) {\n    var e, i, s;\n    return t.type === \"mdat\" ? (e = new n[t.type + \"Box\"](t.size), this.parsingMdat = e, this.boxes.push(e), this.mdats.push(e), e.start = t.start, e.hdr_size = t.hdr_size, this.stream.addUsedBytes(e.hdr_size), this.lastBoxStartPosition = e.start + e.size, s = this.stream.seek(e.start + e.size, !1, this.discardMdatData), s ? (this.parsingMdat = null, !0) : (this.moovStartFound ? this.nextParsePosition = this.stream.findEndContiguousBuf() : this.nextParsePosition = e.start + e.size, !1)) : (t.type === \"moov\" && (this.moovStartFound = !0, this.mdats.length === 0 && (this.isProgressive = !0)), i = this.stream.mergeNextBuffer ? this.stream.mergeNextBuffer() : !1, i ? (this.nextParsePosition = this.stream.getEndPosition(), !0) : (t.type ? this.moovStartFound ? this.nextParsePosition = this.stream.getEndPosition() : this.nextParsePosition = this.stream.getPosition() + t.size : this.nextParsePosition = this.stream.getEndPosition(), !1));\n  }, y.prototype.hasIncompleteMdat = function() {\n    return this.parsingMdat !== null;\n  }, y.prototype.processIncompleteMdat = function() {\n    var t, e;\n    return t = this.parsingMdat, e = this.stream.seek(t.start + t.size, !1, this.discardMdatData), e ? (r.debug(\"ISOFile\", \"Found 'mdat' end in buffered data\"), this.parsingMdat = null, !0) : (this.nextParsePosition = this.stream.findEndContiguousBuf(), !1);\n  }, y.prototype.restoreParsePosition = function() {\n    return this.stream.seek(this.lastBoxStartPosition, !0, this.discardMdatData);\n  }, y.prototype.saveParsePosition = function() {\n    this.lastBoxStartPosition = this.stream.getPosition();\n  }, y.prototype.updateUsedBytes = function(t, e) {\n    this.stream.addUsedBytes && (t.type === \"mdat\" ? (this.stream.addUsedBytes(t.hdr_size), this.discardMdatData && this.stream.addUsedBytes(t.size - t.hdr_size)) : this.stream.addUsedBytes(t.size));\n  }, y.prototype.add = n.Box.prototype.add, y.prototype.addBox = n.Box.prototype.addBox, y.prototype.init = function(t) {\n    var e = t || {};\n    this.add(\"ftyp\").set(\"major_brand\", e.brands && e.brands[0] || \"iso4\").set(\"minor_version\", 0).set(\"compatible_brands\", e.brands || [\"iso4\"]);\n    var i = this.add(\"moov\");\n    return i.add(\"mvhd\").set(\"timescale\", e.timescale || 600).set(\"rate\", e.rate || 65536).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"duration\", e.duration || 0).set(\"volume\", e.width ? 0 : 256).set(\"matrix\", [65536, 0, 0, 0, 65536, 0, 0, 0, 1073741824]).set(\"next_track_id\", 1), i.add(\"mvex\"), this;\n  }, y.prototype.addTrack = function(t) {\n    this.moov || this.init(t);\n    var e = t || {};\n    e.width = e.width || 320, e.height = e.height || 320, e.id = e.id || this.moov.mvhd.next_track_id, e.type = e.type || \"avc1\";\n    var i = this.moov.add(\"trak\");\n    this.moov.mvhd.next_track_id = e.id + 1, i.add(\"tkhd\").set(\"flags\", n.TKHD_FLAG_ENABLED | n.TKHD_FLAG_IN_MOVIE | n.TKHD_FLAG_IN_PREVIEW).set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"track_id\", e.id).set(\"duration\", e.duration || 0).set(\"layer\", e.layer || 0).set(\"alternate_group\", 0).set(\"volume\", 1).set(\"matrix\", [0, 0, 0, 0, 0, 0, 0, 0, 0]).set(\"width\", e.width << 16).set(\"height\", e.height << 16);\n    var s = i.add(\"mdia\");\n    s.add(\"mdhd\").set(\"creation_time\", 0).set(\"modification_time\", 0).set(\"timescale\", e.timescale || 1).set(\"duration\", e.media_duration || 0).set(\"language\", e.language || \"und\"), s.add(\"hdlr\").set(\"handler\", e.hdlr || \"vide\").set(\"name\", e.name || \"Track created with MP4Box.js\"), s.add(\"elng\").set(\"extended_language\", e.language || \"fr-FR\");\n    var o = s.add(\"minf\");\n    if (n[e.type + \"SampleEntry\"] !== void 0) {\n      var c = new n[e.type + \"SampleEntry\"]();\n      c.data_reference_index = 1;\n      var u = \"\";\n      for (var _ in n.sampleEntryCodes)\n        for (var g = n.sampleEntryCodes[_], w = 0; w < g.length; w++)\n          if (g.indexOf(e.type) > -1) {\n            u = _;\n            break;\n          }\n      switch (u) {\n        case \"Visual\":\n          if (o.add(\"vmhd\").set(\"graphicsmode\", 0).set(\"opcolor\", [0, 0, 0]), c.set(\"width\", e.width).set(\"height\", e.height).set(\"horizresolution\", 72 << 16).set(\"vertresolution\", 72 << 16).set(\"frame_count\", 1).set(\"compressorname\", e.type + \" Compressor\").set(\"depth\", 24), e.avcDecoderConfigRecord) {\n            var S = new n.avcCBox(), U = new h(e.avcDecoderConfigRecord);\n            S.parse(U), c.addBox(S);\n          }\n          break;\n        case \"Audio\":\n          o.add(\"smhd\").set(\"balance\", e.balance || 0), c.set(\"channel_count\", e.channel_count || 2).set(\"samplesize\", e.samplesize || 16).set(\"samplerate\", e.samplerate || 65536);\n          break;\n        case \"Hint\":\n          o.add(\"hmhd\");\n          break;\n        case \"Subtitle\":\n          switch (o.add(\"sthd\"), e.type) {\n            case \"stpp\":\n              c.set(\"namespace\", e.namespace || \"nonamespace\").set(\"schema_location\", e.schema_location || \"\").set(\"auxiliary_mime_types\", e.auxiliary_mime_types || \"\");\n              break;\n          }\n          break;\n        case \"Metadata\":\n          o.add(\"nmhd\");\n          break;\n        case \"System\":\n          o.add(\"nmhd\");\n          break;\n        default:\n          o.add(\"nmhd\");\n          break;\n      }\n      e.description && c.addBox(e.description), e.description_boxes && e.description_boxes.forEach(function(x) {\n        c.addBox(x);\n      }), o.add(\"dinf\").add(\"dref\").addEntry(new n[\"url Box\"]().set(\"flags\", 1));\n      var C = o.add(\"stbl\");\n      return C.add(\"stsd\").addEntry(c), C.add(\"stts\").set(\"sample_counts\", []).set(\"sample_deltas\", []), C.add(\"stsc\").set(\"first_chunk\", []).set(\"samples_per_chunk\", []).set(\"sample_description_index\", []), C.add(\"stco\").set(\"chunk_offsets\", []), C.add(\"stsz\").set(\"sample_sizes\", []), this.moov.mvex.add(\"trex\").set(\"track_id\", e.id).set(\"default_sample_description_index\", e.default_sample_description_index || 1).set(\"default_sample_duration\", e.default_sample_duration || 0).set(\"default_sample_size\", e.default_sample_size || 0).set(\"default_sample_flags\", e.default_sample_flags || 0), this.buildTrakSampleLists(i), e.id;\n    }\n  }, n.Box.prototype.computeSize = function(t) {\n    var e = t || new a();\n    e.endianness = a.BIG_ENDIAN, this.write(e);\n  }, y.prototype.addSample = function(t, e, i) {\n    var s = i || {}, o = {}, c = this.getTrackById(t);\n    if (c !== null) {\n      o.number = c.samples.length, o.track_id = c.tkhd.track_id, o.timescale = c.mdia.mdhd.timescale, o.description_index = s.sample_description_index ? s.sample_description_index - 1 : 0, o.description = c.mdia.minf.stbl.stsd.entries[o.description_index], o.data = e, o.size = e.byteLength, o.alreadyRead = o.size, o.duration = s.duration || 1, o.cts = s.cts || 0, o.dts = s.dts || 0, o.is_sync = s.is_sync || !1, o.is_leading = s.is_leading || 0, o.depends_on = s.depends_on || 0, o.is_depended_on = s.is_depended_on || 0, o.has_redundancy = s.has_redundancy || 0, o.degradation_priority = s.degradation_priority || 0, o.offset = 0, o.subsamples = s.subsamples, c.samples.push(o), c.samples_size += o.size, c.samples_duration += o.duration, c.first_dts || (c.first_dts = s.dts), this.processSamples();\n      var u = this.createSingleSampleMoof(o);\n      return this.addBox(u), u.computeSize(), u.trafs[0].truns[0].data_offset = u.size + 8, this.add(\"mdat\").data = new Uint8Array(e), o;\n    }\n  }, y.prototype.createSingleSampleMoof = function(t) {\n    var e = 0;\n    t.is_sync ? e = 1 << 25 : e = 65536;\n    var i = new n.moofBox();\n    i.add(\"mfhd\").set(\"sequence_number\", this.nextMoofNumber), this.nextMoofNumber++;\n    var s = i.add(\"traf\"), o = this.getTrackById(t.track_id);\n    return s.add(\"tfhd\").set(\"track_id\", t.track_id).set(\"flags\", n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF), s.add(\"tfdt\").set(\"baseMediaDecodeTime\", t.dts - (o.first_dts || 0)), s.add(\"trun\").set(\"flags\", n.TRUN_FLAGS_DATA_OFFSET | n.TRUN_FLAGS_DURATION | n.TRUN_FLAGS_SIZE | n.TRUN_FLAGS_FLAGS | n.TRUN_FLAGS_CTS_OFFSET).set(\"data_offset\", 0).set(\"first_sample_flags\", 0).set(\"sample_count\", 1).set(\"sample_duration\", [t.duration]).set(\"sample_size\", [t.size]).set(\"sample_flags\", [e]).set(\"sample_composition_time_offset\", [t.cts - t.dts]), i;\n  }, y.prototype.lastMoofIndex = 0, y.prototype.samplesDataSize = 0, y.prototype.resetTables = function() {\n    var t, e, i, s, o, c, u, _;\n    for (this.initial_duration = this.moov.mvhd.duration, this.moov.mvhd.duration = 0, t = 0; t < this.moov.traks.length; t++) {\n      e = this.moov.traks[t], e.tkhd.duration = 0, e.mdia.mdhd.duration = 0, i = e.mdia.minf.stbl.stco || e.mdia.minf.stbl.co64, i.chunk_offsets = [], s = e.mdia.minf.stbl.stsc, s.first_chunk = [], s.samples_per_chunk = [], s.sample_description_index = [], o = e.mdia.minf.stbl.stsz || e.mdia.minf.stbl.stz2, o.sample_sizes = [], c = e.mdia.minf.stbl.stts, c.sample_counts = [], c.sample_deltas = [], u = e.mdia.minf.stbl.ctts, u && (u.sample_counts = [], u.sample_offsets = []), _ = e.mdia.minf.stbl.stss;\n      var g = e.mdia.minf.stbl.boxes.indexOf(_);\n      g != -1 && (e.mdia.minf.stbl.boxes[g] = null);\n    }\n  }, y.initSampleGroups = function(t, e, i, s, o) {\n    var c, u, _, g;\n    function w(S, U, C) {\n      this.grouping_type = S, this.grouping_type_parameter = U, this.sbgp = C, this.last_sample_in_run = -1, this.entry_index = -1;\n    }\n    for (e && (e.sample_groups_info = []), t.sample_groups_info || (t.sample_groups_info = []), u = 0; u < i.length; u++) {\n      for (g = i[u].grouping_type + \"/\" + i[u].grouping_type_parameter, _ = new w(i[u].grouping_type, i[u].grouping_type_parameter, i[u]), e && (e.sample_groups_info[g] = _), t.sample_groups_info[g] || (t.sample_groups_info[g] = _), c = 0; c < s.length; c++)\n        s[c].grouping_type === i[u].grouping_type && (_.description = s[c], _.description.used = !0);\n      if (o)\n        for (c = 0; c < o.length; c++)\n          o[c].grouping_type === i[u].grouping_type && (_.fragment_description = o[c], _.fragment_description.used = !0, _.is_fragment = !0);\n    }\n    if (e) {\n      if (o)\n        for (u = 0; u < o.length; u++)\n          !o[u].used && o[u].version >= 2 && (g = o[u].grouping_type + \"/0\", _ = new w(o[u].grouping_type, 0), _.is_fragment = !0, e.sample_groups_info[g] || (e.sample_groups_info[g] = _));\n    } else\n      for (u = 0; u < s.length; u++)\n        !s[u].used && s[u].version >= 2 && (g = s[u].grouping_type + \"/0\", _ = new w(s[u].grouping_type, 0), t.sample_groups_info[g] || (t.sample_groups_info[g] = _));\n  }, y.setSampleGroupProperties = function(t, e, i, s) {\n    var o, c;\n    e.sample_groups = [];\n    for (o in s)\n      if (e.sample_groups[o] = {}, e.sample_groups[o].grouping_type = s[o].grouping_type, e.sample_groups[o].grouping_type_parameter = s[o].grouping_type_parameter, i >= s[o].last_sample_in_run && (s[o].last_sample_in_run < 0 && (s[o].last_sample_in_run = 0), s[o].entry_index++, s[o].entry_index <= s[o].sbgp.entries.length - 1 && (s[o].last_sample_in_run += s[o].sbgp.entries[s[o].entry_index].sample_count)), s[o].entry_index <= s[o].sbgp.entries.length - 1 ? e.sample_groups[o].group_description_index = s[o].sbgp.entries[s[o].entry_index].group_description_index : e.sample_groups[o].group_description_index = -1, e.sample_groups[o].group_description_index !== 0) {\n        var u;\n        s[o].fragment_description ? u = s[o].fragment_description : u = s[o].description, e.sample_groups[o].group_description_index > 0 ? (e.sample_groups[o].group_description_index > 65535 ? c = (e.sample_groups[o].group_description_index >> 16) - 1 : c = e.sample_groups[o].group_description_index - 1, u && c >= 0 && (e.sample_groups[o].description = u.entries[c])) : u && u.version >= 2 && u.default_group_description_index > 0 && (e.sample_groups[o].description = u.entries[u.default_group_description_index - 1]);\n      }\n  }, y.process_sdtp = function(t, e, i) {\n    e && (t ? (e.is_leading = t.is_leading[i], e.depends_on = t.sample_depends_on[i], e.is_depended_on = t.sample_is_depended_on[i], e.has_redundancy = t.sample_has_redundancy[i]) : (e.is_leading = 0, e.depends_on = 0, e.is_depended_on = 0, e.has_redundancy = 0));\n  }, y.prototype.buildSampleLists = function() {\n    var t, e;\n    for (t = 0; t < this.moov.traks.length; t++)\n      e = this.moov.traks[t], this.buildTrakSampleLists(e);\n  }, y.prototype.buildTrakSampleLists = function(t) {\n    var e, i, s, o, c, u, _, g, w, S, U, C, x, P, T, yt, Ut, ht, O, tt, Ht, ee, et, Et;\n    if (t.samples = [], t.samples_duration = 0, t.samples_size = 0, i = t.mdia.minf.stbl.stco || t.mdia.minf.stbl.co64, s = t.mdia.minf.stbl.stsc, o = t.mdia.minf.stbl.stsz || t.mdia.minf.stbl.stz2, c = t.mdia.minf.stbl.stts, u = t.mdia.minf.stbl.ctts, _ = t.mdia.minf.stbl.stss, g = t.mdia.minf.stbl.stsd, w = t.mdia.minf.stbl.subs, C = t.mdia.minf.stbl.stdp, S = t.mdia.minf.stbl.sbgps, U = t.mdia.minf.stbl.sgpds, ht = -1, O = -1, tt = -1, Ht = -1, ee = 0, et = 0, Et = 0, y.initSampleGroups(t, null, S, U), !(typeof o > \"u\")) {\n      for (e = 0; e < o.sample_sizes.length; e++) {\n        var F = {};\n        F.number = e, F.track_id = t.tkhd.track_id, F.timescale = t.mdia.mdhd.timescale, F.alreadyRead = 0, t.samples[e] = F, F.size = o.sample_sizes[e], t.samples_size += F.size, e === 0 ? (P = 1, x = 0, F.chunk_index = P, F.chunk_run_index = x, Ut = s.samples_per_chunk[x], yt = 0, x + 1 < s.first_chunk.length ? T = s.first_chunk[x + 1] - 1 : T = 1 / 0) : e < Ut ? (F.chunk_index = P, F.chunk_run_index = x) : (P++, F.chunk_index = P, yt = 0, P <= T || (x++, x + 1 < s.first_chunk.length ? T = s.first_chunk[x + 1] - 1 : T = 1 / 0), F.chunk_run_index = x, Ut += s.samples_per_chunk[x]), F.description_index = s.sample_description_index[F.chunk_run_index] - 1, F.description = g.entries[F.description_index], F.offset = i.chunk_offsets[F.chunk_index - 1] + yt, yt += F.size, e > ht && (O++, ht < 0 && (ht = 0), ht += c.sample_counts[O]), e > 0 ? (t.samples[e - 1].duration = c.sample_deltas[O], t.samples_duration += t.samples[e - 1].duration, F.dts = t.samples[e - 1].dts + t.samples[e - 1].duration) : F.dts = 0, u ? (e >= tt && (Ht++, tt < 0 && (tt = 0), tt += u.sample_counts[Ht]), F.cts = t.samples[e].dts + u.sample_offsets[Ht]) : F.cts = F.dts, _ ? (e == _.sample_numbers[ee] - 1 ? (F.is_sync = !0, ee++) : (F.is_sync = !1, F.degradation_priority = 0), w && w.entries[et].sample_delta + Et == e + 1 && (F.subsamples = w.entries[et].subsamples, Et += w.entries[et].sample_delta, et++)) : F.is_sync = !0, y.process_sdtp(t.mdia.minf.stbl.sdtp, F, F.number), C ? F.degradation_priority = C.priority[e] : F.degradation_priority = 0, w && w.entries[et].sample_delta + Et == e && (F.subsamples = w.entries[et].subsamples, Et += w.entries[et].sample_delta), (S.length > 0 || U.length > 0) && y.setSampleGroupProperties(t, F, e, t.sample_groups_info);\n      }\n      e > 0 && (t.samples[e - 1].duration = Math.max(t.mdia.mdhd.duration - t.samples[e - 1].dts, 0), t.samples_duration += t.samples[e - 1].duration);\n    }\n  }, y.prototype.updateSampleLists = function() {\n    var t, e, i, s, o, c, u, _, g, w, S, U, C, x, P;\n    if (this.moov !== void 0) {\n      for (; this.lastMoofIndex < this.moofs.length; )\n        if (g = this.moofs[this.lastMoofIndex], this.lastMoofIndex++, g.type == \"moof\")\n          for (w = g, t = 0; t < w.trafs.length; t++) {\n            for (S = w.trafs[t], U = this.getTrackById(S.tfhd.track_id), C = this.getTrexById(S.tfhd.track_id), S.tfhd.flags & n.TFHD_FLAG_SAMPLE_DESC ? s = S.tfhd.default_sample_description_index : s = C ? C.default_sample_description_index : 1, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_DUR ? o = S.tfhd.default_sample_duration : o = C ? C.default_sample_duration : 0, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_SIZE ? c = S.tfhd.default_sample_size : c = C ? C.default_sample_size : 0, S.tfhd.flags & n.TFHD_FLAG_SAMPLE_FLAGS ? u = S.tfhd.default_sample_flags : u = C ? C.default_sample_flags : 0, S.sample_number = 0, S.sbgps.length > 0 && y.initSampleGroups(U, S, S.sbgps, U.mdia.minf.stbl.sgpds, S.sgpds), e = 0; e < S.truns.length; e++) {\n              var T = S.truns[e];\n              for (i = 0; i < T.sample_count; i++) {\n                x = {}, x.moof_number = this.lastMoofIndex, x.number_in_traf = S.sample_number, S.sample_number++, x.number = U.samples.length, S.first_sample_index = U.samples.length, U.samples.push(x), x.track_id = U.tkhd.track_id, x.timescale = U.mdia.mdhd.timescale, x.description_index = s - 1, x.description = U.mdia.minf.stbl.stsd.entries[x.description_index], x.size = c, T.flags & n.TRUN_FLAGS_SIZE && (x.size = T.sample_size[i]), U.samples_size += x.size, x.duration = o, T.flags & n.TRUN_FLAGS_DURATION && (x.duration = T.sample_duration[i]), U.samples_duration += x.duration, U.first_traf_merged || i > 0 ? x.dts = U.samples[U.samples.length - 2].dts + U.samples[U.samples.length - 2].duration : (S.tfdt ? x.dts = S.tfdt.baseMediaDecodeTime : x.dts = 0, U.first_traf_merged = !0), x.cts = x.dts, T.flags & n.TRUN_FLAGS_CTS_OFFSET && (x.cts = x.dts + T.sample_composition_time_offset[i]), P = u, T.flags & n.TRUN_FLAGS_FLAGS ? P = T.sample_flags[i] : i === 0 && T.flags & n.TRUN_FLAGS_FIRST_FLAG && (P = T.first_sample_flags), x.is_sync = !(P >> 16 & 1), x.is_leading = P >> 26 & 3, x.depends_on = P >> 24 & 3, x.is_depended_on = P >> 22 & 3, x.has_redundancy = P >> 20 & 3, x.degradation_priority = P & 65535;\n                var yt = !!(S.tfhd.flags & n.TFHD_FLAG_BASE_DATA_OFFSET), Ut = !!(S.tfhd.flags & n.TFHD_FLAG_DEFAULT_BASE_IS_MOOF), ht = !!(T.flags & n.TRUN_FLAGS_DATA_OFFSET), O = 0;\n                yt ? O = S.tfhd.base_data_offset : Ut || e === 0 ? O = w.start : O = _, e === 0 && i === 0 ? ht ? x.offset = O + T.data_offset : x.offset = O : x.offset = _, _ = x.offset + x.size, (S.sbgps.length > 0 || S.sgpds.length > 0 || U.mdia.minf.stbl.sbgps.length > 0 || U.mdia.minf.stbl.sgpds.length > 0) && y.setSampleGroupProperties(U, x, x.number_in_traf, S.sample_groups_info);\n              }\n            }\n            if (S.subs) {\n              U.has_fragment_subsamples = !0;\n              var tt = S.first_sample_index;\n              for (e = 0; e < S.subs.entries.length; e++)\n                tt += S.subs.entries[e].sample_delta, x = U.samples[tt - 1], x.subsamples = S.subs.entries[e].subsamples;\n            }\n          }\n    }\n  }, y.prototype.getSample = function(t, e) {\n    var i, s = t.samples[e];\n    if (!this.moov)\n      return null;\n    if (!s.data)\n      s.data = new Uint8Array(s.size), s.alreadyRead = 0, this.samplesDataSize += s.size, r.debug(\"ISOFile\", \"Allocating sample #\" + e + \" on track #\" + t.tkhd.track_id + \" of size \" + s.size + \" (total: \" + this.samplesDataSize + \")\");\n    else if (s.alreadyRead == s.size)\n      return s;\n    for (; ; ) {\n      var o = this.stream.findPosition(!0, s.offset + s.alreadyRead, !1);\n      if (o > -1) {\n        i = this.stream.buffers[o];\n        var c = i.byteLength - (s.offset + s.alreadyRead - i.fileStart);\n        if (s.size - s.alreadyRead <= c)\n          return r.debug(\"ISOFile\", \"Getting sample #\" + e + \" data (alreadyRead: \" + s.alreadyRead + \" offset: \" + (s.offset + s.alreadyRead - i.fileStart) + \" read size: \" + (s.size - s.alreadyRead) + \" full size: \" + s.size + \")\"), a.memcpy(\n            s.data.buffer,\n            s.alreadyRead,\n            i,\n            s.offset + s.alreadyRead - i.fileStart,\n            s.size - s.alreadyRead\n          ), i.usedBytes += s.size - s.alreadyRead, this.stream.logBufferLevel(), s.alreadyRead = s.size, s;\n        if (c === 0) return null;\n        r.debug(\"ISOFile\", \"Getting sample #\" + e + \" partial data (alreadyRead: \" + s.alreadyRead + \" offset: \" + (s.offset + s.alreadyRead - i.fileStart) + \" read size: \" + c + \" full size: \" + s.size + \")\"), a.memcpy(\n          s.data.buffer,\n          s.alreadyRead,\n          i,\n          s.offset + s.alreadyRead - i.fileStart,\n          c\n        ), s.alreadyRead += c, i.usedBytes += c, this.stream.logBufferLevel();\n      } else\n        return null;\n    }\n  }, y.prototype.releaseSample = function(t, e) {\n    var i = t.samples[e];\n    return i.data ? (this.samplesDataSize -= i.size, i.data = null, i.alreadyRead = 0, i.size) : 0;\n  }, y.prototype.getAllocatedSampleDataSize = function() {\n    return this.samplesDataSize;\n  }, y.prototype.getCodecs = function() {\n    var t, e = \"\";\n    for (t = 0; t < this.moov.traks.length; t++) {\n      var i = this.moov.traks[t];\n      t > 0 && (e += \",\"), e += i.mdia.minf.stbl.stsd.entries[0].getCodec();\n    }\n    return e;\n  }, y.prototype.getTrexById = function(t) {\n    var e;\n    if (!this.moov || !this.moov.mvex) return null;\n    for (e = 0; e < this.moov.mvex.trexs.length; e++) {\n      var i = this.moov.mvex.trexs[e];\n      if (i.track_id == t) return i;\n    }\n    return null;\n  }, y.prototype.getTrackById = function(t) {\n    if (this.moov === void 0)\n      return null;\n    for (var e = 0; e < this.moov.traks.length; e++) {\n      var i = this.moov.traks[e];\n      if (i.tkhd.track_id == t) return i;\n    }\n    return null;\n  }, y.prototype.items = [], y.prototype.itemsDataSize = 0, y.prototype.flattenItemInfo = function() {\n    var t = this.items, e, i, s, o = this.meta;\n    if (o != null && o.hdlr !== void 0 && o.iinf !== void 0) {\n      for (e = 0; e < o.iinf.item_infos.length; e++)\n        s = {}, s.id = o.iinf.item_infos[e].item_ID, t[s.id] = s, s.ref_to = [], s.name = o.iinf.item_infos[e].item_name, o.iinf.item_infos[e].protection_index > 0 && (s.protection = o.ipro.protections[o.iinf.item_infos[e].protection_index - 1]), o.iinf.item_infos[e].item_type ? s.type = o.iinf.item_infos[e].item_type : s.type = \"mime\", s.content_type = o.iinf.item_infos[e].content_type, s.content_encoding = o.iinf.item_infos[e].content_encoding;\n      if (o.iloc)\n        for (e = 0; e < o.iloc.items.length; e++) {\n          var c = o.iloc.items[e];\n          switch (s = t[c.item_ID], c.data_reference_index !== 0 && (r.warn(\"Item storage with reference to other files: not supported\"), s.source = o.dinf.boxes[c.data_reference_index - 1]), c.construction_method) {\n            case 0:\n              break;\n            case 1:\n              r.warn(\"Item storage with construction_method : not supported\");\n              break;\n            case 2:\n              r.warn(\"Item storage with construction_method : not supported\");\n              break;\n          }\n          for (s.extents = [], s.size = 0, i = 0; i < c.extents.length; i++)\n            s.extents[i] = {}, s.extents[i].offset = c.extents[i].extent_offset + c.base_offset, s.extents[i].length = c.extents[i].extent_length, s.extents[i].alreadyRead = 0, s.size += s.extents[i].length;\n        }\n      if (o.pitm && (t[o.pitm.item_id].primary = !0), o.iref)\n        for (e = 0; e < o.iref.references.length; e++) {\n          var u = o.iref.references[e];\n          for (i = 0; i < u.references.length; i++)\n            t[u.from_item_ID].ref_to.push({ type: u.type, id: u.references[i] });\n        }\n      if (o.iprp)\n        for (var _ = 0; _ < o.iprp.ipmas.length; _++) {\n          var g = o.iprp.ipmas[_];\n          for (e = 0; e < g.associations.length; e++) {\n            var w = g.associations[e];\n            for (s = t[w.id], s.properties === void 0 && (s.properties = {}, s.properties.boxes = []), i = 0; i < w.props.length; i++) {\n              var S = w.props[i];\n              if (S.property_index > 0 && S.property_index - 1 < o.iprp.ipco.boxes.length) {\n                var U = o.iprp.ipco.boxes[S.property_index - 1];\n                s.properties[U.type] = U, s.properties.boxes.push(U);\n              }\n            }\n          }\n        }\n    }\n  }, y.prototype.getItem = function(t) {\n    var e, i;\n    if (!this.meta)\n      return null;\n    if (i = this.items[t], !i.data && i.size)\n      i.data = new Uint8Array(i.size), i.alreadyRead = 0, this.itemsDataSize += i.size, r.debug(\"ISOFile\", \"Allocating item #\" + t + \" of size \" + i.size + \" (total: \" + this.itemsDataSize + \")\");\n    else if (i.alreadyRead === i.size)\n      return i;\n    for (var s = 0; s < i.extents.length; s++) {\n      var o = i.extents[s];\n      if (o.alreadyRead !== o.length) {\n        var c = this.stream.findPosition(!0, o.offset + o.alreadyRead, !1);\n        if (c > -1) {\n          e = this.stream.buffers[c];\n          var u = e.byteLength - (o.offset + o.alreadyRead - e.fileStart);\n          if (o.length - o.alreadyRead <= u)\n            r.debug(\"ISOFile\", \"Getting item #\" + t + \" extent #\" + s + \" data (alreadyRead: \" + o.alreadyRead + \" offset: \" + (o.offset + o.alreadyRead - e.fileStart) + \" read size: \" + (o.length - o.alreadyRead) + \" full extent size: \" + o.length + \" full item size: \" + i.size + \")\"), a.memcpy(\n              i.data.buffer,\n              i.alreadyRead,\n              e,\n              o.offset + o.alreadyRead - e.fileStart,\n              o.length - o.alreadyRead\n            ), e.usedBytes += o.length - o.alreadyRead, this.stream.logBufferLevel(), i.alreadyRead += o.length - o.alreadyRead, o.alreadyRead = o.length;\n          else\n            return r.debug(\"ISOFile\", \"Getting item #\" + t + \" extent #\" + s + \" partial data (alreadyRead: \" + o.alreadyRead + \" offset: \" + (o.offset + o.alreadyRead - e.fileStart) + \" read size: \" + u + \" full extent size: \" + o.length + \" full item size: \" + i.size + \")\"), a.memcpy(\n              i.data.buffer,\n              i.alreadyRead,\n              e,\n              o.offset + o.alreadyRead - e.fileStart,\n              u\n            ), o.alreadyRead += u, i.alreadyRead += u, e.usedBytes += u, this.stream.logBufferLevel(), null;\n        } else\n          return null;\n      }\n    }\n    return i.alreadyRead === i.size ? i : null;\n  }, y.prototype.releaseItem = function(t) {\n    var e = this.items[t];\n    if (e.data) {\n      this.itemsDataSize -= e.size, e.data = null, e.alreadyRead = 0;\n      for (var i = 0; i < e.extents.length; i++) {\n        var s = e.extents[i];\n        s.alreadyRead = 0;\n      }\n      return e.size;\n    } else\n      return 0;\n  }, y.prototype.processItems = function(t) {\n    for (var e in this.items) {\n      var i = this.items[e];\n      this.getItem(i.id), t && !i.sent && (t(i), i.sent = !0, i.data = null);\n    }\n  }, y.prototype.hasItem = function(t) {\n    for (var e in this.items) {\n      var i = this.items[e];\n      if (i.name === t)\n        return i.id;\n    }\n    return -1;\n  }, y.prototype.getMetaHandler = function() {\n    return this.meta ? this.meta.hdlr.handler : null;\n  }, y.prototype.getPrimaryItem = function() {\n    return !this.meta || !this.meta.pitm ? null : this.getItem(this.meta.pitm.item_id);\n  }, y.prototype.itemToFragmentedTrackFile = function(t) {\n    var e = t || {}, i = null;\n    if (e.itemId ? i = this.getItem(e.itemId) : i = this.getPrimaryItem(), i == null) return null;\n    var s = new y();\n    s.discardMdatData = !1;\n    var o = { type: i.type, description_boxes: i.properties.boxes };\n    i.properties.ispe && (o.width = i.properties.ispe.image_width, o.height = i.properties.ispe.image_height);\n    var c = s.addTrack(o);\n    return c ? (s.addSample(c, i.data), s) : null;\n  }, y.prototype.write = function(t) {\n    for (var e = 0; e < this.boxes.length; e++)\n      this.boxes[e].write(t);\n  }, y.prototype.createFragment = function(t, e, i) {\n    var s = this.getTrackById(t), o = this.getSample(s, e);\n    if (o == null)\n      return o = s.samples[e], this.nextSeekPosition ? this.nextSeekPosition = Math.min(o.offset + o.alreadyRead, this.nextSeekPosition) : this.nextSeekPosition = s.samples[e].offset + o.alreadyRead, null;\n    var c = i || new a();\n    c.endianness = a.BIG_ENDIAN;\n    var u = this.createSingleSampleMoof(o);\n    u.write(c), u.trafs[0].truns[0].data_offset = u.size + 8, r.debug(\"MP4Box\", \"Adjusting data_offset with new value \" + u.trafs[0].truns[0].data_offset), c.adjustUint32(u.trafs[0].truns[0].data_offset_position, u.trafs[0].truns[0].data_offset);\n    var _ = new n.mdatBox();\n    return _.data = o.data, _.write(c), c;\n  }, y.writeInitializationSegment = function(t, e, i, s) {\n    var o;\n    r.debug(\"ISOFile\", \"Generating initialization segment\");\n    var c = new a();\n    c.endianness = a.BIG_ENDIAN, t.write(c);\n    var u = e.add(\"mvex\");\n    for (i && u.add(\"mehd\").set(\"fragment_duration\", i), o = 0; o < e.traks.length; o++)\n      u.add(\"trex\").set(\"track_id\", e.traks[o].tkhd.track_id).set(\"default_sample_description_index\", 1).set(\"default_sample_duration\", s).set(\"default_sample_size\", 0).set(\"default_sample_flags\", 65536);\n    return e.write(c), c.buffer;\n  }, y.prototype.save = function(t) {\n    var e = new a();\n    e.endianness = a.BIG_ENDIAN, this.write(e), e.save(t);\n  }, y.prototype.getBuffer = function() {\n    var t = new a();\n    return t.endianness = a.BIG_ENDIAN, this.write(t), t.buffer;\n  }, y.prototype.initializeSegmentation = function() {\n    var t, e, i, s;\n    for (this.onSegment === null && r.warn(\"MP4Box\", \"No segmentation callback set!\"), this.isFragmentationInitialized || (this.isFragmentationInitialized = !0, this.nextMoofNumber = 0, this.resetTables()), e = [], t = 0; t < this.fragmentedTracks.length; t++) {\n      var o = new n.moovBox();\n      o.mvhd = this.moov.mvhd, o.boxes.push(o.mvhd), i = this.getTrackById(this.fragmentedTracks[t].id), o.boxes.push(i), o.traks.push(i), s = {}, s.id = i.tkhd.track_id, s.user = this.fragmentedTracks[t].user, s.buffer = y.writeInitializationSegment(this.ftyp, o, this.moov.mvex && this.moov.mvex.mehd ? this.moov.mvex.mehd.fragment_duration : void 0, this.moov.traks[t].samples.length > 0 ? this.moov.traks[t].samples[0].duration : 0), e.push(s);\n    }\n    return e;\n  }, n.Box.prototype.printHeader = function(t) {\n    this.size += 8, this.size > f && (this.size += 8), this.type === \"uuid\" && (this.size += 16), t.log(t.indent + \"size:\" + this.size), t.log(t.indent + \"type:\" + this.type);\n  }, n.FullBox.prototype.printHeader = function(t) {\n    this.size += 4, n.Box.prototype.printHeader.call(this, t), t.log(t.indent + \"version:\" + this.version), t.log(t.indent + \"flags:\" + this.flags);\n  }, n.Box.prototype.print = function(t) {\n    this.printHeader(t);\n  }, n.ContainerBox.prototype.print = function(t) {\n    this.printHeader(t);\n    for (var e = 0; e < this.boxes.length; e++)\n      if (this.boxes[e]) {\n        var i = t.indent;\n        t.indent += \" \", this.boxes[e].print(t), t.indent = i;\n      }\n  }, y.prototype.print = function(t) {\n    t.indent = \"\";\n    for (var e = 0; e < this.boxes.length; e++)\n      this.boxes[e] && this.boxes[e].print(t);\n  }, n.mvhdBox.prototype.print = function(t) {\n    n.FullBox.prototype.printHeader.call(this, t), t.log(t.indent + \"creation_time: \" + this.creation_time), t.log(t.indent + \"modification_time: \" + this.modification_time), t.log(t.indent + \"timescale: \" + this.timescale), t.log(t.indent + \"duration: \" + this.duration), t.log(t.indent + \"rate: \" + this.rate), t.log(t.indent + \"volume: \" + (this.volume >> 8)), t.log(t.indent + \"matrix: \" + this.matrix.join(\", \")), t.log(t.indent + \"next_track_id: \" + this.next_track_id);\n  }, n.tkhdBox.prototype.print = function(t) {\n    n.FullBox.prototype.printHeader.call(this, t), t.log(t.indent + \"creation_time: \" + this.creation_time), t.log(t.indent + \"modification_time: \" + this.modification_time), t.log(t.indent + \"track_id: \" + this.track_id), t.log(t.indent + \"duration: \" + this.duration), t.log(t.indent + \"volume: \" + (this.volume >> 8)), t.log(t.indent + \"matrix: \" + this.matrix.join(\", \")), t.log(t.indent + \"layer: \" + this.layer), t.log(t.indent + \"alternate_group: \" + this.alternate_group), t.log(t.indent + \"width: \" + this.width), t.log(t.indent + \"height: \" + this.height);\n  };\n  var B = {};\n  B.createFile = function(t, e) {\n    var i = t !== void 0 ? t : !0, s = new y(e);\n    return s.discardMdatData = !i, s;\n  }, l.createFile = B.createFile;\n})(Ge);\nconst D = /* @__PURE__ */ xi(Ge), q = {\n  sampleRate: 48e3,\n  channelCount: 2,\n  codec: \"mp4a.40.2\"\n};\nfunction de(l, r) {\n  const h = r.videoTracks[0], a = {};\n  if (h != null) {\n    const d = Ui(l.getTrackById(h.id)).buffer, { descKey: p, type: n } = h.codec.startsWith(\"avc1\") ? { descKey: \"avcDecoderConfigRecord\", type: \"avc1\" } : h.codec.startsWith(\"hvc1\") ? { descKey: \"hevcDecoderConfigRecord\", type: \"hvc1\" } : { descKey: \"\", type: \"\" };\n    p !== \"\" && (a.videoTrackConf = {\n      timescale: h.timescale,\n      duration: h.duration,\n      width: h.video.width,\n      height: h.video.height,\n      brands: r.brands,\n      type: n,\n      [p]: d\n    }), a.videoDecoderConf = {\n      codec: h.codec,\n      codedHeight: h.video.height,\n      codedWidth: h.video.width,\n      description: d\n    };\n  }\n  const f = r.audioTracks[0];\n  if (f != null) {\n    const d = Se(l);\n    a.audioTrackConf = {\n      timescale: f.timescale,\n      samplerate: f.audio.sample_rate,\n      channel_count: f.audio.channel_count,\n      hdlr: \"soun\",\n      type: f.codec.startsWith(\"mp4a\") ? \"mp4a\" : f.codec,\n      description: Se(l)\n    }, a.audioDecoderConf = {\n      codec: f.codec.startsWith(\"mp4a\") ? q.codec : f.codec,\n      numberOfChannels: f.audio.channel_count,\n      sampleRate: f.audio.sample_rate,\n      ...d == null ? {} : Ei(d)\n    };\n  }\n  return a;\n}\nfunction Ui(l) {\n  for (const r of l.mdia.minf.stbl.stsd.entries) {\n    const h = r.avcC ?? r.hvcC ?? r.vpcC;\n    if (h != null) {\n      const a = new D.DataStream(\n        void 0,\n        0,\n        D.DataStream.BIG_ENDIAN\n      );\n      return h.write(a), new Uint8Array(a.buffer.slice(8));\n    }\n  }\n  throw Error(\"avcC, hvcC or VPX not found\");\n}\nfunction Se(l, r = \"mp4a\") {\n  var a;\n  const h = (a = l.moov) == null ? void 0 : a.traks.map((f) => f.mdia.minf.stbl.stsd.entries).flat().find(({ type: f }) => f === r);\n  return h == null ? void 0 : h.esds;\n}\nfunction Ei(l) {\n  var n;\n  const r = (n = l.esd.descs[0]) == null ? void 0 : n.descs[0];\n  if (r == null) return {};\n  const [h, a] = r.data, f = ((h & 7) << 1) + (a >> 7), d = (a & 127) >> 3;\n  return {\n    sampleRate: [\n      96e3,\n      88200,\n      64e3,\n      48e3,\n      44100,\n      32e3,\n      24e3,\n      22050,\n      16e3,\n      12e3,\n      11025,\n      8e3,\n      7350\n    ][f],\n    numberOfChannels: d\n  };\n}\nfunction Ai(l) {\n  if (l.moov != null) {\n    for (var r = 0; r < l.moov.traks.length; r++)\n      l.moov.traks[r].samples = [];\n    l.mdats = [], l.moofs = [];\n  }\n}\nvar zt;\nclass ce {\n  constructor() {\n    R(this, \"readable\");\n    R(this, \"writable\");\n    A(this, zt, 0);\n    const r = D.createFile();\n    let h = !1;\n    this.readable = new ReadableStream(\n      {\n        start: (a) => {\n          r.onReady = (d) => {\n            var v, b;\n            const p = (v = d.videoTracks[0]) == null ? void 0 : v.id;\n            p != null && r.setExtractionOptions(p, \"video\", { nbSamples: 100 });\n            const n = (b = d.audioTracks[0]) == null ? void 0 : b.id;\n            n != null && r.setExtractionOptions(n, \"audio\", { nbSamples: 100 }), a.enqueue({ chunkType: \"ready\", data: { info: d, file: r } }), r.start();\n          };\n          const f = {};\n          r.onSamples = (d, p, n) => {\n            a.enqueue({\n              chunkType: \"samples\",\n              data: { id: d, type: p, samples: n.map((v) => ({ ...v })) }\n            }), f[d] = (f[d] ?? 0) + n.length, r.releaseUsedSamples(d, f[d]);\n          }, r.onFlush = () => {\n            a.close();\n          };\n        },\n        cancel: () => {\n          r.stop(), h = !0;\n        }\n      },\n      {\n        highWaterMark: 50\n      }\n    ), this.writable = new WritableStream({\n      write: async (a) => {\n        if (h) {\n          this.writable.abort();\n          return;\n        }\n        const f = a.buffer;\n        f.fileStart = m(this, zt), E(this, zt, m(this, zt) + f.byteLength), r.appendBuffer(f);\n      },\n      close: () => {\n        var a;\n        r.flush(), r.stop(), (a = r.onFlush) == null || a.call(r);\n      }\n    });\n  }\n}\nzt = new WeakMap();\nlet Bi = 0;\nfunction ne(l) {\n  return l.kind === \"file\" && l.createReader instanceof Function;\n}\nvar Tt, Pt, G, K, Lt, st, wt, bt, St, V, Q;\nclass sn {\n  constructor(r, h = {}) {\n    A(this, Tt, z.create(`MP4Clip id:${Bi++},`));\n    R(this, \"ready\");\n    A(this, Pt, !1);\n    A(this, G, {\n      duration: 0,\n      width: 0,\n      height: 0,\n      audioSampleRate: 0,\n      audioChanCount: 0\n    });\n    A(this, K);\n    A(this, Lt, 1);\n    A(this, st, []);\n    A(this, wt, null);\n    A(this, bt, null);\n    A(this, St, {\n      video: null,\n      audio: null\n    });\n    A(this, V, { audio: !0 });\n    R(this, \"tickInterceptor\", async (r, h) => h);\n    A(this, Q, new AbortController());\n    if (!(r instanceof ReadableStream) && !ne(r) && !Array.isArray(r.videoSamples))\n      throw Error(\"Illegal argument\");\n    E(this, V, { audio: !0, ...h }), E(this, Lt, typeof h.audio == \"object\" && \"volume\" in h.audio ? h.audio.volume : 1);\n    const a = async (f) => (await Ct(m(this, K), f), await m(this, K).stream());\n    E(this, K, ne(r) ? r : \"localFile\" in r ? r.localFile : Kt()), this.ready = (r instanceof ReadableStream ? a(r).then((f) => xe(f, m(this, V))) : ne(r) ? r.stream().then((f) => xe(f, m(this, V))) : Promise.resolve(r)).then(async ({ videoSamples: f, audioSamples: d, decoderConf: p }) => {\n      E(this, st, f), E(this, St, p);\n      const { videoFrameFinder: n, audioFrameFinder: v } = Ii(\n        {\n          video: p.video == null ? null : {\n            ...p.video,\n            hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n          },\n          audio: p.audio\n        },\n        await m(this, K).createReader(),\n        f,\n        d,\n        m(this, V).audio !== !1 ? m(this, Lt) : 0\n      );\n      return E(this, wt, n), E(this, bt, v), E(this, G, Fi(p, f, d)), m(this, Tt).info(\"MP4Clip meta:\", m(this, G)), { ...m(this, G) };\n    });\n  }\n  get meta() {\n    return { ...m(this, G) };\n  }\n  async tick(r) {\n    var f, d;\n    if (r >= m(this, G).duration)\n      return await this.tickInterceptor(r, {\n        audio: [],\n        state: \"done\"\n      });\n    const [h, a] = await Promise.all([\n      ((f = m(this, bt)) == null ? void 0 : f.find(r)) ?? [],\n      (d = m(this, wt)) == null ? void 0 : d.find(r)\n    ]);\n    return a == null ? await this.tickInterceptor(r, {\n      audio: h,\n      state: \"success\"\n    }) : await this.tickInterceptor(r, {\n      video: a,\n      audio: h,\n      state: \"success\"\n    });\n  }\n  async thumbnails(r = 100, h) {\n    m(this, Q).abort(), E(this, Q, new AbortController());\n    const a = m(this, Q).signal;\n    await this.ready;\n    const f = \"generate thumbnails aborted\";\n    if (a.aborted) throw Error(f);\n    const { width: d, height: p } = m(this, G), n = Ue(\n      r,\n      Math.round(p * (r / d)),\n      { quality: 0.1, type: \"image/png\" }\n    );\n    return new Promise(\n      async (v, b) => {\n        let y = [];\n        const B = m(this, St).video;\n        if (B == null || m(this, st).length === 0) {\n          t();\n          return;\n        }\n        a.addEventListener(\"abort\", () => {\n          b(Error(f));\n        });\n        async function t() {\n          a.aborted || v(\n            await Promise.all(\n              y.map(async (_) => ({\n                ts: _.ts,\n                img: await _.img\n              }))\n            )\n          );\n        }\n        function e(_) {\n          y.push({\n            ts: _.timestamp,\n            img: n(_)\n          });\n        }\n        const { start: i = 0, end: s = m(this, G).duration, step: o = 1e6 } = h ?? {};\n        let c = i;\n        const u = new oe(\n          await m(this, K).createReader(),\n          m(this, st),\n          {\n            ...B,\n            hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n          }\n        );\n        for (; c <= s && !a.aborted; ) {\n          const _ = await u.find(c);\n          _ && e(_), c += o;\n        }\n        u.destroy(), t();\n      }\n    );\n  }\n  async thumbnailsList(r = 100, h) {\n    var v;\n    if (((v = h == null ? void 0 : h.timestamps) == null ? void 0 : v.length) === 0) return [];\n    m(this, Q).abort(), E(this, Q, new AbortController());\n    const a = m(this, Q).signal;\n    await this.ready;\n    const f = \"generate thumbnails aborted\";\n    if (a.aborted) throw Error(f);\n    const { width: d, height: p } = m(this, G), n = Ue(\n      r,\n      Math.round(p * (r / d)),\n      { quality: 0.1, type: \"image/png\" }\n    );\n    return new Promise(\n      async (b, y) => {\n        let B = [];\n        const t = m(this, St).video;\n        if (t == null || m(this, st).length === 0) {\n          e();\n          return;\n        }\n        a.addEventListener(\"abort\", () => {\n          y(Error(f));\n        });\n        async function e() {\n          a.aborted || b(\n            await Promise.all(\n              B.map(async (c) => ({\n                ts: c.ts,\n                img: await c.img\n              }))\n            )\n          );\n        }\n        function i(c) {\n          B.push({\n            ts: c.timestamp,\n            img: n(c)\n          });\n        }\n        const s = (h == null ? void 0 : h.timestamps) ?? [];\n        if (s.length === 0) {\n          e();\n          return;\n        }\n        const o = new oe(\n          await m(this, K).createReader(),\n          m(this, st),\n          {\n            ...t,\n            hardwareAcceleration: m(this, V).__unsafe_hardwareAcceleration__\n          }\n        );\n        for (const c of s) {\n          if (a.aborted) break;\n          const u = await o.find(c);\n          u && i(u);\n        }\n        o.destroy(), e();\n      }\n    );\n  }\n  destroy() {\n    var r, h;\n    m(this, Pt) || (m(this, Tt).info(\"MP4Clip destroy\"), E(this, Pt, !0), (r = m(this, wt)) == null || r.destroy(), (h = m(this, bt)) == null || h.destroy());\n  }\n}\nTt = new WeakMap(), Pt = new WeakMap(), G = new WeakMap(), K = new WeakMap(), Lt = new WeakMap(), st = new WeakMap(), wt = new WeakMap(), bt = new WeakMap(), St = new WeakMap(), V = new WeakMap(), Q = new WeakMap();\nfunction Fi(l, r, h) {\n  const a = {\n    duration: 0,\n    width: 0,\n    height: 0,\n    audioSampleRate: 0,\n    audioChanCount: 0\n  };\n  l.video != null && r.length > 0 && (a.width = l.video.codedWidth ?? 0, a.height = l.video.codedHeight ?? 0), l.audio != null && h.length > 0 && (a.audioSampleRate = q.sampleRate, a.audioChanCount = q.channelCount);\n  let f = 0, d = 0;\n  if (r.length > 0)\n    for (let p = r.length - 1; p >= 0; p--) {\n      const n = r[p];\n      if (!n.deleted) {\n        f = n.cts + n.duration;\n        break;\n      }\n    }\n  if (h.length > 0) {\n    const p = h.at(-1);\n    d = p.cts + p.duration;\n  }\n  return a.duration = Math.max(f, d), a;\n}\nfunction Ii(l, r, h, a, f) {\n  return {\n    audioFrameFinder: f === 0 || l.audio == null || a.length === 0 ? null : new Ci(\n      r,\n      a,\n      l.audio,\n      {\n        volume: f,\n        targetSampleRate: q.sampleRate\n      }\n    ),\n    videoFrameFinder: l.video == null || h.length === 0 ? null : new oe(\n      r,\n      h,\n      l.video\n    )\n  };\n}\nasync function xe(l, r = {}) {\n  let h;\n  const a = { video: null, audio: null };\n  let f = [], d = [];\n  return new Promise(async (n, v) => {\n    let b = -1, y = -1;\n    const B = fe(l.pipeThrough(new ce()), {\n      onChunk: async ({ chunkType: t, data: e }) => {\n        if (t === \"ready\") {\n          h = e.info;\n          let { videoDecoderConf: i, audioDecoderConf: s } = de(e.file, e.info);\n          a.video = i ?? null, a.audio = s ?? null, i == null && s == null && (B(), v(\n            Error(\"MP4Clip must contain at least one video or audio track\")\n          )), z.info(\n            \"mp4BoxFile moov ready\",\n            {\n              ...e.info,\n              tracks: null,\n              videoTracks: null,\n              audioTracks: null\n            },\n            a\n          );\n        } else if (t === \"samples\") {\n          if (e.type === \"video\") {\n            b === -1 && (b = e.samples[0].dts);\n            for (const i of e.samples)\n              f.push(p(i, b, \"video\"));\n          } else if (e.type === \"audio\" && r.audio) {\n            y === -1 && (y = e.samples[0].dts);\n            for (const i of e.samples)\n              d.push(p(i, y, \"audio\"));\n          }\n        }\n      },\n      onDone: () => {\n        const t = f.at(-1) ?? d.at(-1);\n        if (h == null) {\n          v(Error(\"MP4Clip stream is done, but not emit ready\"));\n          return;\n        } else if (t == null) {\n          v(Error(\"MP4Clip stream not contain any sample\"));\n          return;\n        }\n        const e = f[0];\n        e != null && e.cts < 2e5 && (e.duration += e.cts, e.cts = 0), z.info(\"mp4 stream parsed\"), n({\n          videoSamples: f,\n          audioSamples: d,\n          decoderConf: a\n        });\n      }\n    });\n  });\n  function p(n, v = 0, b) {\n    return {\n      ...n,\n      is_idr: b === \"video\" && n.is_sync && Di(n.data, n.description.type),\n      cts: (n.cts - v) / n.timescale * 1e6,\n      dts: (n.dts - v) / n.timescale * 1e6,\n      duration: n.duration / n.timescale * 1e6,\n      timescale: 1e6,\n      data: b === \"video\" ? null : n.data\n    };\n  }\n}\nvar L, lt, ft, kt, dt, W, k, rt, ct, xt, at, Dt, ut, Jt;\nclass oe {\n  constructor(r, h, a) {\n    A(this, L, null);\n    A(this, lt, 0);\n    A(this, ft, { abort: !1, st: performance.now() });\n    R(this, \"find\", async (r) => ((m(this, L) == null || r <= m(this, lt) || r - m(this, lt) > 3e6) && m(this, ut).call(this, r), m(this, ft).abort = !0, E(this, lt, r), E(this, ft, { abort: !1, st: performance.now() }), await m(this, xt).call(this, r, m(this, L), m(this, ft))));\n    // fix VideoFrame duration is null\n    A(this, kt, 0);\n    A(this, dt, !1);\n    A(this, W, 0);\n    A(this, k, []);\n    A(this, rt, 0);\n    A(this, ct, 0);\n    A(this, xt, async (r, h, a) => {\n      if (h == null || h.state === \"closed\" || a.abort) return null;\n      if (m(this, k).length > 0) {\n        const f = m(this, k)[0];\n        return r < f.timestamp ? null : (m(this, k).shift(), r > f.timestamp + (f.duration ?? 0) ? (f.close(), await m(this, xt).call(this, r, h, a)) : (m(this, k).length < 10 && m(this, Dt).call(this, h).catch((d) => {\n          throw m(this, ut).call(this, r), d;\n        }), f));\n      }\n      if (m(this, at) || m(this, rt) < m(this, ct) && h.decodeQueueSize > 0) {\n        if (performance.now() - a.st > 6e3)\n          throw Error(\n            `MP4Clip.tick video timeout, ${JSON.stringify(m(this, Jt).call(this))}`\n          );\n        await Ne(15);\n      } else {\n        if (m(this, W) >= this.samples.length)\n          return null;\n        try {\n          await m(this, Dt).call(this, h);\n        } catch (f) {\n          throw m(this, ut).call(this, r), f;\n        }\n      }\n      return await m(this, xt).call(this, r, h, a);\n    });\n    A(this, at, !1);\n    A(this, Dt, async (r) => {\n      var f, d;\n      if (m(this, at)) return;\n      E(this, at, !0);\n      let h = m(this, W) + 1, a = !1;\n      for (; h < this.samples.length; h++) {\n        const p = this.samples[h];\n        if (!a && !p.deleted && (a = !0), p.is_idr) break;\n      }\n      if (a) {\n        const p = this.samples.slice(m(this, W), h);\n        if (((f = p[0]) == null ? void 0 : f.is_idr) !== !0)\n          z.warn(\"First sample not idr frame\");\n        else {\n          const n = await Li(p, this.localFileReader);\n          if (r.state === \"closed\") return;\n          E(this, kt, ((d = n[0]) == null ? void 0 : d.duration) ?? 0), ki(r, n, {\n            onDecodingError: (v) => {\n              if (m(this, dt))\n                throw v;\n              m(this, rt) === 0 && (E(this, dt, !0), z.warn(\"Downgrade to software decode\"), m(this, ut).call(this));\n            }\n          }), E(this, ct, m(this, ct) + n.length);\n        }\n      }\n      E(this, W, h), E(this, at, !1);\n    });\n    A(this, ut, (r) => {\n      var h, a;\n      if (E(this, at, !1), m(this, k).forEach((f) => f.close()), E(this, k, []), r == null || r === 0)\n        E(this, W, 0);\n      else {\n        let f = 0;\n        for (let d = 0; d < this.samples.length; d++) {\n          const p = this.samples[d];\n          if (p.is_idr && (f = d), !(p.cts < r)) {\n            E(this, W, f);\n            break;\n          }\n        }\n      }\n      E(this, ct, 0), E(this, rt, 0), ((h = m(this, L)) == null ? void 0 : h.state) !== \"closed\" && ((a = m(this, L)) == null || a.close()), E(this, L, new VideoDecoder({\n        output: (f) => {\n          if (E(this, rt, m(this, rt) + 1), f.timestamp === -1) {\n            f.close();\n            return;\n          }\n          let d = f;\n          f.duration == null && (d = new VideoFrame(f, {\n            duration: m(this, kt)\n          }), f.close()), m(this, k).push(d);\n        },\n        error: (f) => {\n          z.error(`MP4Clip VideoDecoder err: ${f.message}`);\n        }\n      })), m(this, L).configure({\n        ...this.conf,\n        ...m(this, dt) ? { hardwareAcceleration: \"prefer-software\" } : {}\n      });\n    });\n    A(this, Jt, () => {\n      var r, h;\n      return {\n        time: m(this, lt),\n        decState: (r = m(this, L)) == null ? void 0 : r.state,\n        decQSize: (h = m(this, L)) == null ? void 0 : h.decodeQueueSize,\n        decCusorIdx: m(this, W),\n        sampleLen: this.samples.length,\n        inputCnt: m(this, ct),\n        outputCnt: m(this, rt),\n        cacheFrameLen: m(this, k).length,\n        softDeocde: m(this, dt)\n      };\n    });\n    R(this, \"destroy\", () => {\n      var r, h;\n      ((r = m(this, L)) == null ? void 0 : r.state) !== \"closed\" && ((h = m(this, L)) == null || h.close()), E(this, L, null), m(this, ft).abort = !0, m(this, k).forEach((a) => a.close()), E(this, k, []), this.localFileReader.close();\n    });\n    this.localFileReader = r, this.samples = h, this.conf = a;\n  }\n}\nL = new WeakMap(), lt = new WeakMap(), ft = new WeakMap(), kt = new WeakMap(), dt = new WeakMap(), W = new WeakMap(), k = new WeakMap(), rt = new WeakMap(), ct = new WeakMap(), xt = new WeakMap(), at = new WeakMap(), Dt = new WeakMap(), ut = new WeakMap(), Jt = new WeakMap();\nvar Rt, Mt, Z, pt, X, J, j, Ot, Nt, $t, qt;\nclass Ci {\n  constructor(r, h, a, f) {\n    A(this, Rt, 1);\n    A(this, Mt);\n    A(this, Z, null);\n    A(this, pt, { abort: !1, st: performance.now() });\n    R(this, \"find\", async (r) => {\n      if (m(this, Z) == null || r <= m(this, X) || r - m(this, X) > 1e5) {\n        m(this, $t).call(this), E(this, X, r);\n        for (let a = 0; a < this.samples.length; a++)\n          if (!(this.samples[a].cts < r)) {\n            E(this, J, a);\n            break;\n          }\n        return [];\n      }\n      m(this, pt).abort = !0;\n      const h = r - m(this, X);\n      return E(this, X, r), E(this, pt, { abort: !1, st: performance.now() }), await m(this, Ot).call(this, h, m(this, Z), m(this, pt));\n    });\n    A(this, X, 0);\n    A(this, J, 0);\n    A(this, j, {\n      frameCnt: 0,\n      data: []\n    });\n    A(this, Ot, async (r, h = null, a) => {\n      if (h == null || a.abort || h.state === \"closed\") return [];\n      const f = Math.ceil(r * (m(this, Mt) / 1e6));\n      if (f === 0) return [];\n      const d = m(this, j).frameCnt - f;\n      if (d > 0)\n        return d < q.sampleRate / 10 && m(this, Nt).call(this, h), Pi(m(this, j), f);\n      if (h.decodeQueueSize > 10) {\n        if (performance.now() - a.st > 3e3)\n          throw a.abort = !0, Error(\n            `MP4Clip.tick audio timeout, ${JSON.stringify(m(this, qt).call(this))}`\n          );\n        await Ne(15);\n      } else {\n        if (m(this, J) >= this.samples.length - 1)\n          return [];\n        m(this, Nt).call(this, h);\n      }\n      return m(this, Ot).call(this, r, h, a);\n    });\n    A(this, Nt, (r) => {\n      if (r.decodeQueueSize > 100) return;\n      const h = [];\n      let a = m(this, J);\n      for (; a < this.samples.length; ) {\n        const f = this.samples[a];\n        if (a += 1, !f.deleted && (h.push(f), h.length >= 10))\n          break;\n      }\n      E(this, J, a), r.decode(\n        h.map(\n          (f) => new EncodedAudioChunk({\n            type: \"key\",\n            timestamp: f.cts,\n            duration: f.duration,\n            data: f.data\n          })\n        )\n      );\n    });\n    A(this, $t, () => {\n      var r;\n      E(this, X, 0), E(this, J, 0), E(this, j, {\n        frameCnt: 0,\n        data: []\n      }), (r = m(this, Z)) == null || r.close(), E(this, Z, zi(\n        this.conf,\n        {\n          resampleRate: q.sampleRate,\n          volume: m(this, Rt)\n        },\n        (h) => {\n          m(this, j).data.push(h), m(this, j).frameCnt += h[0].length;\n        }\n      ));\n    });\n    A(this, qt, () => {\n      var r, h;\n      return {\n        time: m(this, X),\n        decState: (r = m(this, Z)) == null ? void 0 : r.state,\n        decQSize: (h = m(this, Z)) == null ? void 0 : h.decodeQueueSize,\n        decCusorIdx: m(this, J),\n        sampleLen: this.samples.length,\n        pcmLen: m(this, j).frameCnt\n      };\n    });\n    R(this, \"destroy\", () => {\n      E(this, Z, null), m(this, pt).abort = !0, E(this, j, {\n        frameCnt: 0,\n        data: []\n      }), this.localFileReader.close();\n    });\n    this.localFileReader = r, this.samples = h, this.conf = a, E(this, Rt, f.volume), E(this, Mt, f.targetSampleRate);\n  }\n}\nRt = new WeakMap(), Mt = new WeakMap(), Z = new WeakMap(), pt = new WeakMap(), X = new WeakMap(), J = new WeakMap(), j = new WeakMap(), Ot = new WeakMap(), Nt = new WeakMap(), $t = new WeakMap(), qt = new WeakMap();\nfunction zi(l, r, h) {\n  const a = (n) => {\n    if (n.length !== 0) {\n      if (r.volume !== 1)\n        for (const v of n)\n          for (let b = 0; b < v.length; b++) v[b] *= r.volume;\n      n.length === 1 && (n = [n[0], n[0]]), h(n);\n    }\n  }, f = Ti(a), d = r.resampleRate !== l.sampleRate, p = new AudioDecoder({\n    output: (n) => {\n      const v = le(n);\n      d ? f(\n        () => bi(v, n.sampleRate, {\n          rate: r.resampleRate,\n          chanCount: n.numberOfChannels\n        })\n      ) : a(v), n.close();\n    },\n    error: (n) => {\n      z.error(`MP4Clip AudioDecoder err: ${n.message}`);\n    }\n  });\n  return p.configure(l), {\n    decode(n) {\n      for (const v of n) p.decode(v);\n    },\n    close() {\n      p.state !== \"closed\" && p.close();\n    },\n    get state() {\n      return p.state;\n    },\n    get decodeQueueSize() {\n      return p.decodeQueueSize;\n    }\n  };\n}\nfunction Ti(l) {\n  const r = [];\n  let h = 0;\n  function a(p, n) {\n    r[n] = p, f();\n  }\n  function f() {\n    const p = r[h];\n    p != null && (l(p), h += 1, f());\n  }\n  let d = 0;\n  return (p) => {\n    const n = d;\n    d += 1, p().then((v) => a(v, n)).catch((v) => a(v, n));\n  };\n}\nfunction Pi(l, r) {\n  const h = [new Float32Array(r), new Float32Array(r)];\n  let a = 0, f = 0;\n  for (; f < l.data.length; ) {\n    const [d, p] = l.data[f];\n    if (a + d.length > r) {\n      const n = r - a;\n      h[0].set(d.subarray(0, n), a), h[1].set(p.subarray(0, n), a), l.data[f][0] = d.subarray(n, d.length), l.data[f][1] = p.subarray(n, p.length);\n      break;\n    } else\n      h[0].set(d, a), h[1].set(p, a), a += d.length, f++;\n  }\n  return l.data = l.data.slice(f), l.frameCnt -= r, h;\n}\nasync function Li(l, r) {\n  const h = l[0], a = l.at(-1);\n  if (a == null) return [];\n  const f = a.offset + a.size - h.offset;\n  if (f < 3e7) {\n    const d = new Uint8Array(\n      await r.read(f, { at: h.offset })\n    );\n    return l.map((p) => {\n      const n = p.offset - h.offset;\n      let v = d.subarray(n, n + p.size);\n      return p.is_idr && (v = Ee(v)), new EncodedVideoChunk({\n        type: p.is_sync ? \"key\" : \"delta\",\n        timestamp: p.cts,\n        duration: p.duration,\n        data: v\n      });\n    });\n  }\n  return await Promise.all(\n    l.map(async (d) => {\n      let p = await r.read(d.size, {\n        at: d.offset\n      });\n      return d.is_idr && (p = Ee(new Uint8Array(p))), new EncodedVideoChunk({\n        type: d.is_sync ? \"key\" : \"delta\",\n        timestamp: d.cts,\n        duration: d.duration,\n        data: p\n      });\n    })\n  );\n}\nfunction Ue(l, r, h) {\n  const a = new OffscreenCanvas(l, r), f = a.getContext(\"2d\");\n  return async (d) => (f.drawImage(d, 0, 0, l, r), d.close(), await a.convertToBlob(h));\n}\nfunction ki(l, r, h) {\n  let a = 0;\n  if (l.state === \"configured\") {\n    for (; a < r.length; a++) l.decode(r[a]);\n    l.flush().catch((f) => {\n      if (!(f instanceof Error)) throw f;\n      if (f.message.includes(\"Decoding error\") && h.onDecodingError != null) {\n        h.onDecodingError(f);\n        return;\n      }\n      if (!f.message.includes(\"Aborted due to close\"))\n        throw f;\n    });\n  }\n}\nfunction Ee(l) {\n  const r = new DataView(l.buffer, l.byteOffset, l.byteLength);\n  return (r.getUint8(4) & 31) === 6 ? l.subarray(r.getUint32(0) + 4) : l;\n}\nfunction Di(l, r) {\n  if (r !== \"avc1\" && r !== \"hvc1\") return !1;\n  const h = new DataView(l.buffer);\n  let a = 0;\n  for (; a < l.byteLength - 4; ) {\n    if (r === \"avc1\") {\n      if ((h.getUint8(a + 4) & 31) === 5) return !0;\n    } else if (r === \"hvc1\" && (h.getUint8(a + 4) >> 1 & 63) === 20)\n      return !0;\n    a += h.getUint32(a) + 4;\n  }\n  return !1;\n}\nvar $;\nclass Ri {\n  constructor() {\n    A(this, $, /* @__PURE__ */ new Map());\n    R(this, \"on\", (r, h) => {\n      const a = m(this, $).get(r) ?? /* @__PURE__ */ new Set();\n      return a.add(h), m(this, $).has(r) || m(this, $).set(r, a), () => {\n        a.delete(h), a.size === 0 && m(this, $).delete(r);\n      };\n    });\n    R(this, \"once\", (r, h) => {\n      const a = this.on(r, (...f) => {\n        a(), h(...f);\n      });\n      return a;\n    });\n    R(this, \"emit\", (r, ...h) => {\n      const a = m(this, $).get(r);\n      a != null && a.forEach((f) => f(...h));\n    });\n  }\n  static forwardEvent(r, h, a) {\n    const f = a.map((d) => {\n      const [p, n] = Array.isArray(d) ? d : [d, d];\n      return r.on(p, (...v) => {\n        h.emit(n, ...v);\n      });\n    });\n    return () => {\n      f.forEach((d) => d());\n    };\n  }\n  destroy() {\n    m(this, $).clear();\n  }\n}\n$ = new WeakMap();\nconst ue = (l, r) => {\n  const h = new Uint8Array(8);\n  new DataView(h.buffer).setUint32(0, r);\n  for (let f = 0; f < 4; f++)\n    h[4 + f] = l.charCodeAt(f);\n  return h;\n}, Mi = () => {\n  const l = new TextEncoder(), r = l.encode(\"mdta\"), h = l.encode(\"mp4 handler\"), a = 32 + h.byteLength + 1, f = new Uint8Array(a), d = new DataView(f.buffer);\n  return f.set(ue(\"hdlr\", a), 0), d.setUint32(8, 0), f.set(r, 16), f.set(h, 32), f;\n}, Oi = (l) => {\n  const r = new TextEncoder(), h = r.encode(\"mdta\"), a = l.map((b) => {\n    const y = r.encode(b), B = 8 + y.byteLength, t = new Uint8Array(B);\n    return new DataView(t.buffer).setUint32(0, B), t.set(h, 4), t.set(y, 4 + h.byteLength), t;\n  }), d = 16 + a.reduce((b, y) => b + y.byteLength, 0), p = new Uint8Array(d), n = new DataView(p.buffer);\n  p.set(ue(\"keys\", d), 0), n.setUint32(8, 0), n.setUint32(12, l.length);\n  let v = 16;\n  for (const b of a)\n    p.set(b, v), v += b.byteLength;\n  return p;\n}, Ni = (l) => {\n  const r = new TextEncoder(), h = r.encode(\"data\"), a = Object.entries(l).map(([v, b], y) => {\n    const B = y + 1, t = r.encode(b), e = 24 + t.byteLength, i = new Uint8Array(e), s = new DataView(i.buffer);\n    return s.setUint32(0, e), s.setUint32(4, B), s.setUint32(8, 16 + t.byteLength), i.set(h, 12), s.setUint32(16, 1), i.set(t, 24), i;\n  }), d = 8 + a.reduce((v, b) => v + b.byteLength, 0), p = new Uint8Array(d);\n  p.set(ue(\"ilst\", d), 0);\n  let n = 8;\n  for (const v of a)\n    p.set(v, n), n += v.byteLength;\n  return p;\n}, Gi = (l) => {\n  const r = Mi(), h = Oi(Object.keys(l)), a = Ni(l), f = r.length + h.length + a.length, d = new Uint8Array(f);\n  return d.set(r, 0), d.set(h, r.length), d.set(a, r.length + h.length), d;\n};\nfunction rn(l) {\n  z.info(\"recodemux opts:\", l);\n  const r = D.createFile(), h = new Ri(), a = (v, b) => {\n    const B = v.add(\"udta\").add(\"meta\");\n    B.data = Gi(b), B.size = B.data.byteLength;\n  };\n  let f = !1;\n  const d = () => {\n    r.moov == null || f || (f = !0, l.metaDataTags != null && a(r.moov, l.metaDataTags), l.duration != null && (r.moov.mvhd.duration = l.duration));\n  };\n  h.once(\"VideoReady\", d), h.once(\"AudioReady\", d);\n  let p = l.video != null ? Hi(l.video, r, h) : null, n = l.audio != null ? Vi(l.audio, r, h) : null;\n  return l.video == null && h.emit(\"VideoReady\"), l.audio == null && h.emit(\"AudioReady\"), {\n    encodeVideo: (v, b) => {\n      p == null || p.encode(v, b), v.close();\n    },\n    encodeAudio: (v) => {\n      n != null && (n.encode(v), v.close());\n    },\n    getEncodeQueueSize: () => (p == null ? void 0 : p.encodeQueueSize) ?? (n == null ? void 0 : n.encodeQueueSize) ?? 0,\n    flush: async () => {\n      await Promise.all([\n        p == null ? void 0 : p.flush(),\n        (n == null ? void 0 : n.state) === \"configured\" ? n.flush() : null\n      ]);\n    },\n    close: () => {\n      h.destroy(), p == null || p.close(), (n == null ? void 0 : n.state) === \"configured\" && n.close();\n    },\n    mp4file: r\n  };\n}\nfunction Hi(l, r, h) {\n  const a = {\n    timescale: 1e6,\n    width: l.width,\n    height: l.height,\n    brands: [\"isom\", \"iso2\", \"avc1\", \"mp42\", \"mp41\"],\n    avcDecoderConfigRecord: null,\n    name: \"Track created with WebAV\"\n  };\n  let f = -1, d = !1;\n  h.once(\"AudioReady\", () => {\n    d = !0;\n  });\n  const p = {\n    encoder0: [],\n    encoder1: []\n  }, n = (c, u, _) => {\n    var g;\n    if (f === -1 && _ != null) {\n      const w = (g = _.decoderConfig) == null ? void 0 : g.description;\n      Yi(w), a.avcDecoderConfigRecord = w, f = r.addTrack(a), h.emit(\"VideoReady\"), z.info(\"VideoEncoder, video track ready, trackId:\", f);\n    }\n    p[c].push(Qt(u));\n  };\n  let v = \"encoder1\", b = 0;\n  const y = Math.floor(1e3 / l.expectFPS * 1e3);\n  function B() {\n    if (!d) return;\n    const c = v === \"encoder1\" ? \"encoder0\" : \"encoder1\", u = p[v], _ = p[c];\n    if (u.length === 0 && _.length === 0) return;\n    let g = u[0];\n    if (g != null && (!g.is_sync || g.cts - b < y)) {\n      const S = t(u);\n      S > b && (b = S);\n    }\n    const w = _[0];\n    if (w != null && w.is_sync && w.cts - b < y) {\n      v = c, B();\n      return;\n    }\n    if (g != null && g.is_sync && (w != null && w.is_sync))\n      if (g.cts <= w.cts) {\n        const S = t(u);\n        S > b && (b = S);\n      } else {\n        v = c, B();\n        return;\n      }\n  }\n  function t(c) {\n    let u = -1, _ = 0;\n    for (; _ < c.length; _++) {\n      const g = c[_];\n      if (_ > 0 && g.is_sync) break;\n      r.addSample(f, g.data, g), u = g.cts + g.duration;\n    }\n    return c.splice(0, _), u;\n  }\n  const e = De(B, 15), i = Ae(\n    l,\n    (c, u) => n(\"encoder0\", c, u)\n  ), s = Ae(\n    l,\n    (c, u) => n(\"encoder1\", c, u)\n  );\n  let o = 0;\n  return {\n    get encodeQueueSize() {\n      return i.encodeQueueSize + s.encodeQueueSize;\n    },\n    encode: (c, u) => {\n      u.keyFrame && (o += 1), (o % 2 === 0 ? i : s).encode(c, u);\n    },\n    flush: async () => {\n      await Promise.all([\n        i.state === \"configured\" ? await i.flush() : null,\n        s.state === \"configured\" ? await s.flush() : null\n      ]), e(), B();\n    },\n    close: () => {\n      i.state === \"configured\" && i.close(), s.state === \"configured\" && s.close();\n    }\n  };\n}\nfunction Yi(l) {\n  const r = new Uint8Array(l);\n  r[2].toString(2).slice(-2).includes(\"1\") && (r[2] = 0);\n}\nfunction Ae(l, r) {\n  const h = new VideoEncoder({\n    error: z.error,\n    output: r\n  });\n  return h.configure({\n    codec: l.codec,\n    framerate: l.expectFPS,\n    hardwareAcceleration: l.__unsafe_hardwareAcceleration__,\n    bitrate: l.bitrate,\n    width: l.width,\n    height: l.height,\n    alpha: \"discard\",\n    avc: { format: \"avc\" }\n  }), h;\n}\nfunction Vi(l, r, h) {\n  const a = {\n    timescale: 1e6,\n    samplerate: l.sampleRate,\n    channel_count: l.channelCount,\n    hdlr: \"soun\",\n    type: l.codec === \"aac\" ? \"mp4a\" : \"Opus\",\n    name: \"Track created with WebAV\"\n  };\n  let f = -1, d = [], p = !1;\n  h.once(\"VideoReady\", () => {\n    p = !0, d.forEach((v) => {\n      const b = Qt(v);\n      r.addSample(f, b.data, b);\n    }), d = [];\n  });\n  const n = new AudioEncoder({\n    error: z.error,\n    output: (v, b) => {\n      var y;\n      if (f === -1) {\n        const B = (y = b.decoderConfig) == null ? void 0 : y.description;\n        f = r.addTrack({\n          ...a,\n          description: B == null ? void 0 : $i(B)\n        }), h.emit(\"AudioReady\"), z.info(\"AudioEncoder, audio track ready, trackId:\", f);\n      }\n      if (p) {\n        const B = Qt(v);\n        r.addSample(f, B.data, B);\n      } else\n        d.push(v);\n    }\n  });\n  return n.configure({\n    codec: l.codec === \"aac\" ? q.codec : \"opus\",\n    sampleRate: l.sampleRate,\n    numberOfChannels: l.channelCount,\n    bitrate: 128e3\n  }), n;\n}\nfunction Wi(l, r, h) {\n  let a = 0, f = 0;\n  const d = l.boxes;\n  let p = !1;\n  const n = () => {\n    var i;\n    if (!p)\n      if (d.find((s) => s.type === \"moof\") != null)\n        p = !0;\n      else\n        return null;\n    if (f >= d.length) return null;\n    const t = new D.DataStream();\n    t.endianness = D.DataStream.BIG_ENDIAN;\n    let e = f;\n    try {\n      for (; e < d.length; )\n        d[e].write(t), delete d[e], e += 1;\n    } catch (s) {\n      const o = d[e];\n      throw s instanceof Error && o != null ? Error(\n        `${s.message} | deltaBuf( boxType: ${o.type}, boxSize: ${o.size}, boxDataLen: ${((i = o.data) == null ? void 0 : i.length) ?? -1})`\n      ) : s;\n    }\n    return Ai(l), f = d.length, new Uint8Array(t.buffer);\n  };\n  let v = !1, b = !1, y = null;\n  return {\n    stream: new ReadableStream({\n      start(t) {\n        a = self.setInterval(() => {\n          const e = n();\n          e != null && !b && t.enqueue(e);\n        }, r), y = (e) => {\n          if (clearInterval(a), l.flush(), e != null) {\n            t.error(e);\n            return;\n          }\n          const i = n();\n          i != null && !b && t.enqueue(i), b || t.close();\n        }, v && y();\n      },\n      cancel() {\n        b = !0, clearInterval(a), h == null || h();\n      }\n    }),\n    stop: (t) => {\n      v || (v = !0, y == null || y(t));\n    }\n  };\n}\nfunction Zi(l) {\n  let r = 0;\n  const h = l.boxes, a = [];\n  let f = 0;\n  async function d() {\n    const i = e(h, r);\n    r = h.length, a.forEach(({ track: s, id: o }) => {\n      const c = s.samples.at(-1);\n      c != null && (f = Math.max(f, c.cts + c.duration)), l.releaseUsedSamples(o, s.samples.length), s.samples = [];\n    }), l.mdats = [], l.moofs = [], i != null && await (y == null ? void 0 : y.write(i));\n  }\n  let p = [];\n  function n() {\n    if (p.length > 0) return !0;\n    const i = h.findIndex((s) => s.type === \"moov\");\n    if (i === -1) return !1;\n    if (p = h.slice(0, i + 1), r = i + 1, a.length === 0)\n      for (let s = 1; ; s += 1) {\n        const o = l.getTrackById(s);\n        if (o == null) break;\n        a.push({ track: o, id: s });\n      }\n    return !0;\n  }\n  let v = 0;\n  const b = Kt();\n  let y = null;\n  const B = (async () => {\n    y = await b.createWriter(), v = self.setInterval(() => {\n      n() && d();\n    }, 100);\n  })();\n  let t = !1;\n  return async () => {\n    if (t) throw Error(\"File exported\");\n    if (t = !0, await B, clearInterval(v), !n() || y == null) return null;\n    l.flush(), await d(), await (y == null ? void 0 : y.close());\n    const i = p.find((c) => c.type === \"moov\");\n    if (i == null) return null;\n    i.mvhd.duration = f;\n    const s = Kt(), o = e(p, 0);\n    return await Ct(s, o), await Ct(s, b, { overwrite: !1 }), await s.stream();\n  };\n  function e(i, s) {\n    if (s >= i.length) return null;\n    const o = new D.DataStream();\n    o.endianness = D.DataStream.BIG_ENDIAN;\n    for (let c = s; c < i.length; c++)\n      i[c] !== null && (i[c].write(o), delete i[c]);\n    return new Uint8Array(o.buffer);\n  }\n}\nfunction Qt(l) {\n  const r = new ArrayBuffer(l.byteLength);\n  l.copyTo(r);\n  const h = l.timestamp;\n  return {\n    duration: l.duration ?? 0,\n    dts: h,\n    cts: h,\n    is_sync: l.type === \"key\",\n    data: r\n  };\n}\nasync function Xi(l) {\n  const r = D.createFile(), h = Zi(r);\n  await ji(l, r);\n  const a = await h();\n  if (a == null) throw Error(\"Can not generate file from streams\");\n  return a;\n}\nasync function ji(l, r) {\n  let h = 0, a = 0, f = 0, d = 0, p = 0, n = 0, v = null, b = null;\n  for (const y of l)\n    await new Promise(async (B) => {\n      fe(y.pipeThrough(new ce()), {\n        onDone: B,\n        onChunk: async ({ chunkType: t, data: e }) => {\n          if (t === \"ready\") {\n            const { videoTrackConf: i, audioTrackConf: s } = de(\n              e.file,\n              e.info\n            );\n            h === 0 && i != null && (h = r.addTrack(i)), d === 0 && s != null && (d = r.addTrack(s));\n          } else if (t === \"samples\") {\n            const { type: i, samples: s } = e, o = i === \"video\" ? h : d, c = i === \"video\" ? a : p, u = i === \"video\" ? f : n;\n            s.forEach((g) => {\n              r.addSample(o, g.data, {\n                duration: g.duration,\n                dts: g.dts + c,\n                cts: g.cts + u,\n                is_sync: g.is_sync\n              });\n            });\n            const _ = s.at(-1);\n            if (_ == null) return;\n            i === \"video\" ? v = _ : i === \"audio\" && (b = _);\n          }\n        }\n      });\n    }), v != null && (a += v.dts, f += v.cts), b != null && (p += b.dts, n += b.cts);\n}\nasync function an(l) {\n  return await Xi([l]);\n}\nfunction Ki(l) {\n  let r = [];\n  const h = new AudioDecoder({\n    output: (a) => {\n      r.push(a);\n    },\n    error: z.error\n  });\n  return h.configure(l), {\n    decode: async (a) => {\n      a.forEach((d) => {\n        h.decode(\n          new EncodedAudioChunk({\n            type: d.is_sync ? \"key\" : \"delta\",\n            timestamp: 1e6 * d.cts / d.timescale,\n            duration: 1e6 * d.duration / d.timescale,\n            data: d.data\n          })\n        );\n      }), await h.flush();\n      const f = r;\n      return r = [], f;\n    },\n    close: () => {\n      h.close();\n    }\n  };\n}\nfunction Qi(l, r) {\n  const h = new AudioEncoder({\n    output: (d) => {\n      r(Qt(d));\n    },\n    error: z.error\n  });\n  h.configure({\n    codec: l.codec,\n    sampleRate: l.sampleRate,\n    numberOfChannels: l.numberOfChannels\n  });\n  let a = null;\n  function f(d, p) {\n    return new AudioData({\n      timestamp: p,\n      numberOfChannels: l.numberOfChannels,\n      numberOfFrames: d.length / l.numberOfChannels,\n      sampleRate: l.sampleRate,\n      format: \"f32-planar\",\n      data: d\n    });\n  }\n  return {\n    encode: async (d, p) => {\n      a != null && h.encode(f(a.data, a.ts)), a = { data: d, ts: p };\n    },\n    stop: async () => {\n      a != null && (Ji(a.data, l.numberOfChannels, l.sampleRate), h.encode(f(a.data, a.ts)), a = null), await h.flush(), h.close();\n    }\n  };\n}\nfunction Ji(l, r, h) {\n  const a = l.length - 1, f = Math.min(h / 2, a);\n  for (let d = 0; d < f; d++)\n    for (let p = 1; p <= r; p++)\n      l[Math.floor(a / p) - d] *= d / f;\n}\nfunction on(l, r) {\n  z.info(\"mixinMP4AndAudio, opts:\", {\n    volume: r.volume,\n    loop: r.loop\n  });\n  const h = D.createFile(), { stream: a, stop: f } = Wi(h, 500);\n  let d = null, p = null, n = [], v = 0, b = 0, y = 0, B = !0, t = 48e3;\n  fe(l.pipeThrough(new ce()), {\n    onDone: async () => {\n      await (p == null ? void 0 : p.stop()), d == null || d.close(), f();\n    },\n    onChunk: async ({ chunkType: o, data: c }) => {\n      if (o === \"ready\") {\n        const { videoTrackConf: u, audioTrackConf: _, audioDecoderConf: g } = de(c.file, c.info);\n        v === 0 && u != null && (v = h.addTrack(u));\n        const w = _ ?? {\n          timescale: 1e6,\n          samplerate: t,\n          channel_count: q.channelCount,\n          hdlr: \"soun\",\n          name: \"SoundHandler\",\n          type: \"mp4a\"\n        };\n        b === 0 && (b = h.addTrack(w), t = (_ == null ? void 0 : _.samplerate) ?? t, B = _ != null);\n        const S = new AudioContext({ sampleRate: t });\n        n = Oe(\n          await S.decodeAudioData(\n            await new Response(r.stream).arrayBuffer()\n          )\n        ), g != null && (d = Ki(g)), p = Qi(\n          g ?? {\n            codec: w.type === \"mp4a\" ? q.codec : w.type,\n            numberOfChannels: w.channel_count,\n            sampleRate: w.samplerate\n          },\n          (U) => h.addSample(b, U.data, U)\n        );\n      } else if (o === \"samples\") {\n        const { id: u, type: _, samples: g } = c;\n        if (_ === \"video\") {\n          g.forEach((w) => h.addSample(u, w.data, w)), B || await i(g);\n          return;\n        }\n        _ === \"audio\" && await s(g);\n      }\n    }\n  });\n  function e(o) {\n    const c = n.map(\n      (u) => r.loop ? Si(u, y, y + o) : u.slice(y, y + o)\n    );\n    if (y += o, r.volume !== 1)\n      for (const u of c)\n        for (let _ = 0; _ < u.length; _++) u[_] *= r.volume;\n    return c;\n  }\n  async function i(o) {\n    const c = o[0], u = o[o.length - 1], _ = Math.floor(\n      (u.cts + u.duration - c.cts) / u.timescale * t\n    ), g = be([e(_)]);\n    g.length !== 0 && (p == null || p.encode(\n      g,\n      c.cts / c.timescale * 1e6\n    ));\n  }\n  async function s(o) {\n    if (d == null) return;\n    const c = (await d.decode(o)).map(\n      le\n    ), u = mi(c), _ = e(u[0].length), g = o[0];\n    p == null || p.encode(\n      be([u, _]),\n      g.cts / g.timescale * 1e6\n    );\n  }\n  return a;\n}\nfunction $i(l) {\n  const r = l.byteLength, h = new Uint8Array([\n    0,\n    // version 0\n    0,\n    0,\n    0,\n    // flags\n    3,\n    // descriptor_type\n    23 + r,\n    // length\n    0,\n    // 0x01, // es_id\n    2,\n    // es_id\n    0,\n    // stream_priority\n    4,\n    // descriptor_type\n    18 + r,\n    // length\n    64,\n    // codec : mpeg4_audio\n    21,\n    // stream_type\n    0,\n    0,\n    0,\n    // buffer_size\n    0,\n    0,\n    0,\n    0,\n    // maxBitrate\n    0,\n    0,\n    0,\n    0,\n    // avgBitrate\n    5,\n    // descriptor_type\n    r,\n    ...new Uint8Array(l instanceof ArrayBuffer ? l : l.buffer),\n    6,\n    1,\n    2\n  ]), a = new D.BoxParser.esdsBox(h.byteLength);\n  return a.hdr_size = 0, a.parse(new D.DataStream(h, 0, D.DataStream.BIG_ENDIAN)), a;\n}\n\n//# sourceMappingURL=frames.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@designcombo/frames/dist/frames.js\n"));

/***/ })

}]);